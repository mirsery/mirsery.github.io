<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mirsery</title>
  
  <subtitle>兴趣使然博客</subtitle>
  <link href="https://mirsery.github.io/atom.xml" rel="self"/>
  
  <link href="https://mirsery.github.io/"/>
  <updated>2021-08-24T13:50:24.000Z</updated>
  <id>https://mirsery.github.io/</id>
  
  <author>
    <name>mirsery</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis xml映射器(四)</title>
    <link href="https://mirsery.github.io/2021/08/24/java/2021/Mybatis-xml%E6%98%A0%E5%B0%84%E5%99%A8-%E4%BA%94/"/>
    <id>https://mirsery.github.io/2021/08/24/java/2021/Mybatis-xml%E6%98%A0%E5%B0%84%E5%99%A8-%E4%BA%94/</id>
    <published>2021-08-24T13:50:24.000Z</published>
    <updated>2021-08-24T13:50:24.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#discriminator----">discriminator 鉴别器</a><ul><li><a href="#discriminator--------">discriminator 鉴别器用法示例</a></li></ul></li><li><a href="#----">自动映射</a><ul><li><a href="#------">自动映射例子</a></li><li><a href="#------">自动映射等级</a></li></ul></li></ul><!-- tocstop --><blockquote><p>该文档摘抄自<a href="https://blog.mybatis.org./">https://blog.mybatis.org。</a></p></blockquote><h1 id="discriminator-鉴别器"><a href="#discriminator-鉴别器" class="headerlink" title="discriminator 鉴别器"></a>discriminator 鉴别器</h1><p>有时候，一个数据库查询可能会返回多个不同的结果集（但总体上还是有一定的联系的）。 鉴别器（discriminator）元素就是被设计来应对这种情况的，另外也能处理其它情况，例如类的继承层次结构。 鉴别器的概念很好理解——它很像 Java 语言中的 switch 语句。</p><h2 id="discriminator-鉴别器用法示例"><a href="#discriminator-鉴别器用法示例" class="headerlink" title="discriminator 鉴别器用法示例"></a>discriminator 鉴别器用法示例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">discriminator</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;draft&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;DraftPost&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">discriminator</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一个鉴别器的定义需要指定 column 和 javaType 属性。column 指定了 MyBatis 查询被比较值的地方。 而 javaType 用来确保使用正确的相等测试（虽然很多情况下字符串的相等测试都可以工作）。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vehicleResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Vehicle&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;vin&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;vin&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;year&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;year&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;make&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;make&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;model&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;model&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;color&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;color&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">discriminator</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;vehicle_type&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;carResult&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;truckResult&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;vanResult&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;suvResult&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">discriminator</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这个示例中，MyBatis 会从结果集中得到每条记录，然后比较它的 vehicle type 值。 如果它匹配任意一个鉴别器的 case，就会使用这个 case 指定的结果映射。 这个过程是互斥的，也就是说，剩余的结果映射将被忽略（除非它是扩展的，我们将在稍后讨论它）。 如果不能匹配任何一个 case，MyBatis 就只会使用鉴别器块外定义的结果映射。 所以，如果 carResult 的声明如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;carResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Car&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;doorCount&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;door_count&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么只有 doorCount 属性会被加载。这是为了即使鉴别器的 case 之间都能分为完全独立的一组，尽管和父结果映射可能没有什么关系。在上面的例子中，我们当然知道 cars 和 vehicles 之间有关系，也就是 Car 是一个 Vehicle。因此，我们希望剩余的属性也能被加载。而这只需要一个小修改。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;carResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Car&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;vehicleResult&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;doorCount&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;door_count&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在 vehicleResult 和 carResult 的属性都会被加载了，下面是等同的简洁风格:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vehicleResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Vehicle&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;vin&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;vin&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;year&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;year&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;make&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;make&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;model&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;model&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;color&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;color&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">discriminator</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;vehicle_type&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;carResult&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;doorCount&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;door_count&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">case</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;truckResult&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;boxSize&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;box_size&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;extendedCab&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;extended_cab&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">case</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;vanResult&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;powerSlidingDoor&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;power_sliding_door&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">case</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;suvResult&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;allWheelDrive&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;all_wheel_drive&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">case</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">discriminator</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="自动映射"><a href="#自动映射" class="headerlink" title="自动映射"></a>自动映射</h1><p>当自动映射查询结果时，MyBatis 会获取结果中返回的列名并在 Java 类中查找相同名字的属性（忽略大小写）。 这意味着如果发现了 ID 列和 id 属性，MyBatis 会将列 ID 的值赋给 id 属性。<br>通常<strong>数据库列使用大写字母组成的单词命名，单词间用下划线分隔</strong>；而 <strong>Java 属性一般遵循驼峰命名法约定</strong>。为了在这两种命名方式之间启用自动映射，需要将 <strong>mapUnderscoreToCamelCase</strong> 设置为 <strong>true</strong>。</p><h2 id="自动映射例子"><a href="#自动映射例子" class="headerlink" title="自动映射例子"></a>自动映射例子</h2><p>提供了结果映射后，自动映射也能工作。在这种情况下，对于每一个结果映射，在 ResultSet 出现的列，如果没有设置手动映射，将被自动映射。在自动映射处理完毕后，再处理手动映射。 在下面的例子中，id 和 userName 列将被自动映射，hashed_password 列将根据配置进行映射.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userResultMap&quot;</span>&gt;</span><br>  select<br>    user_id             as &quot;id&quot;,<br>    user_name           as &quot;userName&quot;,<br>    hashed_password<br>  from some_table<br>  where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;hashed_password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="自动映射等级"><a href="#自动映射等级" class="headerlink" title="自动映射等级"></a>自动映射等级</h2><p>有三种自动映射等级：</p><ul><li>NONE - 禁用自动映射。仅对手动映射的属性进行映射。</li><li>PARTIAL - 对除在内部定义了嵌套结果映射（也就是连接的属性）以外的属性进行映射(DEFAULT 默认等级s)</li><li>FULL - 自动映射所有属性。</li></ul><blockquote><p>默认值是 PARTIAL，这是有原因的。当对连接查询的结果使用 FULL 时，连接查询会在同一行中获取多个不同实体的数据，因此可能导致非预期的映射。 </p></blockquote><p>下面是可能导致风险的例子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBlog&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;blogResult&quot;</span>&gt;</span><br>  select<br>    B.id,<br>    B.title,<br>    A.username,<br>  from Blog B left outer join Author A on B.author_id = A.id<br>  where B.id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blogResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;authorResult&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;authorResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Author&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_username&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>在该结果映射中，Blog 和 Author 均将被自动映射。但是注意 Author 有一个 id 属性，在 ResultSet 中也有一个名为 id 的列，所以 Author 的 id 将填入 Blog 的 id，这可不是你期望的行为。 所以，要谨慎使用 FULL。无论设置的自动映射等级是哪种，你都可以通过在结果映射上设置 autoMapping 属性来为指定的结果映射设置启用/禁用自动映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;hashed_password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">mybatis鉴别器discriminator和自动映射</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="mybatis" scheme="https://mirsery.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis xml映射器(四)</title>
    <link href="https://mirsery.github.io/2021/08/24/java/2021/Mybatis-xml%E6%98%A0%E5%B0%84%E5%99%A8-%E5%9B%9B/"/>
    <id>https://mirsery.github.io/2021/08/24/java/2021/Mybatis-xml%E6%98%A0%E5%B0%84%E5%99%A8-%E5%9B%9B/</id>
    <published>2021-08-24T08:55:24.000Z</published>
    <updated>2021-08-24T08:55:24.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#------select---">关联的嵌套 Select 查询</a><ul><li><a href="#---------">关联的嵌套使用示例</a></li><li><a href="#---------">关联的嵌套结果映射</a></li><li><a href="#--------resultset-">关联的多结果集（ResultSet）</a></li><li><a href="#------select---">集合的嵌套 Select 查询</a></li><li><a href="#---------">集合的嵌套结果映射</a></li><li><a href="#-------">集合的多结果集</a></li></ul></li></ul><!-- tocstop --><blockquote><p>该文档摘抄自<a href="https://blog.mybatis.org./">https://blog.mybatis.org。</a></p></blockquote><h1 id="关联的嵌套-Select-查询"><a href="#关联的嵌套-Select-查询" class="headerlink" title="关联的嵌套 Select 查询"></a>关联的嵌套 Select 查询</h1><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>column</td><td>数据中的列名或者是列的别名。一般情况下，这和传递给<strong>resultSet.getString(columnName)</strong> 方法的参数一样。 注意：在使用复合主键的时候，你可以使用<strong>column=”{prop1=col1,prop2=col2}”<strong>这样的语法来指定多个传递给嵌套</strong>Select</strong>查询语句的列名。这会使得<strong>prop1</strong>和<strong>prop2</strong>作为参数对象，被设置为对应嵌套 Select 语句的参数。</td></tr><tr><td>select</td><td>用于加载复杂类型属性的映射语句的 ID，它会从<strong>column</strong>属性指定的列中检索数据，作为参数传递给目标<strong>select</strong>语句。 具体请参考下面的例子。注意：在使用复合主键的时候，你可以使用<strong>column=”{prop1=col1,prop2=col2}”<strong>这样的语法来指定多个传递给嵌套</strong>Select</strong>查询语句的列名。这会使得<strong>prop1</strong>和<strong>prop2</strong>作为参数对象，被设置为对应嵌套<strong>Select</strong>语句的参数。</td></tr><tr><td>fetchType</td><td>可选的，有效值为<strong>lazy</strong>和<strong>eager</strong>.该属性设置会覆盖全局配置参数lazyLoadingEnabled</td></tr></tbody></table><h2 id="关联的嵌套使用示例"><a href="#关联的嵌套使用示例" class="headerlink" title="关联的嵌套使用示例"></a>关联的嵌套使用示例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blogResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_id&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Author&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;selectAuthor&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBlog&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;blogResult&quot;</span>&gt;</span><br>  SELECT * FROM BLOG WHERE ID = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAuthor&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Author&quot;</span>&gt;</span><br>  SELECT * FROM AUTHOR WHERE ID = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>这种方式虽然很简单，但在大型数据集或大型数据表上表现不佳。这个问题被称为“N+1 查询问题”。 </p></blockquote><p>概括地讲，N+1 查询问题是这样子的：<br>你执行了一个单独的 SQL 语句来获取结果的一个列表（就是“+1”）。<br>对列表返回的每条记录，你执行一个 select 查询语句来为每条记录加载详细信息（就是“N”）。</p><h2 id="关联的嵌套结果映射"><a href="#关联的嵌套结果映射" class="headerlink" title="关联的嵌套结果映射"></a>关联的嵌套结果映射</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>resultMap</td><td>结果映射的 ID，可以将此关联的嵌套结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的 ResultSet。这样的 ResultSet 有部分数据是重复的。 为了将结果集正确地映射到嵌套的对象树中, MyBatis 允许你“串联”结果映射，以便解决嵌套结果集的问题。</td></tr><tr><td>columnPrefix</td><td>当连接多个表时，你可能会不得不使用列别名来避免在 ResultSet 中产生重复的列名。指定 columnPrefix 列名前缀允许你将带有这些前缀的列映射到一个外部的结果映射中。 详细说明请参考后面的例子。</td></tr><tr><td>notNullColumn</td><td>默认情况下，在至少一个被映射到属性的列不为空时，子对象才会被创建。 你可以在这个属性上指定非空的列来改变默认行为，指定后，Mybatis 将只在这些列非空时才创建一个子对象。可以使用逗号分隔来指定多个列。默认值：未设置（unset）。</td></tr><tr><td>autoMapping</td><td>如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。注意，本属性对外部的结果映射无效，所以不能搭配 select 或 resultMap 元素使用。默认值：未设置（unset）。</td></tr></tbody></table><p>下面是一个简单的关联嵌套结果映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBlog&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;blogResult&quot;</span>&gt;</span><br>  select<br>    B.id            as blog_id,<br>    B.title         as blog_title,<br>    B.author_id     as blog_author_id,<br>    A.id            as author_id,<br>    A.username      as author_username,<br>    A.password      as author_password,<br>    A.email         as author_email,<br>    A.bio           as author_bio<br>  from Blog B left outer join Author A on B.author_id = A.id<br>  where B.id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blogResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;blog_id&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;blog_title&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;blog_author_id&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Author&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;authorResult&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;authorResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Author&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_id&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_username&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_password&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_email&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;bio&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_bio&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br></code></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><figcaption><span>id 元素在嵌套结果映射中扮演着非常重要的角色。你应该总是指定一个或多个可以唯一标识结果的属性。 虽然，即使不指定这个属性，MyBatis 仍然可以工作，但是会产生严重的性能问题。 只需要指定可以唯一标识结果的最少属性。显然，你可以选择主键（复合主键也可以）。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs !!!非常重要```："><br>上面的示例使用了外部的结果映射元素来映射关联。这使得 Author 的结果映射可以被重用。 然而，如果你不打算重用它，或者你更喜欢将你所有的结果映射放在一个具有描述性的结果映射元素中。 你可以直接将结果映射作为子元素嵌套在内。这里给出使用这种方式的等效例子：<br>```xml<br>&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt;<br> &lt;id property=&quot;id&quot; column=&quot;blog_id&quot; /&gt;<br> &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;<br> &lt;association property=&quot;author&quot; javaType=&quot;Author&quot;&gt;<br>   &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt;<br>   &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt;<br>   &lt;result property=&quot;password&quot; column=&quot;author_password&quot;/&gt;<br>   &lt;result property=&quot;email&quot; column=&quot;author_email&quot;/&gt;<br>   &lt;result property=&quot;bio&quot; column=&quot;author_bio&quot;/&gt;<br> &lt;/association&gt;<br>&lt;/resultMap&gt;<br></code></pre></td></tr></table></figure></blockquote><p>那如果博客（blog）有一个共同作者（co-author）该怎么办？select 语句看起来会是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBlog&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;blogResult&quot;</span>&gt;</span><br>  select<br>    B.id            as blog_id,<br>    B.title         as blog_title,<br>    A.id            as author_id,<br>    A.username      as author_username,<br>    A.password      as author_password,<br>    A.email         as author_email,<br>    A.bio           as author_bio,<br>    CA.id           as co_author_id,<br>    CA.username     as co_author_username,<br>    CA.password     as co_author_password,<br>    CA.email        as co_author_email,<br>    CA.bio          as co_author_bio<br>  from Blog B<br>  left outer join Author A on B.author_id = A.id<br>  left outer join Author CA on B.co_author_id = CA.id<br>  where B.id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;authorResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Author&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_id&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_username&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_password&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_email&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;bio&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_bio&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blogResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;blog_id&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;blog_title&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;authorResult&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;coAuthor&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;authorResult&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">columnPrefix</span>=<span class="hljs-string">&quot;co_&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="关联的多结果集（ResultSet）"><a href="#关联的多结果集（ResultSet）" class="headerlink" title="关联的多结果集（ResultSet）"></a>关联的多结果集（ResultSet）</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>column</td><td>当使用多个结果集时，该属性指定结果集中用于与 foreignColumn 匹配的列（多个列名以逗号隔开），以识别关系中的父类型与子类型。</td></tr><tr><td>foreignColumn</td><td>指定外键对应的列名，指定的列将与父类型中 column 的给出的列进行匹配。</td></tr><tr><td>resultSet</td><td>指定用于加载复杂类型的结果集名字。</td></tr></tbody></table><blockquote><p>解决 N+1 查询问题的方法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER $$<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> getBlogsAndAuthors(<span class="hljs-keyword">IN</span> blog_id <span class="hljs-type">INT</span>, <span class="hljs-keyword">IN</span> author_id <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> BLOG <span class="hljs-keyword">WHERE</span> ID <span class="hljs-operator">=</span> blog_id;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> AUTHOR <span class="hljs-keyword">WHERE</span> ID <span class="hljs-operator">=</span> author_id;<br><span class="hljs-keyword">END</span> $$<br></code></pre></td></tr></table></figure><p>在映射语句中，必须通过<strong>resultSets</strong>属性为每个结果集指定一个名字，多个名字使用逗号隔开。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBlog&quot;</span> <span class="hljs-attr">resultSets</span>=<span class="hljs-string">&quot;blogs,authors&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;blogResult&quot;</span> <span class="hljs-attr">statementType</span>=<span class="hljs-string">&quot;CALLABLE&quot;</span>&gt;</span><br>  &#123;call getBlogsAndAuthors(#&#123;id,jdbcType=INTEGER,mode=IN&#125;)&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在我们可以指定使用 “authors” 结果集的数据来填充 “author” 关联：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blogResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;title&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Author&quot;</span> <span class="hljs-attr">resultSet</span>=<span class="hljs-string">&quot;authors&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_id&quot;</span> <span class="hljs-attr">foreignColumn</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;bio&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;bio&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="集合的嵌套-Select-查询"><a href="#集合的嵌套-Select-查询" class="headerlink" title="集合的嵌套 Select 查询"></a>集合的嵌套 Select 查询</h2><p>如何使用嵌套 Select 查询来为博客加载文章</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blogResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;posts&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Post&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;selectPostsForBlog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBlog&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;blogResult&quot;</span>&gt;</span><br>  SELECT * FROM BLOG WHERE ID = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPostsForBlog&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Post&quot;</span>&gt;</span><br>  SELECT * FROM POST WHERE BLOG_ID = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="集合的嵌套结果映射"><a href="#集合的嵌套结果映射" class="headerlink" title="集合的嵌套结果映射"></a>集合的嵌套结果映射</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBlog&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;blogResult&quot;</span>&gt;</span><br>  select<br>  B.id as blog_id,<br>  B.title as blog_title,<br>  B.author_id as blog_author_id,<br>  P.id as post_id,<br>  P.subject as post_subject,<br>  P.body as post_body,<br>  from Blog B<br>  left outer join Post P on B.id = P.blog_id<br>  where B.id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blogResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;blog_id&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;blog_title&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;posts&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;post_id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;subject&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;post_subject&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;body&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;post_body&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blogResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;blog_id&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;blog_title&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;posts&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Post&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;blogPostResult&quot;</span> <span class="hljs-attr">columnPrefix</span>=<span class="hljs-string">&quot;post_&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blogPostResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Post&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;subject&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;subject&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;body&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;body&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="集合的多结果集"><a href="#集合的多结果集" class="headerlink" title="集合的多结果集"></a>集合的多结果集</h2><p>集合的多结果集的映射类似关联的多结果集映射，都是采用存储过程来实现。</p>]]></content>
    
    
    <summary type="html">关联/集合嵌套结果映射和关联/集合嵌套查询</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="mybatis" scheme="https://mirsery.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis xml映射器(三)</title>
    <link href="https://mirsery.github.io/2021/08/24/java/2021/Mybatis-xml%E6%98%A0%E5%B0%84%E5%99%A8-%E4%B8%89/"/>
    <id>https://mirsery.github.io/2021/08/24/java/2021/Mybatis-xml%E6%98%A0%E5%B0%84%E5%99%A8-%E4%B8%89/</id>
    <published>2021-08-24T07:35:59.000Z</published>
    <updated>2021-08-24T07:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#mybatis-----">Mybatis 参数映射</a><ul><li><a href="#-----">字符串替换</a></li></ul></li><li><a href="#--sql">动态sql</a><ul><li><a href="#if">if</a></li><li><a href="#choose-when-otherwise">choose、when、otherwise</a></li><li><a href="#trim-where-set">trim、where、set</a></li><li><a href="#foreach">foreach</a></li></ul></li><li><a href="#script">script</a></li></ul><!-- tocstop --><blockquote><p>该文档摘抄自<a href="https://blog.mybatis.org./">https://blog.mybatis.org。</a></p></blockquote><h1 id="Mybatis-参数映射"><a href="#Mybatis-参数映射" class="headerlink" title="Mybatis 参数映射"></a>Mybatis 参数映射</h1><h2 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h2><p>默认情况下，使用 <strong>#{}</strong> 参数语法时，MyBatis 会创建 <strong>PreparedStatement</strong> 参数占位符，并通过占位符安全地设置参数（就像使用 ? 一样）。 这样做更安全，更迅速，通常也是首选做法，不过有时你就是想直接在 SQL 语句中直接插入一个<strong>不转义的字符串</strong>。 比如 ORDER BY 子句，这时候你可以：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">ORDER BY $&#123;columnName&#125;<br></code></pre></td></tr></table></figure><p>如果你想<strong>select</strong>一个表，任意一个列数据时，可以写成如下方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from user where $&#123;column&#125; = #&#123;value&#125;&quot;)</span><br><span class="hljs-function">User <span class="hljs-title">findByColumn</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;column&quot;)</span> String column, <span class="hljs-meta">@Param(&quot;value&quot;)</span> String value)</span></span>;<br></code></pre></td></tr></table></figure><blockquote><p> 用这种方式接受用户的输入，并用作语句参数是不安全的，会导致潜在的 SQL 注入攻击。因此，要么不允许用户输入这些字段，要么自行转义并检验这些参数。</p></blockquote><h1 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h1><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>example:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findActiveBlogLike&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  SELECT * FROM BLOG WHERE state = ‘ACTIVE’<br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>    AND title like #&#123;title&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>    AND author_name like #&#123;author.name&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><p>choose 元素有点类似Java中的switch语句，多个条件中选择一个使用.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findActiveBlogLike&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  SELECT * FROM BLOG WHERE state = &#x27;ACTIVE&#x27;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>      AND title like #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>      AND author_name like #&#123;author.name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>      AND featured = 1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a>trim、where、set</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findActiveBlogLike&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  SELECT * FROM BLOG<br>  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;state != null&quot;</span>&gt;</span><br>         state = #&#123;state&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        AND title like #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>        AND author_name like #&#123;author.name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除。<br>如果 where 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 where 元素的功能。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;WHERE&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;AND |OR &quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;state != null&quot;</span>&gt;</span><br>         state = #&#123;state&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        AND title like #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>        AND author_name like #&#123;author.name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>prefixOverrides</strong> 属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。上述例子会移除所有 prefixOverrides 属性中指定的内容，并且插入 prefix 属性中指定的内容。用于动态更新语句的类似解决方案叫做 set。set 元素可以用于动态包含需要更新的列，忽略其它不更新的列。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span><br>  update Author<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;bio != null&quot;</span>&gt;</span>bio=#&#123;bio&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>  where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个例子中，set 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。下面是和set等价的trim写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;SET&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;bio != null&quot;</span>&gt;</span>bio=#&#123;bio&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>foreach 常见使用场景一般是批量插入和对集合进行遍历（构造IN条件语句时).</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPostIn&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;domain.blog.Post&quot;</span>&gt;</span><br>  SELECT *<br>  FROM POST P<br>  WHERE ID in<br>  <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;item&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>foreach 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符。</p><blockquote><p>你可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象作为集合参数传递给 foreach。当使用可迭代对象或者数组时，index 是当前迭代的序号，item 的值是本次迭代获取到的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。</p></blockquote><h1 id="script"><a href="#script" class="headerlink" title="script"></a>script</h1><p>要在带注解的映射器接口类中使用动态 SQL，可以使用 script 元素,比如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Update(&#123;&quot;&lt;script&gt;&quot;,</span><br><span class="hljs-meta">     &quot;update Author&quot;,</span><br><span class="hljs-meta">     &quot;  &lt;set&gt;&quot;,</span><br><span class="hljs-meta">     &quot;    &lt;if test=&#x27;username != null&#x27;&gt;username=#&#123;username&#125;,&lt;/if&gt;&quot;,</span><br><span class="hljs-meta">     &quot;    &lt;if test=&#x27;password != null&#x27;&gt;password=#&#123;password&#125;,&lt;/if&gt;&quot;,</span><br><span class="hljs-meta">     &quot;    &lt;if test=&#x27;email != null&#x27;&gt;email=#&#123;email&#125;,&lt;/if&gt;&quot;,</span><br><span class="hljs-meta">     &quot;    &lt;if test=&#x27;bio != null&#x27;&gt;bio=#&#123;bio&#125;&lt;/if&gt;&quot;,</span><br><span class="hljs-meta">     &quot;  &lt;/set&gt;&quot;,</span><br><span class="hljs-meta">     &quot;where id=#&#123;id&#125;&quot;,</span><br><span class="hljs-meta">     &quot;&lt;/script&gt;&quot;&#125;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateAuthorValues</span><span class="hljs-params">(Author author)</span></span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Mybatis的参数映射、字符串替换、动态sql、if、choose 等...</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="mybatis" scheme="https://mirsery.github.io/tags/mybatis/"/>
    
    <category term="动态sql" scheme="https://mirsery.github.io/tags/%E5%8A%A8%E6%80%81sql/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis xml映射器(二)</title>
    <link href="https://mirsery.github.io/2021/08/24/java/2021/Mybatis-xml%E6%98%A0%E5%B0%84%E5%99%A8-%E4%BA%8C/"/>
    <id>https://mirsery.github.io/2021/08/24/java/2021/Mybatis-xml%E6%98%A0%E5%B0%84%E5%99%A8-%E4%BA%8C/</id>
    <published>2021-08-24T07:09:18.000Z</published>
    <updated>2021-08-24T07:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><!-- tocstop --><blockquote><p>该文档摘抄自<a href="https://blog.mybatis.org./">https://blog.mybatis.org。</a><br>Mybatis xml映射器insert、update 和 delete 标签</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span></span><br><span class="hljs-tag">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertAuthor&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;domain.blog.Author&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">flushCache</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">statementType</span>=<span class="hljs-string">&quot;PREPARED&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">keyColumn</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span></span><br><span class="hljs-tag">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateAuthor&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;domain.blog.Author&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">flushCache</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">statementType</span>=<span class="hljs-string">&quot;PREPARED&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span></span><br><span class="hljs-tag">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteAuthor&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;domain.blog.Author&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">flushCache</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">statementType</span>=<span class="hljs-string">&quot;PREPARED&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>example:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertAuthor&quot;</span>&gt;</span><br>  insert into Author (id,username,password,email,bio)<br>  values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 返回生成的主键id的值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertAuthor&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>  insert into Author (username,password,email,bio)<br>  values (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 批量插入示例 !--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertAuthor&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>  insert into Author (username, password, email, bio) values<br>  <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>    (#&#123;item.username&#125;, #&#123;item.password&#125;, #&#123;item.email&#125;, #&#123;item.bio&#125;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateAuthor&quot;</span>&gt;</span><br>  update Author set<br>    username = #&#123;username&#125;,<br>    password = #&#123;password&#125;,<br>    email = #&#123;email&#125;,<br>    bio = #&#123;bio&#125;<br>  where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteAuthor&quot;</span>&gt;</span><br>  delete from Author where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Insert, Update, Delete 元素的属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>–</td></tr><tr><td>parameterType</td><td>将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td>flushCache</td><td>将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td></tr><tr><td>timeout</td><td>这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td>statementType</td><td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td>useGeneratedKeys</td><td>（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td></tr><tr><td>keyProperty</td><td>（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（unset）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td>keyColumn</td><td>（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td>databaseId</td><td>如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Mybatis xml映射器insert、update 和 delete 标签...</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="mybatis" scheme="https://mirsery.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis xml映射器（一)</title>
    <link href="https://mirsery.github.io/2021/08/24/java/2021/Mybatis%20xml%E6%98%A0%E5%B0%84%E5%99%A8-%E4%B8%80/"/>
    <id>https://mirsery.github.io/2021/08/24/java/2021/Mybatis%20xml%E6%98%A0%E5%B0%84%E5%99%A8-%E4%B8%80/</id>
    <published>2021-08-24T01:28:54.000Z</published>
    <updated>2021-08-24T01:28:54.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#select------">select 元素的属性</a><ul><li><a href="#select-----">select 用法示例</a></li><li><a href="#select-----">select 元素属性</a></li></ul></li><li><a href="#resultset-----">ResultSet 结果映射</a><ul><li><a href="#resultset-------">ResultSet 简易用法示例</a></li><li><a href="#resultmap-------">ResultMap 简易用法示例</a></li><li><a href="#resultmap---">ResultMap 属性</a></li><li><a href="#------">高级结果映射</a></li></ul></li></ul><!-- tocstop --><blockquote><p>该文档摘抄自<a href="https://blog.mybatis.org.mybatis/">https://blog.mybatis.org。MyBatis</a> 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p></blockquote><h1 id="select-元素的属性"><a href="#select-元素的属性" class="headerlink" title="select 元素的属性"></a>select 元素的属性</h1><h2 id="select-用法示例"><a href="#select-用法示例" class="headerlink" title="select 用法示例"></a>select 用法示例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPerson&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;hashmap&quot;</span>&gt;</span><br>  SELECT * FROM PERSON WHERE ID = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个语句名为 selectPerson，接受一个 int（或 Integer）类型的参数，并返回一个 HashMap 类型的对象，其中的键是列名，值便是结果行中的对应值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span></span><br><span class="hljs-tag">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPerson&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">parameterMap</span>=<span class="hljs-string">&quot;deprecated&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;hashmap&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;personResultMap&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">flushCache</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">useCache</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;10&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">fetchSize</span>=<span class="hljs-string">&quot;256&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">statementType</span>=<span class="hljs-string">&quot;PREPARED&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">resultSetType</span>=<span class="hljs-string">&quot;FORWARD_ONLY&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="select-元素属性"><a href="#select-元素属性" class="headerlink" title="select 元素属性"></a>select 元素属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>在命名空间中唯一的标识符可以用来引用这条语句</td></tr><tr><td>parameterType</td><td>将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset)</td></tr><tr><td>resultType</td><td>期望从这条语句中返回结果的类全限定名或别名,resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td>resultMap</td><td>对外部 resultMap 的命名引用,resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td>flushCache</td><td>将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。</td></tr><tr><td>useCache</td><td>将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true</td></tr><tr><td>timeout</td><td>这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）</td></tr><tr><td>fetchSize</td><td>这是一个给驱动的建议值，尝试让驱动程序每次批量返回的结果行数等于这个设置值。 默认值为未设置（unset）（依赖驱动）。</td></tr><tr><td>statementType</td><td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td>resultSetType</td><td>FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖数据库驱动）。</td></tr><tr><td>databaseId</td><td>如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td></tr><tr><td>resultOrdered</td><td>这个设置仅针对嵌套结果 select 语句：如果为 true，将会假设包含了嵌套结果集或是分组，当返回一个主结果行时，就不会产生对前面结果集的引用。 这就使得在获取嵌套结果集的时候不至于内存不够用。默认值：false。</td></tr><tr><td>resultSets</td><td>这个设置仅适用于多结果集的情况。它将列出语句执行后返回的结果集并赋予每个结果集一个名称，多个名称之间以逗号分隔。</td></tr></tbody></table><h1 id="ResultSet-结果映射"><a href="#ResultSet-结果映射" class="headerlink" title="ResultSet 结果映射"></a>ResultSet 结果映射</h1><blockquote><p>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系</p></blockquote><h2 id="ResultSet-简易用法示例"><a href="#ResultSet-简易用法示例" class="headerlink" title="ResultSet 简易用法示例"></a>ResultSet 简易用法示例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>  select id, username, hashedPassword<br>  from some_table<br>  where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述代码片段，将数据库结果查询的列映射到<strong>HashMap</strong>上，使用<strong>resultType</strong>指定。在大部分情况下<strong>HashMap</strong>并不是一个很好的领域模型，一般业务中会采用<strong>JavaBean</strong>或<strong>POJO</strong>作为领域模型。以下是一个简易的JavaBean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.someapp.model;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>  <span class="hljs-keyword">private</span> String username;<br>  <span class="hljs-keyword">private</span> String hashedPassword;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> id;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.id = id;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> username;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.username = username;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getHashedPassword</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> hashedPassword;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHashedPassword</span><span class="hljs-params">(String hashedPassword)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.hashedPassword = hashedPassword;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基于以上JavaBean规范，上面的类有3个属性:id,username,hashedPassword,这些属性会对应到select语句中的列名。这样的一个 JavaBean 可以被映射到 ResultSet，就像映射到 HashMap 一样简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;selectUsers&quot;</span> resultType=<span class="hljs-string">&quot;com.someapp.model.User&quot;</span>&gt;<br>  select id, username, hashedPassword<br>  from some_table<br>  where id = #&#123;id&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>可以采用类型别名，避免输入类的全限定名,例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mybatis-config.xml 中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.someapp.model.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- SQL 映射 XML 中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>  select id, username, hashedPassword<br>  from some_table<br>  where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在某些情况下，Mybatis会自动创建一个ResultMap，再根据结果的列名来映射JavaBean的属性上，如果列名和属性名不能匹配上，可以在select查询语句的时候设置列别名来完成匹配工作。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>  select<br>    user_id             as &quot;id&quot;,<br>    user_name           as &quot;userName&quot;,<br>    hashed_password     as &quot;hashedPassword&quot;<br>  from some_table<br>  where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="ResultMap-简易用法示例"><a href="#ResultMap-简易用法示例" class="headerlink" title="ResultMap 简易用法示例"></a>ResultMap 简易用法示例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_name&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;hashed_password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userResultMap&quot;</span>&gt;</span><br>  select user_id, user_name, hashed_password<br>  from some_table<br>  where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="ResultMap-属性"><a href="#ResultMap-属性" class="headerlink" title="ResultMap 属性"></a>ResultMap 属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>column</td><td>当使用多个结果集时，该属性指定结果集中用于与<strong>foreignColumn</strong>匹配的列（多个列名以逗号隔开),以识别关系中的父类型与子类型。</td></tr><tr><td>foreignColumn</td><td>指定外键对应的列名,指定的列将与父类型中<strong>column</strong>的给出的列匹配.</td></tr><tr><td>resultSet</td><td>指定用于加载复杂类型的结果集名字。</td></tr></tbody></table><ul><li>constructor - 用于在实例化类时，注入结果到构造方法中<ul><li>idArg - ID 参数；标记出作为 ID 的结果可以帮助提高整体性能</li><li>arg - 将被注入到构造方法的一个普通结果</li></ul></li><li>id – 一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能</li><li>result – 注入到字段或 JavaBean 属性的普通结果</li><li>association – 一个复杂类型的关联；许多结果将包装成这种类型<ul><li>嵌套结果映射 – 关联可以是 resultMap 元素，或是对其它结果映射的引用</li></ul></li><li>collection – 一个复杂类型的集合<ul><li>嵌套结果映射 – 集合可以是 resultMap 元素，或是对其它结果映射的引用</li></ul></li><li>discriminator – 使用结果值来决定使用哪个 resultMap<ul><li>case – 基于某些值的结果映射<ul><li>嵌套结果映射 – case 也是一个结果映射，因此具有相同的结构和元素；或者引用其它的结果映射</li></ul></li></ul></li></ul><h2 id="高级结果映射"><a href="#高级结果映射" class="headerlink" title="高级结果映射"></a>高级结果映射</h2><blockquote><p>实际使用过程中，数据库并不一定具备良好的第三范式和BCNF范式。<br>下面是比较复杂的查询语句的映射示例</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBlogDetails&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;detailedBlogResultMap&quot;</span>&gt;</span><br>  select<br>       B.id as blog_id,<br>       B.title as blog_title,<br>       B.author_id as blog_author_id,<br>       A.id as author_id,<br>       A.username as author_username,<br>       A.password as author_password,<br>       A.email as author_email,<br>       A.bio as author_bio,<br>       A.favourite_section as author_favourite_section,<br>       P.id as post_id,<br>       P.blog_id as post_blog_id,<br>       P.author_id as post_author_id,<br>       P.created_on as post_created_on,<br>       P.section as post_section,<br>       P.subject as post_subject,<br>       P.draft as draft,<br>       P.body as post_body,<br>       C.id as comment_id,<br>       C.post_id as comment_post_id,<br>       C.name as comment_name,<br>       C.comment as comment_text,<br>       T.id as tag_id,<br>       T.name as tag_name<br>  from Blog B<br>       left outer join Author A on B.author_id = A.id<br>       left outer join Post P on B.id = P.blog_id<br>       left outer join Comment C on P.id = C.post_id<br>       left outer join Post_Tag PT on PT.post_id = P.id<br>       left outer join Tag T on PT.tag_id = T.id<br>  where B.id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 非常复杂的结果映射 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;detailedBlogResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">idArg</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;blog_id&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;int&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">constructor</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;blog_title&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Author&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_username&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_password&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_email&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;bio&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_bio&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;favouriteSection&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_favourite_section&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;posts&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;post_id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;subject&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;post_subject&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Author&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;comments&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Comment&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;comment_id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tags&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Tag&quot;</span> &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tag_id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">discriminator</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;draft&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;DraftPost&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">discriminator</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">MyBatis select元素的使用以及结果映射...</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="mybatis" scheme="https://mirsery.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>读写锁</title>
    <link href="https://mirsery.github.io/2021/07/27/java/2021/%E8%AF%BB%E5%86%99%E9%94%81/"/>
    <id>https://mirsery.github.io/2021/07/27/java/2021/%E8%AF%BB%E5%86%99%E9%94%81/</id>
    <published>2021-07-27T12:22:10.000Z</published>
    <updated>2021-07-27T12:22:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ReadWriteLock是JDK5中提供的读写分离锁.读写锁可以有效的减少锁竞争，提升系统的吞吐量。</p></blockquote><!-- toc --><ul><li><a href="#----------">读写锁的访问约束情况</a></li><li><a href="#----------------">样例比较读写锁和重入锁的性能差距</a></li><li><a href="#---">输出值</a></li><li><a href="#--">总结</a></li></ul><!-- tocstop --><h2 id="读写锁的访问约束情况"><a href="#读写锁的访问约束情况" class="headerlink" title="读写锁的访问约束情况"></a>读写锁的访问约束情况</h2><table><thead><tr><th></th><th>读</th><th>写</th></tr></thead><tbody><tr><td>读</td><td>非阻塞</td><td>阻塞</td></tr><tr><td>写</td><td>阻塞</td><td>阻塞</td></tr></tbody></table><p>读读之间不阻塞，读和写之间相互阻塞，写和写之间阻塞。系统中如果读操作比写操作多，则可以考虑使用读写锁增加系统的吞吐量，提高系统的性能。<br>读写锁允许多个读线程同时读，使得多个读线程真正并行。但是由于数据的完整性，所以读和写之间，写和写之间需要相互等待和持有锁。读操作占用的时间越长，则使用读写锁的优势越明显。</p><h2 id="样例比较读写锁和重入锁的性能差距"><a href="#样例比较读写锁和重入锁的性能差距" class="headerlink" title="样例比较读写锁和重入锁的性能差距"></a>样例比较读写锁和重入锁的性能差距</h2><blockquote><p>测试电脑 配置<br>2.7 GHz 双核Intel Core i5, RAM 8 GB 1867 MHz DDR3<br>openjdk 16.0.1 OpenJDK 64-Bit Server VM Homebrew (build 16.0.1+0, mixed mode, sharing)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadWriteLockDemo</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ReentrantReadWriteLock reentrantReadWriteLock = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Lock readLock = reentrantReadWriteLock.readLock();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Lock writeLock = reentrantReadWriteLock.writeLock();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ReentrantLock reentrantLock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> CountDownLatch countDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">20</span>);  <span class="hljs-comment">//多线程控制</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> readThreadNum = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> writeThreadNum = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> CountDownLatch reentrantDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">20</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> value;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">readSomething</span><span class="hljs-params">(Lock lock)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<br>            Thread.sleep(<span class="hljs-number">1000</span>); <span class="hljs-comment">//模拟耗时操作</span><br>            <span class="hljs-keyword">return</span> value;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">writeSomething</span><span class="hljs-params">(Lock lock, <span class="hljs-keyword">int</span> newValue)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<br>            Thread.sleep(<span class="hljs-number">1000</span>); <span class="hljs-comment">//模拟耗时操作</span><br>            <span class="hljs-keyword">this</span>.value = newValue;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        ReadWriteLockDemo demo = <span class="hljs-keyword">new</span> ReadWriteLockDemo();<br><br>        Runnable readTask = () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                demo.readSomething(readLock);<br>                countDownLatch.countDown();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;;<br><br>        Runnable writeTask = () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                demo.writeSomething(writeLock, <span class="hljs-keyword">new</span> Random().nextInt());<br>                countDownLatch.countDown();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;;<br><br>        Runnable readTask2 = () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                demo.readSomething(reentrantLock);<br>                reentrantDownLatch.countDown();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;;<br><br>        Runnable writeTask2 = () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                demo.writeSomething(reentrantLock, <span class="hljs-keyword">new</span> Random().nextInt());<br>                reentrantDownLatch.countDown();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;;<br><br><br><br>        <span class="hljs-keyword">long</span> begin = System.currentTimeMillis();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; readThreadNum; i++) <span class="hljs-keyword">new</span> Thread(readTask).start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; writeThreadNum; i++) <span class="hljs-keyword">new</span> Thread(writeTask).start();<br><br>        countDownLatch.await(); <span class="hljs-comment">//等待子线程全部完成工作</span><br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br><br>        System.out.println(<span class="hljs-string">&quot;[readWriteLock cost] &quot;</span> + (end - begin) + <span class="hljs-string">&quot;ms&quot;</span>);<br><br><br><br>        <span class="hljs-keyword">long</span> begin2 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; readThreadNum; i++) <span class="hljs-keyword">new</span> Thread(readTask2).start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; writeThreadNum; i++) <span class="hljs-keyword">new</span> Thread(writeTask2).start();<br><br>        reentrantDownLatch.await(); <span class="hljs-comment">//等待子线程全部完成工作</span><br><br>        <span class="hljs-keyword">long</span> end2 = System.currentTimeMillis();<br><br>        System.out.println(<span class="hljs-string">&quot;[reentrantLock cost] &quot;</span> + (end2 - begin2) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="输出值"><a href="#输出值" class="headerlink" title="输出值"></a>输出值</h2><p>两者的输出值，在笔者电脑上为如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[readWriteLock cost] 1011ms<br>[reentrantLock cost] 20069ms<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>性能相差20倍多，不同的电脑和jdk版本表现有所不同。如果将读线程的数量或者耗时增加，则读写锁的性能优势会更加明显。在读多的场景下可以采用读写锁提升性能。</p>]]></content>
    
    
    <summary type="html">ReadWriteLock是JDK5中提供的读写分离锁.读写锁可以有效的减少锁竞争...</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="锁" scheme="https://mirsery.github.io/tags/%E9%94%81/"/>
    
    <category term="多线程" scheme="https://mirsery.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu内核升级降级和切换</title>
    <link href="https://mirsery.github.io/2021/07/27/linux/ubuntu%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7%E9%99%8D%E7%BA%A7%E5%92%8C%E5%88%87%E6%8D%A2/"/>
    <id>https://mirsery.github.io/2021/07/27/linux/ubuntu%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7%E9%99%8D%E7%BA%A7%E5%92%8C%E5%88%87%E6%8D%A2/</id>
    <published>2021-07-27T06:52:03.000Z</published>
    <updated>2021-07-27T06:52:03.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#------">内核下载地址</a></li><li><a href="#------">手动升级内核</a></li><li><a href="#------">切换内核版本</a></li></ul><!-- tocstop --><blockquote><p>背景 笔者目前运行的系统是Ubuntu 20.04.2 LTS</p></blockquote><h2 id="内核下载地址"><a href="#内核下载地址" class="headerlink" title="内核下载地址"></a>内核下载地址</h2><p>下面是内核下载地址 <a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/">https://kernel.ubuntu.com/~kernel-ppa/mainline/</a></p><p><img src="/2021/07/27/linux/ubuntu%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7%E9%99%8D%E7%BA%A7%E5%92%8C%E5%88%87%E6%8D%A2/BC9FEFBF-AE3C-4C86-95DB-36A36D1824F1.png"></p><h2 id="手动升级内核"><a href="#手动升级内核" class="headerlink" title="手动升级内核"></a>手动升级内核</h2><p>选择对应的内核版本点进去，根据系统硬件的架构选择相应的目录。</p><p><img src="/2021/07/27/linux/ubuntu%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7%E9%99%8D%E7%BA%A7%E5%92%8C%E5%88%87%E6%8D%A2/4145D291-1B70-4C41-99B8-5C2E15B2CE25.png"></p><blockquote><p>一般情况下pc都是选择amd64，arm板选择arm版本。</p></blockquote><p>下载对应的deb文件（headers、image、modules）即可。</p><p>下载完成后，进入到下载目录，执行以下 命令安装内核文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dpkg -i *.deb<br></code></pre></td></tr></table></figure><p>留意安装过程中是否会有报错信息，安装完成后重启计算机，运行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前计算机运行的内核版本号是否为你刚刚下载的版本号</span><br>uanme -a <br></code></pre></td></tr></table></figure><h2 id="切换内核版本"><a href="#切换内核版本" class="headerlink" title="切换内核版本"></a>切换内核版本</h2><blockquote><p>首先需要下载和安装你想要切换的内核版本，操作方法和上述步骤一致。</p></blockquote><p>下载并安装对应的内核文件之后，你可以运行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep menuentry /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><p>查看对应的系统中安装的内核版本的列表是否存在你刚刚安装的内核版本，如果没有则返回上一步核对安装过程中是否有纰漏。如果没有问题则复制你想要运行的内核版本的名称的全称。<br>修改<code>/etc/default/grub</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GRUB_DEFALT=<span class="hljs-string">&quot;你刚刚复制的内核版本全名称&quot;</span><br></code></pre></td></tr></table></figure><p>执行更新命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update grub<br></code></pre></td></tr></table></figure><p>看是否有报错信息，如果有保存信息，根据报错信息的提示进行修改。修改完成之后重复上一步的更新操作直至成功为止。然后重启电脑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo reboot<br></code></pre></td></tr></table></figure><p>重启电脑之后查看内核版本是否更换为对应的你所切换的版本，然后再次打开<code>/etc/default/grub</code>文件，将 GRUB_DEFALT值修改为原先的0.</p>]]></content>
    
    
    <summary type="html">ubuntu 内核版本切换、升级...</summary>
    
    
    
    <category term="linux" scheme="https://mirsery.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://mirsery.github.io/tags/linux/"/>
    
    <category term="ubuntu" scheme="https://mirsery.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>mac使用技巧</title>
    <link href="https://mirsery.github.io/2021/07/27/mac/2021/mac%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://mirsery.github.io/2021/07/27/mac/2021/mac%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2021-07-27T04:36:53.000Z</published>
    <updated>2021-07-27T04:36:53.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#icloud-drive-----ignore--">iCloud Drive同步中实现ignore功能</a></li></ul><!-- tocstop --><h2 id="iCloud-Drive同步中实现ignore功能"><a href="#iCloud-Drive同步中实现ignore功能" class="headerlink" title="iCloud Drive同步中实现ignore功能"></a>iCloud Drive同步中实现ignore功能</h2><blockquote><p>该方法来自于苹果帮助社区<a href="https://discussions.apple.com/thread/8137146">Sal the newyorker</a></p></blockquote><p>apple iCloud Drive中如果有不想同步的文件夹，则可修改该文件夹的名称。只需要在该文件夹（不需要同步）的名字后面新增**.nosync**后缀。如果希望apple iCloudDrive同步这个文件则可以去除该后缀。</p>]]></content>
    
    
    <summary type="html">iCloud Drive同步中实现ignore功能</summary>
    
    
    
    <category term="mac" scheme="https://mirsery.github.io/categories/mac/"/>
    
    
    <category term="mac" scheme="https://mirsery.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Future模式</title>
    <link href="https://mirsery.github.io/2021/07/24/java/2021/Future%E6%A8%A1%E5%BC%8F/"/>
    <id>https://mirsery.github.io/2021/07/24/java/2021/Future%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-07-24T13:48:07.000Z</published>
    <updated>2021-08-24T15:38:14.713Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#future------">future 模式的概述</a></li><li><a href="#future--------">future 模式的简单实现</a></li><li><a href="#jdk--future--">JDK中的Future模式</a></li></ul><!-- tocstop --><blockquote><p>future 模式是多线程开发中比较常见的一种模式，他的核心思想是利用多线程来实现耗时操作的异步调用。主要利用多线程去处理耗时的任务，并支持异步回调处理相关的信息。</p></blockquote><h2 id="future-模式的概述"><a href="#future-模式的概述" class="headerlink" title="future 模式的概述"></a>future 模式的概述</h2><p>future模式优点类似快递订餐，比如我们利用xx软件进行外卖下单。下完单之后我们可以继续我们上班的摸鱼动作，等待骑手的电话。其中下完单之后会立刻返回一个订单号，我们可以根据这个订单号去获取相应的订单信息。对于future模式来说，虽然他并不能立刻给予我们所需要的数据（外卖），但是他会返回订单给到我们，我们可以借由订单去获取相应的骑手以及派送状态信息。可以充分的节约我们的摸鱼时间。</p><h2 id="future-模式的简单实现"><a href="#future-模式的简单实现" class="headerlink" title="future 模式的简单实现"></a>future 模式的简单实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Data</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getFood</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//取餐</span><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> record <span class="hljs-title">RealData</span><span class="hljs-params">(String result)</span> implements Data </span>&#123;<span class="hljs-comment">//since @jdk14</span><br><br>    <span class="hljs-keyword">public</span> RealData &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">5</span> * <span class="hljs-number">1000</span>);<span class="hljs-comment">// 午餐制作</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getFood</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FutureData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Data</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> RealData realData = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> isReady = <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRealData</span><span class="hljs-params">(RealData realData)</span> </span>&#123; <span class="hljs-comment">// 骑手取餐</span><br>        <span class="hljs-keyword">if</span> (isReady)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">this</span>.realData = realData;<br>        isReady = <span class="hljs-keyword">true</span>;<br>        notifyAll();<span class="hljs-comment">//唤醒当前对象上的等待线程</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> String <span class="hljs-title">getFood</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//用户取餐</span><br>        <span class="hljs-keyword">while</span> (!isReady) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<span class="hljs-comment">//当前线程进入等待并释放锁</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> realData.getFood();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Data <span class="hljs-title">request</span><span class="hljs-params">(String order)</span> </span>&#123;<br>            FutureData futureData = <span class="hljs-keyword">new</span> FutureData();<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>                RealData realData = <span class="hljs-keyword">new</span> RealData(order);<br>                futureData.setRealData(realData);<br>            &#125;).start();<br>            <span class="hljs-keyword">return</span> futureData;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Client client = <span class="hljs-keyword">new</span> Client();<br>        Data data = client.request(<span class="hljs-string">&quot;鱼香肉丝&quot;</span>); <span class="hljs-comment">//开始订餐</span><br>        System.out.println(<span class="hljs-string">&quot;订单已经提交，骑手赶往店铺&quot;</span>);<span class="hljs-comment">//订餐完成</span><br><br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// do something 摸鱼时间</span><br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;food is: &quot;</span> + data.getFood()); <span class="hljs-comment">//拿到外卖</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="JDK中的Future模式"><a href="#JDK中的Future模式" class="headerlink" title="JDK中的Future模式"></a>JDK中的Future模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Food</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> String food;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Food</span><span class="hljs-params">(String food)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.food = food;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        Thread.sleep(<span class="hljs-number">5</span> * <span class="hljs-number">1000</span>);<span class="hljs-comment">//配送</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.food;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    FutureTask&lt;String&gt; futureTask = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(<span class="hljs-keyword">new</span> Food(<span class="hljs-string">&quot;鱼香肉丝&quot;</span>));<br>    ExecutorService service = Executors.newSingleThreadExecutor();<br>    service.execute(futureTask);<br><br>    System.out.println(<span class="hljs-string">&quot;下单完成&quot;</span>);<br>    <br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">6</span> * <span class="hljs-number">1000</span>);<span class="hljs-comment">//摸鱼</span><br>        System.out.println(<span class="hljs-string">&quot;lunch is : &quot;</span> + futureTask.get());<br>        service.shutdown();<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException | ExecutionException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">future 模式是多线程开发中比较常见的一种模式，他的核心思想是利用多线程来实现耗时操作的异步调用。主要利用多线程去处理耗时的任务，并支持异步回调...</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://mirsery.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>线程阻塞工具 Locksupport</title>
    <link href="https://mirsery.github.io/2021/07/22/java/2021/Locksupport%E7%BA%BF%E7%A8%8B%E9%98%BB%E5%A1%9E%E5%B7%A5%E5%85%B7/"/>
    <id>https://mirsery.github.io/2021/07/22/java/2021/Locksupport%E7%BA%BF%E7%A8%8B%E9%98%BB%E5%A1%9E%E5%B7%A5%E5%85%B7/</id>
    <published>2021-07-22T12:31:30.000Z</published>
    <updated>2021-08-24T15:38:14.713Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Lock Support 是一个非常方便的线程阻塞工具，他可以在线程内任意位置让线程阻塞。与 <strong>Thread.suspend()</strong> 方法相比，他补充了由于 <strong>resume( )</strong> 方法发生导致线程无法继续执行的情况。和<strong>Object.wait( )<strong>相比，他不需要先获得对象的锁，也不会抛出</strong>InterruptedException</strong>异常。</p></blockquote><!-- toc --><ul><li><a href="#locksupport-----">LockSupport 静态方法</a></li><li><a href="#locksupport------">LockSupport 的简易用法</a></li></ul><!-- tocstop --><h2 id="LockSupport-静态方法"><a href="#LockSupport-静态方法" class="headerlink" title="LockSupport 静态方法"></a>LockSupport 静态方法</h2><p><strong>+ setCurrentBlocker( )</strong><br><strong>+ unpark( )</strong><br><strong>+ park( )</strong><br><strong>+ parkNanos( )</strong><br><strong>+ parkUntil( )</strong><br><strong>+ getBlocker( )</strong><br><strong>+ park( )</strong><br><strong>+ parkNanos( )</strong><br><strong>+ parkUntil( )</strong><br><strong>+ getThreadId( )</strong></p><p>LockSupport 的静态方法 <strong>park(  )</strong> 可以阻塞当前线程，类似的还有 <strong>parkNanos( )</strong> , <strong>parkUtil( )</strong> 等方法。</p><h2 id="LockSupport-的简易用法"><a href="#LockSupport-的简易用法" class="headerlink" title="LockSupport 的简易用法"></a>LockSupport 的简易用法</h2><p>下面是JDK中的先进先出的非可重入锁的简易示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FIFOMutex</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicBoolean locked  = <span class="hljs-keyword">new</span> AtomicBoolean(<span class="hljs-keyword">false</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Queue&lt;Thread&gt; waiters = <span class="hljs-keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;<br>     <span class="hljs-keyword">boolean</span> wasInterrupted = <span class="hljs-keyword">false</span>;<br>     <span class="hljs-comment">// publish current thread for unparkers</span><br>     waiters.add(Thread.currentThread());<br><br>     <span class="hljs-comment">// Block while not first in queue or cannot acquire lock</span><br>     <span class="hljs-keyword">while</span> (waiters.peek() != Thread.currentThread() ||<br>            !locked.compareAndSet(<span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>)) &#123;<br>       LockSupport.park(<span class="hljs-keyword">this</span>);<br>       <span class="hljs-comment">// ignore interrupts while waiting</span><br>       <span class="hljs-keyword">if</span> (Thread.interrupted())<br>         wasInterrupted = <span class="hljs-keyword">true</span>;<br>     &#125;<br><br>     waiters.remove();<br>     <span class="hljs-comment">// ensure correct interrupt status on return</span><br>     <span class="hljs-keyword">if</span> (wasInterrupted)<br>       Thread.currentThread().interrupt();<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span> </span>&#123;<br>     locked.set(<span class="hljs-keyword">false</span>);<br>     LockSupport.unpark(waiters.peek());<br>   &#125;<br><br>   <span class="hljs-keyword">static</span> &#123;<br>     <span class="hljs-comment">// Reduce the risk of &quot;lost unpark&quot; due to classloading</span><br>     Class&lt;?&gt; ensureLoaded = LockSupport.class;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Lock Support 是一个非常方便的线程阻塞工具，他可以在线程内任意位置让线程阻塞。与 **Thread.suspend()** 方法相比，他补充了由于 **resume( )** 方法发生导致线程无法继续执行的情况...</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="线程" scheme="https://mirsery.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="java" scheme="https://mirsery.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Semaphore 信号量</title>
    <link href="https://mirsery.github.io/2021/07/21/java/2021/Semaphore%20%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
    <id>https://mirsery.github.io/2021/07/21/java/2021/Semaphore%20%E4%BF%A1%E5%8F%B7%E9%87%8F/</id>
    <published>2021-07-21T14:55:01.000Z</published>
    <updated>2021-08-24T15:38:14.713Z</updated>
    
    <content type="html"><![CDATA[<p>信号量为多线程协作提供了更为详细的控制方法，广义上说信号量是锁的扩展。无论是内部锁还是重入锁，一次只能允许一个线程访问一个资源，但是信号量却可以指定多个线程并行访问某一个资源。</p><h2 id="信号量提供的构造函数"><a href="#信号量提供的构造函数" class="headerlink" title="信号量提供的构造函数"></a>信号量提供的构造函数</h2><p>JDK源码中 Semaphore 构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a &#123;<span class="hljs-doctag">@code</span> Semaphore&#125; with the given number of</span><br><span class="hljs-comment"> * permits and nonfair fairness setting.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> permits the initial number of permits available.</span><br><span class="hljs-comment"> *        This value may be negative, in which case releases</span><br><span class="hljs-comment"> *        must occur before any acquires will be granted.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Semaphore</span><span class="hljs-params">(<span class="hljs-keyword">int</span> permits)</span> </span>&#123;<br>    sync = <span class="hljs-keyword">new</span> NonfairSync(permits);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a &#123;<span class="hljs-doctag">@code</span> Semaphore&#125; with the given number of</span><br><span class="hljs-comment"> * permits and the given fairness setting.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> permits the initial number of permits available.</span><br><span class="hljs-comment"> *        This value may be negative, in which case releases</span><br><span class="hljs-comment"> *        must occur before any acquires will be granted.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> fair &#123;<span class="hljs-doctag">@code</span> true&#125; if this semaphore will guarantee</span><br><span class="hljs-comment"> *        first-in first-out granting of permits under contention,</span><br><span class="hljs-comment"> *        else &#123;<span class="hljs-doctag">@code</span> false&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Semaphore</span><span class="hljs-params">(<span class="hljs-keyword">int</span> permits, <span class="hljs-keyword">boolean</span> fair)</span> </span>&#123;<br>    sync = fair ? <span class="hljs-keyword">new</span> FairSync(permits) : <span class="hljs-keyword">new</span> NonfairSync(permits);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>permits</strong> 信号量的准入数，即同时能申请多少个许可。</p><p>下面是jdk中信号量使用的简单的例子:<br>Semaphores are often used to restrict the number of threads than can access some (physical or logical) resource.<br>For example, here is a class that uses a semaphore to control access to a pool of items.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pool</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_AVAILABLE = <span class="hljs-number">100</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Semaphore available = <span class="hljs-keyword">new</span> Semaphore(MAX_AVAILABLE, <span class="hljs-keyword">true</span>);<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getItem</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>     available.acquire();<br>     <span class="hljs-keyword">return</span> getNextAvailableItem();<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putItem</span><span class="hljs-params">(Object x)</span> </span>&#123;<br>     <span class="hljs-keyword">if</span> (markAsUnused(x))<br>       available.release();<br>   &#125;<br><br>   <span class="hljs-comment">// Not a particularly efficient data structure; just for demo</span><br><br>   <span class="hljs-keyword">protected</span> Object[] items = ... whatever kinds of items being managed<br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span>[] used = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[MAX_AVAILABLE];<br><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> Object <span class="hljs-title">getNextAvailableItem</span><span class="hljs-params">()</span> </span>&#123;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX_AVAILABLE; ++i) &#123;<br>       <span class="hljs-keyword">if</span> (!used[i]) &#123;<br>         used[i] = <span class="hljs-keyword">true</span>;<br>         <span class="hljs-keyword">return</span> items[i];<br>       &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>; <span class="hljs-comment">// not reached</span><br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">markAsUnused</span><span class="hljs-params">(Object item)</span> </span>&#123;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX_AVAILABLE; ++i) &#123;<br>       <span class="hljs-keyword">if</span> (item == items[i]) &#123;<br>         <span class="hljs-keyword">if</span> (used[i]) &#123;<br>           used[i] = <span class="hljs-keyword">false</span>;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>         &#125; <span class="hljs-keyword">else</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>       &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">信号量为多线程协作提供了更为详细的控制方法，广义上说信号量是锁的扩展。无论是内部锁还是重入锁，一次只能允许一个线程访问一个资源，但是信号量却可...</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="线程" scheme="https://mirsery.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Condition</title>
    <link href="https://mirsery.github.io/2021/07/20/java/2021/Condition/"/>
    <id>https://mirsery.github.io/2021/07/20/java/2021/Condition/</id>
    <published>2021-07-20T14:48:13.000Z</published>
    <updated>2021-08-24T15:38:14.713Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Condition 一般配合重入锁实现进程间的协作.</p></blockquote><!-- toc --><ul><li><a href="#condition-----">Condition 接口源码</a></li></ul><!-- tocstop --><h2 id="Condition-接口源码"><a href="#Condition-接口源码" class="headerlink" title="Condition 接口源码"></a>Condition 接口源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.util.concurrent.locks;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Condition</span> </span>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Causes the current thread to wait until it is signalled or</span><br><span class="hljs-comment">     * &#123;@linkplain Thread#interrupt interrupted&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;The lock associated with this &#123;@code Condition&#125; is atomically</span><br><span class="hljs-comment">     * released and the current thread becomes disabled for thread scheduling</span><br><span class="hljs-comment">     * purposes and lies dormant until &lt;em&gt;one&lt;/em&gt; of four things happens:</span><br><span class="hljs-comment">     * &lt;ul&gt;</span><br><span class="hljs-comment">     * &lt;li&gt;Some other thread invokes the &#123;@link #signal&#125; method for this</span><br><span class="hljs-comment">     * &#123;@code Condition&#125; and the current thread happens to be chosen as the</span><br><span class="hljs-comment">     * thread to be awakened; or</span><br><span class="hljs-comment">     * &lt;li&gt;Some other thread invokes the &#123;@link #signalAll&#125; method for this</span><br><span class="hljs-comment">     * &#123;@code Condition&#125;; or</span><br><span class="hljs-comment">     * &lt;li&gt;Some other thread &#123;@linkplain Thread#interrupt interrupts&#125; the</span><br><span class="hljs-comment">     * current thread, and interruption of thread suspension is supported; or</span><br><span class="hljs-comment">     * &lt;li&gt;A &amp;quot;&lt;em&gt;spurious wakeup&lt;/em&gt;&amp;quot; occurs.</span><br><span class="hljs-comment">     * &lt;/ul&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;In all cases, before this method can return the current thread must</span><br><span class="hljs-comment">     * re-acquire the lock associated with this condition. When the</span><br><span class="hljs-comment">     * thread returns it is &lt;em&gt;guaranteed&lt;/em&gt; to hold this lock.</span><br><span class="hljs-comment">  */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;<br>  <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">awaitUninterruptibly</span><span class="hljs-params">()</span></span>;<br>  <br>    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">awaitNanos</span><span class="hljs-params">(<span class="hljs-keyword">long</span> nanosTimeout)</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">await</span><span class="hljs-params">(<span class="hljs-keyword">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;<br>    <br>  <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">awaitUntil</span><span class="hljs-params">(Date deadline)</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;<br>    <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Wakes up one waiting thread.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;If any threads are waiting on this condition then one</span><br><span class="hljs-comment">     * is selected for waking up. That thread must then re-acquire the</span><br><span class="hljs-comment">     * lock before returning from &#123;<span class="hljs-doctag">@code</span> await&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;Implementation Considerations&lt;/b&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;An implementation may (and typically does) require that the</span><br><span class="hljs-comment">     * current thread hold the lock associated with this &#123;<span class="hljs-doctag">@code</span></span><br><span class="hljs-comment">     * Condition&#125; when this method is called. Implementations must</span><br><span class="hljs-comment">     * document this precondition and any actions taken if the lock is</span><br><span class="hljs-comment">     * not held. Typically, an exception such as &#123;<span class="hljs-doctag">@link</span></span><br><span class="hljs-comment">     * IllegalMonitorStateException&#125; will be thrown.</span><br><span class="hljs-comment">     */</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">signal</span><span class="hljs-params">()</span></span>;<br>    <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">signalAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>await( )</strong> 方法会使当前线程等待，自动释放当前锁。当其他线程使用 <strong>signal( )</strong> 时，该线程必须要重新再次获取锁并继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReenterLockCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Condition condition = lock.newCondition();<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<br>            condition.await(); <span class="hljs-comment">//等待</span><br>            System.out.println(<span class="hljs-string">&quot;Thread is going on &quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        ReenterLockCondition reenterLockCondition = <span class="hljs-keyword">new</span> ReenterLockCondition();<br>        Thread t = <span class="hljs-keyword">new</span> Thread(reenterLockCondition);<br>        t.start();<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>        lock.lock();<br>        condition.signal();<br>        lock.unlock();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>As an example, suppose we have a bounded buffer which supports put and take methods. If a take is attempted on an empty buffer, then the thread will block until an item becomes available; if a put is attempted on a full buffer, then the thread will block until a space becomes available. We would like to keep waiting put threads and take threads in separate wait-sets so that we can use the optimization of only notifying a single thread at a time when items or spaces become available in the buffer. This can be achieved using two Condition instances.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BoundedBuffer</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">final</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">final</span> Condition notFull  = lock.newCondition(); <br>    <span class="hljs-keyword">final</span> Condition notEmpty = lock.newCondition(); <br> <br>    <span class="hljs-keyword">final</span> Object[] items = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">int</span> putptr, takeptr, count;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(E x)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>      lock.lock();<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (count == items.length)<br>          notFull.await();<br>        items[putptr] = x;<br>        <span class="hljs-keyword">if</span> (++putptr == items.length) putptr = <span class="hljs-number">0</span>;<br>        ++count;<br>        notEmpty.signal();<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>      &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">take</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>      lock.lock();<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (count == <span class="hljs-number">0</span>)<br>          notEmpty.await();<br>        E x = (E) items[takeptr];<br>        <span class="hljs-keyword">if</span> (++takeptr == items.length) takeptr = <span class="hljs-number">0</span>;<br>        --count;<br>        notFull.signal();<br>        <span class="hljs-keyword">return</span> x;<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>Jdk 中 <em><strong>java.util.concurrent.ArrayBlockingQueue</strong></em> 同时也是利用Condition 来生产者和消费者队列。</p>]]></content>
    
    
    <summary type="html">Condition 一般配合重入锁实现进程间的协作....</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="线程" scheme="https://mirsery.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="java" scheme="https://mirsery.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ReentrantLock重入锁</title>
    <link href="https://mirsery.github.io/2021/07/20/java/2021/ReentrantLock%E9%87%8D%E5%85%A5%E9%94%81/"/>
    <id>https://mirsery.github.io/2021/07/20/java/2021/ReentrantLock%E9%87%8D%E5%85%A5%E9%94%81/</id>
    <published>2021-07-20T05:45:01.000Z</published>
    <updated>2021-08-24T15:38:14.713Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#----">中断响应</a></li><li><a href="#-------">锁申请等待限时</a></li><li><a href="#---">公平锁</a></li></ul><!-- tocstop --><p>重入锁采用 <em><strong>java.util.concurrent.locks.ReentrantLock</strong></em>类实现，下面是一段简单的重入锁的案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10000000</span>;j++)&#123;<br>           lock.lock();<br>           <span class="hljs-keyword">try</span>&#123;<br>               i++;<br>           &#125;<span class="hljs-keyword">finally</span> &#123;<br>               lock.unlock();<br>           &#125;<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>       SimpleReenterLock simpleReenterLock = <span class="hljs-keyword">new</span> SimpleReenterLock();<br>       Thread t1 = <span class="hljs-keyword">new</span> Thread(simpleReenterLock);<br>       Thread t2 = <span class="hljs-keyword">new</span> Thread(simpleReenterLock);<br>       t1.start();<br>       t2.start();<br>       t1.join();<br>       t2.join();<br>       System.out.println(i);<br>   &#125;<br><br></code></pre></td></tr></table></figure><h2 id="中断响应"><a href="#中断响应" class="headerlink" title="中断响应"></a>中断响应</h2><p>使用可重入锁的过程中，如果一个线程在等待锁，那么程序可以根据需求取消对锁的请求。下面是简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ReentrantLock lock1 = <span class="hljs-keyword">new</span> ReentrantLock();<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ReentrantLock lock2 = <span class="hljs-keyword">new</span> ReentrantLock();<br>   <span class="hljs-keyword">int</span> lock;<br><br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InitLock</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lock)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.lock = lock;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">if</span> (lock == <span class="hljs-number">1</span>) &#123;<br>               lock1.lockInterruptibly();<br>               Thread.sleep(<span class="hljs-number">500</span>);<br>               lock2.lockInterruptibly();<br><br>               System.out.println(<span class="hljs-string">&quot;handle &quot;</span>+lock);<br>           &#125;<span class="hljs-keyword">else</span> &#123;<br>               lock2.lockInterruptibly();<br>               Thread.sleep(<span class="hljs-number">500</span>);<br>               lock1.lockInterruptibly();<br><br>               System.out.println(<span class="hljs-string">&quot;handle &quot;</span>+lock);<br>           &#125;<br>       &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>           e.printStackTrace();<br>       &#125;<span class="hljs-keyword">finally</span> &#123;<br>           <span class="hljs-keyword">if</span>(lock1.isHeldByCurrentThread())&#123;<br>               lock1.unlock();<br>           &#125;<br>           <span class="hljs-keyword">if</span>(lock2.isHeldByCurrentThread())&#123;<br>               lock2.unlock();<br>               System.out.println(lock +<span class="hljs-string">&quot;-&quot;</span>+ Thread.currentThread().getId() + <span class="hljs-string">&quot;: thread exit!&quot;</span>);<br>           &#125;<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>       InitLock initLock1 = <span class="hljs-keyword">new</span> InitLock(<span class="hljs-number">1</span>);<br>       InitLock initLock2 = <span class="hljs-keyword">new</span> InitLock(<span class="hljs-number">2</span>);<br>       Thread t1 = <span class="hljs-keyword">new</span> Thread(initLock1);<br>       Thread t2 = <span class="hljs-keyword">new</span> Thread(initLock2);<br>       t1.start();<br>       t2.start();<br>       Thread.sleep(<span class="hljs-number">1000</span>);<br>       t2.interrupt();<br>   &#125;<br></code></pre></td></tr></table></figure><p>上述代码，很容易产生死锁。当t1线程申请lock1之后想申请lock2锁的时候，t2很容易提前申请到lock2，导致程序死锁。主程序触发t2的中断，使得t2线程释放资源，t1线程获得对应的lock2继续完成下面的代码任务。</p><h2 id="锁申请等待限时"><a href="#锁申请等待限时" class="headerlink" title="锁申请等待限时"></a>锁申请等待限时</h2><p>除了采用中断的方式获取外部通知，避免死锁还有另一中方法就限时等待。使用 <em><strong>tryLock( )</strong></em> 方法获取锁，该方法接受2个参数，一个表示等待时长，另一个表示计时单位。如果成功获得锁就会返回true，反之返回false。  <em><strong>ReentrantLock.tryLock( )</strong></em> 方法也可以不带参数直接运行，在这种情况下，当前线程会尝试获得锁，如果锁未被其他线程占用则申请锁成功，立即返回true；反之如果被其他线程占用，则其他线程不会进行等待，而是立即返回false。这种模式不会引起线程等待，因此不会产生死锁。</p><h2 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h2><p>一般情况下，锁的申请都是非公平的，重入锁允许我们对公平性进行设置，他的构造函数如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReentrantLock</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span>  fair)</span></span><br></code></pre></td></tr></table></figure><p>fair 为true表示当前的锁是公平的。默认情况下，锁是非公平的，实现公平锁必然要求系统维护一个有序队列，因此公平锁的实现成本比较高。如果没有特殊的需求则不需要使用公平锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ReentrantLock fairLock = <span class="hljs-keyword">new</span> ReentrantLock(<span class="hljs-keyword">true</span>);<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            fairLock.lock();<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; get the lock&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            fairLock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>    FairLock fairLock = <span class="hljs-keyword">new</span> FairLock();<br>    Thread t1 = <span class="hljs-keyword">new</span> Thread(fairLock,<span class="hljs-string">&quot;t1&quot;</span>);<br>    Thread t2 = <span class="hljs-keyword">new</span> Thread(fairLock,<span class="hljs-string">&quot;t2&quot;</span>);<br><br>    t1.start();<br>    t2.start();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">重入锁采用 ***java.util.concurrent.locks.ReentrantLock***类实现...</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="线程" scheme="https://mirsery.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="java" scheme="https://mirsery.github.io/tags/java/"/>
    
    <category term="锁" scheme="https://mirsery.github.io/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>java运算符</title>
    <link href="https://mirsery.github.io/2021/07/12/java/2021/java%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://mirsery.github.io/2021/07/12/java/2021/java%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-07-12T05:07:17.000Z</published>
    <updated>2021-08-24T15:38:14.713Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 运算符是一种特殊的符号，用来表示数据的运算，赋值和比较等。</p></blockquote><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>四则混合运算： <strong>+</strong> , <strong>-</strong>, <strong>x</strong> , <strong>/</strong> </p><p>取模运算：<strong>%</strong> , 取模运算的结果和被模数的正负相关。例如 <strong>-5 % 3 = -2</strong></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><strong>+=</strong>, <strong>-=</strong> ,<strong>/=</strong> , <strong>*=</strong> ,<strong>%=</strong> , <strong>=</strong></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><strong>&amp;</strong>,  <strong>|</strong>,  <strong>!</strong>,  <strong>&amp;&amp;</strong>,  <strong>||</strong>,  <strong>^</strong></p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><blockquote><p>位运算符操作的都是整型数据</p></blockquote><ul><li><strong>&lt;&lt; 1</strong> 左移，相当于<strong>*2</strong>(正数高位补0，负数补1)</li><li><strong>&gt;&gt; 1</strong> 右移，相当于**/2** (正数高位补0，负数补1)</li><li><strong>&gt;&gt;&gt;</strong> 无符号右移，不管此整数正负高位都补0</li></ul><h3 id="交换两个变量的值"><a href="#交换两个变量的值" class="headerlink" title="交换两个变量的值"></a>交换两个变量的值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> m = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> temp = m;<br>m = n;<br>n = temp;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">m = m + n ;<br>n = m - n ;<br>m = m - n;<br></code></pre></td></tr></table></figure><p>使用位运算：原理（ m ^ n ) ^ n = m</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">m = m ^ n;<br>n = m ^ n;<br>m = m ^ n;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">运算符是一种特殊的符号，用来表示数据的运算，赋值和比较等...</summary>
    
    
    
    <category term="运算符" scheme="https://mirsery.github.io/categories/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
    
    <category term="java" scheme="https://mirsery.github.io/tags/java/"/>
    
    <category term="运算符" scheme="https://mirsery.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>xss和csrf攻击</title>
    <link href="https://mirsery.github.io/2021/07/12/web/2021/xss%E5%92%8Ccsrf%E6%94%BB%E5%87%BB/"/>
    <id>https://mirsery.github.io/2021/07/12/web/2021/xss%E5%92%8Ccsrf%E6%94%BB%E5%87%BB/</id>
    <published>2021-07-12T01:31:45.000Z</published>
    <updated>2021-08-24T15:38:14.725Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#xss">xss</a></li><li><a href="#csrf">csrf</a></li></ul><!-- tocstop --><h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><p>xss（cross-site scripting,简称xss）跨站脚本攻击是一种迫使web站点回显可执行代码的攻击技术，而这些可执行代码由攻击者提供，被终端用户浏览器所加载执行。XSS的主要目的是获取客户端的Cookie或者其他网站用户识别客户端身份的敏感信息。获取到合法用户的信息后，攻击者可以假冒最终用户与网站进行交互。<br>xss漏洞的成因是由于动态页面的web应用对用户提交参数未作充分的检查过滤，允许用户在提交的数据中插入HTML代码，然后未加编码输出到用户的浏览器，这些恶意的提交代码会被受害用户的浏览器解释执行。</p><h2 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h2><p>csrf（cross-site-request-forgery）跨站请求伪造。简单讲就是从A网站发起一个到B网站的请求，而这个请求是经过了伪装的，伪装操作达到的目的就是让请求看起来像是从网站B中发起的，也就是说让B网站所在的服务器误以为该请求是从自己网站发起的，而不是A网站发起的。</p>]]></content>
    
    
    <summary type="html">xss（cross-site scripting,简称xss）跨站脚本攻击是一种迫使web站点回显可执行代码的攻击技术，而这些可执行代码由攻击者提供...</summary>
    
    
    
    <category term="web" scheme="https://mirsery.github.io/categories/web/"/>
    
    
    <category term="网络安全" scheme="https://mirsery.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>文章迁移</title>
    <link href="https://mirsery.github.io/2021/07/09/talk/2021/%E6%96%87%E7%AB%A0%E8%BF%81%E7%A7%BB/"/>
    <id>https://mirsery.github.io/2021/07/09/talk/2021/%E6%96%87%E7%AB%A0%E8%BF%81%E7%A7%BB/</id>
    <published>2021-07-09T05:47:45.000Z</published>
    <updated>2021-08-24T15:38:14.725Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#----------">关于分类和标签的处理</a></li><li><a href="#hexo----------">hexo框架中使用分类和标签</a><ul><li><a href="#-------">安装相应的插件</a></li><li><a href="#-------">新增对应的文件</a></li><li><a href="#---------">修改对应的文件内容</a></li><li><a href="#----------">添加相对应的前端链接</a></li><li><a href="#----">重要内容</a></li></ul></li></ul><!-- tocstop --><p>从15年末开始，陆陆续续记录的一些文档因为某些不可抗力的原因，需要做一些迁移的工作。刚开始写博客的时候用的farbox，后来迁移到bitcron,现在要回归github pages。记录一次文档的迁移过程吧。</p><h2 id="关于分类和标签的处理"><a href="#关于分类和标签的处理" class="headerlink" title="关于分类和标签的处理"></a>关于分类和标签的处理</h2><p>借用B乎上一个表格</p><table><thead><tr><th></th><th>分类</th><th>标签</th></tr></thead><tbody><tr><td>排他性</td><td>是</td><td>否</td></tr><tr><td>关系</td><td>从属</td><td>相关（关联）</td></tr><tr><td>创建</td><td>事先规划</td><td>随时增加</td></tr><tr><td>代价</td><td>高</td><td>低</td></tr></tbody></table><p>满足排他性的归为分类，不满足排他性条件的归为标签。分类是固定的、严谨的；标签是自由的、有特色的、是可以修改和添加的。</p><h2 id="hexo框架中使用分类和标签"><a href="#hexo框架中使用分类和标签" class="headerlink" title="hexo框架中使用分类和标签"></a>hexo框架中使用分类和标签</h2><h3 id="安装相应的插件"><a href="#安装相应的插件" class="headerlink" title="安装相应的插件"></a>安装相应的插件</h3><p>在项目根目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-category --save<br><br>npm install hexo-generator-tag --save<br><br></code></pre></td></tr></table></figure><h3 id="新增对应的文件"><a href="#新增对应的文件" class="headerlink" title="新增对应的文件"></a>新增对应的文件</h3><p>在项目根目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page tags<br><br>hexo new page categories<br><br></code></pre></td></tr></table></figure><h3 id="修改对应的文件内容"><a href="#修改对应的文件内容" class="headerlink" title="修改对应的文件内容"></a>修改对应的文件内容</h3><p>文件  <em><strong>./source/categories/index.md</strong></em> 修改后的内容：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: categories<br>date: 2021-07-14 16:11:57<br>type: categories<br><span class="hljs-section">comments: false</span><br><span class="hljs-section">---</span><br><br></code></pre></td></tr></table></figure><p>文件 <em><strong>./source/tags/index.md</strong></em> 修改后的内容：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: tags<br>date: 2021-07-14 16:12:05<br>type: tags<br><span class="hljs-section">comments: false</span><br><span class="hljs-section">---</span><br><br></code></pre></td></tr></table></figure><blockquote><p>在写文章时需要在文章前标注相应的tag以及category。</p></blockquote><h3 id="添加相对应的前端链接"><a href="#添加相对应的前端链接" class="headerlink" title="添加相对应的前端链接"></a>添加相对应的前端链接</h3><p>一般情况下是在对应的主题的配置文件中，或者工程的配置文件中修改Menu值</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">menu:</span><br>    <span class="hljs-attr">Home:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">Archives:</span> <span class="hljs-string">/archives</span><br>    <span class="hljs-attr">Categories:</span> <span class="hljs-string">/categories</span><br>    <span class="hljs-attr">Tags:</span> <span class="hljs-string">/tags</span><br><br></code></pre></td></tr></table></figure><p>新增相应的分类和标签的地址，即可。</p><h3 id="重要内容"><a href="#重要内容" class="headerlink" title="重要内容"></a>重要内容</h3><p>一般情况，如果按照上述操作即可实现分类和标签的归档。但是假如你当前使用的主题没有实现相应的模板则不能使用相应的功能。此时需要修改主题的模板文件来增强其分页和归档的功能。</p><p>查看***./themes/XXX-theme/layout/category.pug<em><strong>和</strong></em>./themes/XXX-theme/layout/tag.pug***是否存在，这两个文件是选择某个分类或某个标签时，文章列表的渲染模板，其文件后缀可以为pug/ejs等。</p><p>如果这两个文件存在，但是访问<code>/categories</code>或 <code>/tags</code>页面返回404，则说明对应的<code>./themes/XXX-theme/layout/post.pug</code> 文件中没有处理当前页为分类或者标签页的情况。</p><p>以下是简单的处理方式：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">mixin</span> <span class="hljs-string">post(item)</span><br>    <span class="hljs-string">if(page.type</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;categories&#x27;</span><span class="hljs-string">)</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">var</span> <span class="hljs-string">categoriesList</span> <span class="hljs-string">=</span> <span class="hljs-string">list_categories(&#123;</span> <span class="hljs-attr">show_count:</span> <span class="hljs-literal">true</span><span class="hljs-string">&#125;)</span><br>        <span class="hljs-string">.archive</span><br>            <span class="hljs-string">.h2</span> <span class="hljs-string">类别</span><br>            <span class="hljs-string">if</span> <span class="hljs-string">categoriesList</span><br>                <span class="hljs-type">!=</span> <span class="hljs-string">categoriesList</span><br>            <span class="hljs-string">else</span><br>                <span class="hljs-string">p</span> <span class="hljs-string">None.</span><br>    <span class="hljs-string">else</span> <span class="hljs-string">if(page.type</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;tags&#x27;</span><span class="hljs-string">)</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">var</span> <span class="hljs-string">tagsList</span> <span class="hljs-string">=</span> <span class="hljs-string">list_tags(&#123;</span> <span class="hljs-attr">show_count:</span> <span class="hljs-literal">true</span><span class="hljs-string">&#125;)</span><br>        <span class="hljs-string">.archive</span><br>            <span class="hljs-string">.h2</span> <span class="hljs-string">标签</span><br>            <span class="hljs-string">if</span> <span class="hljs-string">tagsList</span><br>                <span class="hljs-type">!=</span> <span class="hljs-string">tagsList</span><br>            <span class="hljs-string">else</span><br>                <span class="hljs-string">p</span> <span class="hljs-string">None.</span><br>    <span class="hljs-string">else</span><br>        <span class="hljs-string">.post.article.post-block</span><br>            <span class="hljs-string">h1.post-title</span><br>                <span class="hljs-type">!=</span> <span class="hljs-string">item.title</span><br>            <span class="hljs-string">+postInfo(item)</span><br>            <span class="hljs-string">.post-content</span><br>                <span class="hljs-type">!=</span> <span class="hljs-string">item.content</span>      <br><br></code></pre></td></tr></table></figure><p>具体的代码以及辅助函数的使用可以查看<a href="https://hexo.io/zh-cn/docs/helpers">hexo.io</a>中的帮助文档，实现了对应的处理方式就可以实现分类和标签页功能。同时也支持自定义对其进行渲染展示。</p>]]></content>
    
    
    <summary type="html">这是一个简单的测试描述文字</summary>
    
    
    
    <category term="生活" scheme="https://mirsery.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="闲谈" scheme="https://mirsery.github.io/tags/%E9%97%B2%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>java 中面向切面的Aop 解析</title>
    <link href="https://mirsery.github.io/2021/06/12/java/2021/java%E4%B8%AD%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2aop%E8%A7%A3%E6%9E%90/"/>
    <id>https://mirsery.github.io/2021/06/12/java/2021/java%E4%B8%AD%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2aop%E8%A7%A3%E6%9E%90/</id>
    <published>2021-06-12T16:00:00.000Z</published>
    <updated>2021-08-24T15:38:14.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Aop-解析"><a href="#Aop-解析" class="headerlink" title="Aop 解析"></a>Aop 解析</h1><blockquote><p> 了解aop协议</p></blockquote><!-- toc --><ul><li><a href="#-----aop">实现简易的Aop</a></li></ul><!-- tocstop --><p>AOP（面向切面编程）是Spring框架的特色功能之一。通过设置横切关注点（cross cutting concerns），AOP提供了极高的扩展性。</p><h2 id="实现简易的Aop"><a href="#实现简易的Aop" class="headerlink" title="实现简易的Aop"></a>实现简易的Aop</h2><ol><li>定义一个 需要被代理的接口，并实现接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Job</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doWork</span><span class="hljs-params">(String msg)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Work</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Job</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doWork</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;[do-work] &quot;</span> + msg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>实现InvocationHandler接口并创建代理方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Object o;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WorkHandler</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.o = o;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        method.invoke(o, args);<br>        System.out.println(<span class="hljs-string">&quot;[proxy-invoke]&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>场景测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkMain</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Job work = <span class="hljs-keyword">new</span> Work();<br>        WorkHandler workHandler = <span class="hljs-keyword">new</span> WorkHandler(work);<br>        Job job = (Job) Proxy.newProxyInstance(work.getClass().getClassLoader(),<br>                work.getClass().getInterfaces(),workHandler);<br>        System.out.println(job.doWork(<span class="hljs-string">&quot;hahahah&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Aop-解析&quot;&gt;&lt;a href=&quot;#Aop-解析&quot; class=&quot;headerlink&quot; title=&quot;Aop 解析&quot;&gt;&lt;/a&gt;Aop 解析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 了解aop协议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- toc --&gt;

</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="aop" scheme="https://mirsery.github.io/tags/aop/"/>
    
  </entry>
  
  <entry>
    <title>Swagger-ui 使用</title>
    <link href="https://mirsery.github.io/2021/06/08/java/2021/Swagger-ui%20%E4%BD%BF%E7%94%A8/"/>
    <id>https://mirsery.github.io/2021/06/08/java/2021/Swagger-ui%20%E4%BD%BF%E7%94%A8/</id>
    <published>2021-06-08T16:00:00.000Z</published>
    <updated>2021-08-24T15:38:14.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swagger-ui-使用"><a href="#Swagger-ui-使用" class="headerlink" title="Swagger-ui 使用"></a>Swagger-ui 使用</h1><!-- toc --><ul><li><a href="#------jar-">引入相关依赖jar包</a></li><li><a href="#---swagger">启用 swagger</a></li><li><a href="#controller-------">Controller 添加描述信息</a></li><li><a href="#--------">接口添加描述信息</a></li><li><a href="#----------">给实体类添加描述信息</a></li></ul><!-- tocstop --><h2 id="引入相关依赖jar包"><a href="#引入相关依赖jar包" class="headerlink" title="引入相关依赖jar包"></a>引入相关依赖jar包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="启用-swagger"><a href="#启用-swagger" class="headerlink" title="启用 swagger"></a>启用 swagger</h2><p>下面是swagger-ui 配置样例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiKey;<br><span class="hljs-keyword">import</span> springfox.documentation.service.AuthorizationScope;<br><span class="hljs-keyword">import</span> springfox.documentation.service.SecurityReference;<br><span class="hljs-keyword">import</span> springfox.documentation.service.SecurityScheme;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: misery</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-04 16:26</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;swagger.enable:false&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> swagger2Enable;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">createRestApi</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())<br>                .enable(swagger2Enable)<br>                .groupName(<span class="hljs-string">&quot;所有&quot;</span>)<br>                .select()<br>                .apis(RequestHandlerSelectors.any())<br>                .paths(PathSelectors.any())<br>                .paths(PathSelectors.regex(<span class="hljs-string">&quot;(?!/error.*).*&quot;</span>))     <span class="hljs-comment">// 去除默认basicController</span><br>                .paths(PathSelectors.regex(<span class="hljs-string">&quot;(?!/actuator.*).*&quot;</span>))    <span class="hljs-comment">//去除actuator</span><br>                .build()<br>                .securityContexts(securityContext())<br>                .securitySchemes(security());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">appApi</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())<br>                .enable(swagger2Enable)<br>                .groupName(<span class="hljs-string">&quot;groupName&quot;</span>)<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.xxxx.xxx&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build()<br>                .securityContexts(securityContext())<br>                .securitySchemes(security());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<br>                .title(<span class="hljs-string">&quot;title&quot;</span>)<br>                .description(<span class="hljs-string">&quot;description&quot;</span>)<br>                .version(<span class="hljs-string">&quot;0.0.1&quot;</span>)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SecurityScheme&gt; <span class="hljs-title">security</span><span class="hljs-params">()</span> </span>&#123;<br>        SecurityScheme token = <span class="hljs-keyword">new</span> ApiKey(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;header&quot;</span>);<br>        List&lt;SecurityScheme&gt; securitySchemeList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        securitySchemeList.add(token);<br>        <span class="hljs-keyword">return</span> securitySchemeList;<br>    &#125;<br><br>    <span class="hljs-function">List&lt;SecurityReference&gt; <span class="hljs-title">defaultAuth</span><span class="hljs-params">()</span> </span>&#123;<br>        AuthorizationScope authorizationScope<br>                = <span class="hljs-keyword">new</span> AuthorizationScope(<span class="hljs-string">&quot;global&quot;</span>, <span class="hljs-string">&quot;accessEverything&quot;</span>);<br>        AuthorizationScope[] authorizationScopes = <span class="hljs-keyword">new</span> AuthorizationScope[<span class="hljs-number">1</span>];<br>        authorizationScopes[<span class="hljs-number">0</span>] = authorizationScope;<br>        List&lt;SecurityReference&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        lists.add(<span class="hljs-keyword">new</span> SecurityReference(<span class="hljs-string">&quot;token&quot;</span>, authorizationScopes));<br>        <span class="hljs-keyword">return</span> lists;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SecurityContext&gt; <span class="hljs-title">securityContext</span><span class="hljs-params">()</span> </span>&#123;<br>        SecurityContext securityContext = SecurityContext.builder()<br>                .securityReferences(defaultAuth())<br>                .build();<br>        List&lt;SecurityContext&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(securityContext);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Controller-添加描述信息"><a href="#Controller-添加描述信息" class="headerlink" title="Controller 添加描述信息"></a>Controller 添加描述信息</h2><p>@Api 可以对Controller进行描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;xxx相关接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口添加描述信息"><a href="#接口添加描述信息" class="headerlink" title="接口添加描述信息"></a>接口添加描述信息</h2><p>@ApiOperation 可以对接口进行描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GETMapping(&quot;/hi&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;xxxxx接口&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><em><strong>@ApiOperation 注解属性</strong></em></p><table><thead><tr><th>注解属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>接口说明</td></tr><tr><td>notes</td><td>String</td><td>接口发布说明</td></tr><tr><td>tags</td><td>Stirng[]</td><td>标签</td></tr><tr><td>response</td><td>Class&lt;?&gt;</td><td>接口返回类型</td></tr><tr><td>httpMethod</td><td>String</td><td>接口请求方式</td></tr></tbody></table></li><li><p><em><strong>@ApiIgnore</strong></em><br>  Swagger 文档不会显示拥有该注解的接口。</p></li><li><p><em><strong>@ApiImplicitParams</strong></em><br>  用于描述接口的非对象参数集。</p></li><li><p><em><strong>@ApiImplicitParam</strong></em><br>  用于描述接口的非对象参数，一般与 <em><strong>@ApiImplicitParams</strong></em> 组合使用</p></li></ul><table>    <tr>        <td rowspan="15">@ApiImplicitParam</td>    </tr>    <tr>        <td colspan="3">用在@ApiImplicitParams注解中，指定一个请求参数的各个方面</td>    </tr>    <tr>        <td>name</td>        <td colspan="2">参数名</td>    </tr>    <tr>       <td>value</td>        <td colspan="2">参数的汉字说明、解释</td>    </tr>    <tr>       <td>required</td>        <td colspan="2">参数是否必须传</td>    </tr>    <tr>       <td>dataType</td>       <td colspan="2">参数类型，默认String，其它值dataType="Integer"</td>    </tr>    <tr>       <td>defaultValue</td>        <td colspan="2">参数的默认值</td>    </tr>    <tr>       <td rowspan="8">paramType</td>   </tr>    <tr>       <td colspan="2">参数放在哪个地方</td>    </tr> <tr>       <td>header</td>        <td>请求参数的获取@RequestHeader</td> </tr> <tr>       <td>header</td>        <td>请求参数的获取@RequestHeader</td> </tr> <tr>       <td>query</td>        <td>请求参数的获取@RequestParam</td> </tr> <tr>       <td>path</td>        <td>请求参数的获取@PathVariable</td> </tr> <tr>       <td>body</td>        <td>请求参数的获取@RequestBody</td> </tr> <tr>       <td>form</td>        <td>普通表单提交</td> </tr></table><h2 id="给实体类添加描述信息"><a href="#给实体类添加描述信息" class="headerlink" title="给实体类添加描述信息"></a>给实体类添加描述信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(&quot;用户实体&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Entity</span> </span>&#123;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;用户 id&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>@ApiModelProperty 主要属性</li></ul><table><thead><tr><th>注解属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>字段说明</td></tr><tr><td>name</td><td>String</td><td>重写字段名称</td></tr><tr><td>dataType</td><td>Stirng</td><td>重写字段类型</td></tr><tr><td>required</td><td>boolean 是否必填</td><td></td></tr><tr><td>example</td><td>Stirng</td><td>举例说明</td></tr><tr><td>hidden</td><td>boolean</td><td>是否在文档中隐藏该字段</td></tr><tr><td>allowEmptyValue</td><td>boolean</td><td>是否允许为空</td></tr><tr><td>allowableValues</td><td>String</td><td>该字段允许的值，当我们 API 的某个参数为枚举类型时，使用这个属性就可以清楚地告诉 API 使用者该参数所能允许传入的值</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Swagger-ui-使用&quot;&gt;&lt;a href=&quot;#Swagger-ui-使用&quot; class=&quot;headerlink&quot; title=&quot;Swagger-ui 使用&quot;&gt;&lt;/a&gt;Swagger-ui 使用&lt;/h1&gt;&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a hre</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot自带的md5摘要算法使用</title>
    <link href="https://mirsery.github.io/2021/06/07/java/2021/Springboot%20%E6%A1%86%E6%9E%B6%E8%87%AA%E5%B8%A6%E7%9A%84md5%E6%91%98%E8%A6%81/"/>
    <id>https://mirsery.github.io/2021/06/07/java/2021/Springboot%20%E6%A1%86%E6%9E%B6%E8%87%AA%E5%B8%A6%E7%9A%84md5%E6%91%98%E8%A6%81/</id>
    <published>2021-06-07T16:00:00.000Z</published>
    <updated>2021-08-24T15:38:14.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot自带的md5摘要算法使用"><a href="#springboot自带的md5摘要算法使用" class="headerlink" title="springboot自带的md5摘要算法使用"></a>springboot自带的md5摘要算法使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.util.DigestUtils;<br><br>DigestUtils.md5DigestAsHex(<span class="hljs-string">&quot;需要摘要的字符串xxxxx&quot;</span>.getBytes()); 默认是采用的<span class="hljs-number">32</span>位的md5信息摘要算法<br><br>md5(str,<span class="hljs-number">32</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springboot自带的md5摘要算法使用&quot;&gt;&lt;a href=&quot;#springboot自带的md5摘要算法使用&quot; class=&quot;headerlink&quot; title=&quot;springboot自带的md5摘要算法使用&quot;&gt;&lt;/a&gt;springboot自带的md5摘要算法</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
    <category term="md5" scheme="https://mirsery.github.io/tags/md5/"/>
    
  </entry>
  
  <entry>
    <title>RSA 算法加解密代码实现片段</title>
    <link href="https://mirsery.github.io/2021/05/22/java/2021/java%20RSA%20%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>https://mirsery.github.io/2021/05/22/java/2021/java%20RSA%20%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</id>
    <published>2021-05-22T16:00:00.000Z</published>
    <updated>2021-08-24T15:38:14.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RSA-算法加解密代码实现片段"><a href="#RSA-算法加解密代码实现片段" class="headerlink" title="RSA 算法加解密代码实现片段"></a>RSA 算法加解密代码实现片段</h1><blockquote><p> 采用java</p></blockquote><!-- toc --><ul><li><a href="#----">秘钥生成</a></li><li><a href="#----">公钥加密</a></li><li><a href="#----">公钥解密</a></li><li><a href="#----">私钥加密</a></li><li><a href="#----">私钥解密</a></li></ul><!-- tocstop --><h2 id="秘钥生成"><a href="#秘钥生成" class="headerlink" title="秘钥生成"></a>秘钥生成</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initKey</span><span class="hljs-params">()</span> </span>&#123;<br>      KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>      keyPairGenerator.initialize(<span class="hljs-number">2048</span>);<span class="hljs-comment">//长度必须为64的倍数 512~65536 之间</span><br>      KeyPair keyPair = keyPairGenerator.generateKeyPair();<br>      RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic(); <span class="hljs-comment">//公钥</span><br>      RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();    <span class="hljs-comment">//私钥</span><br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="公钥加密"><a href="#公钥加密" class="headerlink" title="公钥加密"></a>公钥加密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] encryptByPublicKey(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key) <span class="hljs-keyword">throws</span> Exception &#123;<br>      KeyFactory keyFactory = KeyFactory.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>      X509EncodedKeySpec x509KeySpec = <span class="hljs-keyword">new</span> X509EncodedKeySpec(key);<br>      PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);<br>      Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());<br>      cipher.init(Cipher.ENCRYPT_MODE, pubKey);<br>      <span class="hljs-keyword">return</span> cipher.doFinal(data);<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="公钥解密"><a href="#公钥解密" class="headerlink" title="公钥解密"></a>公钥解密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] decryptByPublicKey(<span class="hljs-keyword">byte</span>[] data) <span class="hljs-keyword">throws</span> Exception &#123;<br>       ByteArrayOutputStream out = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>       KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);<br>       X509EncodedKeySpec x509KeySpec = <span class="hljs-keyword">new</span> X509EncodedKeySpec(Base64.getDecoder().decode(publicKey.trim()));<br>       PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);<br>       Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());<br>       cipher.init(Cipher.DECRYPT_MODE, pubKey);<br>       <span class="hljs-keyword">int</span> inputLen = data.length;<br>       <span class="hljs-keyword">int</span> offSet = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">byte</span>[] cache;<br>       <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span> (inputLen - offSet &gt; <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">if</span> (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) &#123;<br>               cache = cipher.doFinal(data, offSet, MAX_DECRYPT_BLOCK);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               cache = cipher.doFinal(data, offSet, inputLen - offSet);<br>           &#125;<br>           out.write(cache, <span class="hljs-number">0</span>, cache.length);<br>           i++;<br>           offSet = i * MAX_DECRYPT_BLOCK;<br>       &#125;<br>       out.close();<br>       <span class="hljs-keyword">return</span> out.toByteArray();<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="私钥加密"><a href="#私钥加密" class="headerlink" title="私钥加密"></a>私钥加密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] encryptByPrivateKey(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key) <span class="hljs-keyword">throws</span> Exception &#123;<br>        ByteArrayOutputStream out = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        PKCS8EncodedKeySpec pkcs8KeySpec = <span class="hljs-keyword">new</span> PKCS8EncodedKeySpec(key);<br>        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);<br>        PrivateKey privateKey = keyFactory.generatePrivate(pkcs8KeySpec);<br>        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());<br>        cipher.init(Cipher.ENCRYPT_MODE, privateKey);<br>        <span class="hljs-keyword">int</span> inputLen = data.length;<br>        <span class="hljs-keyword">int</span> offSet = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span>[] cache;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (inputLen - offSet &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) &#123;<br>                cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cache = cipher.doFinal(data, offSet, inputLen - offSet);<br>            &#125;<br>            out.write(cache, <span class="hljs-number">0</span>, cache.length);<br>            i++;<br>            offSet = i * MAX_ENCRYPT_BLOCK;<br>        &#125;<br>        out.close();<br>        <span class="hljs-keyword">return</span> out.toByteArray();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="私钥解密"><a href="#私钥解密" class="headerlink" title="私钥解密"></a>私钥解密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] decryptByPrivateKey(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key) <span class="hljs-keyword">throws</span> Exception &#123;<br>        PKCS8EncodedKeySpec pkcs8KeySpec = <span class="hljs-keyword">new</span> PKCS8EncodedKeySpec(key);<br>        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);<br>        PrivateKey privateKey = keyFactory.generatePrivate(pkcs8KeySpec);<br>        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());<br>        cipher.init(Cipher.DECRYPT_MODE, privateKey);<br>        <span class="hljs-keyword">return</span> cipher.doFinal(data);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RSA-算法加解密代码实现片段&quot;&gt;&lt;a href=&quot;#RSA-算法加解密代码实现片段&quot; class=&quot;headerlink&quot; title=&quot;RSA 算法加解密代码实现片段&quot;&gt;&lt;/a&gt;RSA 算法加解密代码实现片段&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 采用ja</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="rsa" scheme="https://mirsery.github.io/tags/rsa/"/>
    
    <category term="加密" scheme="https://mirsery.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
</feed>
