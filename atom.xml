<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mirsery</title>
  
  
  <link href="https://mirsery.github.io/atom.xml" rel="self"/>
  
  <link href="https://mirsery.github.io/"/>
  <updated>2021-07-12T05:52:47.939Z</updated>
  <id>https://mirsery.github.io/</id>
  
  <author>
    <name>mirsery</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Netty 断包/沾包问题解决方案</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Netty%E6%96%AD%E5%8C%85%E3%80%81%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Netty%E6%96%AD%E5%8C%85%E3%80%81%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<p>在netty中一个inbound实现了对tcp传输中的短爆、粘包的问题解决。先贴出该类的源代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 2012 The Netty Project</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * The Netty Project licenses this file to you under the Apache License,</span><br><span class="hljs-comment"> * version 2.0 (the &quot;License&quot;); you may not use this file except in compliance</span><br><span class="hljs-comment"> * with the License. You may obtain a copy of the License at:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT</span><br><span class="hljs-comment"> * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the</span><br><span class="hljs-comment"> * License for the specific language governing permissions and limitations</span><br><span class="hljs-comment"> * under the License.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> io.netty.handler.codec;<br><br><span class="hljs-keyword">import</span> io.netty.buffer.ByteBuf;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelHandlerContext;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A decoder that splits the received &#123;<span class="hljs-doctag">@link</span> ByteBuf&#125;s by one or more</span><br><span class="hljs-comment"> * delimiters.  It is particularly useful for decoding the frames which ends</span><br><span class="hljs-comment"> * with a delimiter such as &#123;<span class="hljs-doctag">@link</span> Delimiters#nulDelimiter() NUL&#125; or</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@linkplain</span> Delimiters#lineDelimiter() newline characters&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;h3&gt;Predefined delimiters&lt;/h3&gt;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> Delimiters&#125; defines frequently used delimiters for convenience&#x27; sake.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;h3&gt;Specifying more than one delimiter&lt;/h3&gt;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> DelimiterBasedFrameDecoder&#125; allows you to specify more than one</span><br><span class="hljs-comment"> * delimiter.  If more than one delimiter is found in the buffer, it chooses</span><br><span class="hljs-comment"> * the delimiter which produces the shortest frame.  For example, if you have</span><br><span class="hljs-comment"> * the following data in the buffer:</span><br><span class="hljs-comment"> * &lt;pre&gt;</span><br><span class="hljs-comment"> * +--------------+</span><br><span class="hljs-comment"> * | ABC\nDEF\r\n |</span><br><span class="hljs-comment"> * +--------------+</span><br><span class="hljs-comment"> * &lt;/pre&gt;</span><br><span class="hljs-comment"> * a &#123;<span class="hljs-doctag">@link</span> DelimiterBasedFrameDecoder&#125;(&#123;<span class="hljs-doctag">@link</span> Delimiters#lineDelimiter() Delimiters.lineDelimiter()&#125;)</span><br><span class="hljs-comment"> * will choose &#123;<span class="hljs-doctag">@code</span> &#x27;\n&#x27;&#125; as the first delimiter and produce two frames:</span><br><span class="hljs-comment"> * &lt;pre&gt;</span><br><span class="hljs-comment"> * +-----+-----+</span><br><span class="hljs-comment"> * | ABC | DEF |</span><br><span class="hljs-comment"> * +-----+-----+</span><br><span class="hljs-comment"> * &lt;/pre&gt;</span><br><span class="hljs-comment"> * rather than incorrectly choosing &#123;<span class="hljs-doctag">@code</span> &#x27;\r\n&#x27;&#125; as the first delimiter:</span><br><span class="hljs-comment"> * &lt;pre&gt;</span><br><span class="hljs-comment"> * +----------+</span><br><span class="hljs-comment"> * | ABC\nDEF |</span><br><span class="hljs-comment"> * +----------+</span><br><span class="hljs-comment"> * &lt;/pre&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ByteToMessageDecoder</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ByteBuf[] delimiters;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> maxFrameLength;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> stripDelimiter;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> failFast;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> discardingTooLongFrame;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tooLongFrameLength;<br>    <span class="hljs-comment">/** Set only when decoding with &quot;\n&quot; and &quot;\r\n&quot; as the delimiter.  */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> LineBasedFrameDecoder lineBasedDecoder;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxFrameLength  the maximum length of the decoded frame.</span><br><span class="hljs-comment">     *                        A &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is thrown if</span><br><span class="hljs-comment">     *                        the length of the frame exceeds this value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delimiter  the delimiter</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxFrameLength, ByteBuf delimiter)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(maxFrameLength, <span class="hljs-keyword">true</span>, delimiter);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxFrameLength  the maximum length of the decoded frame.</span><br><span class="hljs-comment">     *                        A &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is thrown if</span><br><span class="hljs-comment">     *                        the length of the frame exceeds this value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stripDelimiter  whether the decoded frame should strip out the</span><br><span class="hljs-comment">     *                        delimiter or not</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delimiter  the delimiter</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">int</span> maxFrameLength, <span class="hljs-keyword">boolean</span> stripDelimiter, ByteBuf delimiter)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(maxFrameLength, stripDelimiter, <span class="hljs-keyword">true</span>, delimiter);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxFrameLength  the maximum length of the decoded frame.</span><br><span class="hljs-comment">     *                        A &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is thrown if</span><br><span class="hljs-comment">     *                        the length of the frame exceeds this value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stripDelimiter  whether the decoded frame should strip out the</span><br><span class="hljs-comment">     *                        delimiter or not</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> failFast  If &lt;tt&gt;true&lt;/tt&gt;, a &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is</span><br><span class="hljs-comment">     *                  thrown as soon as the decoder notices the length of the</span><br><span class="hljs-comment">     *                  frame will exceed &lt;tt&gt;maxFrameLength&lt;/tt&gt; regardless of</span><br><span class="hljs-comment">     *                  whether the entire frame has been read.</span><br><span class="hljs-comment">     *                  If &lt;tt&gt;false&lt;/tt&gt;, a &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is</span><br><span class="hljs-comment">     *                  thrown after the entire frame that exceeds</span><br><span class="hljs-comment">     *                  &lt;tt&gt;maxFrameLength&lt;/tt&gt; has been read.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delimiter  the delimiter</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">int</span> maxFrameLength, <span class="hljs-keyword">boolean</span> stripDelimiter, <span class="hljs-keyword">boolean</span> failFast,</span></span><br><span class="hljs-params"><span class="hljs-function">            ByteBuf delimiter)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(maxFrameLength, stripDelimiter, failFast, <span class="hljs-keyword">new</span> ByteBuf[] &#123;<br>                delimiter.slice(delimiter.readerIndex(), delimiter.readableBytes())&#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxFrameLength  the maximum length of the decoded frame.</span><br><span class="hljs-comment">     *                        A &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is thrown if</span><br><span class="hljs-comment">     *                        the length of the frame exceeds this value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delimiters  the delimiters</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxFrameLength, ByteBuf... delimiters)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(maxFrameLength, <span class="hljs-keyword">true</span>, delimiters);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxFrameLength  the maximum length of the decoded frame.</span><br><span class="hljs-comment">     *                        A &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is thrown if</span><br><span class="hljs-comment">     *                        the length of the frame exceeds this value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stripDelimiter  whether the decoded frame should strip out the</span><br><span class="hljs-comment">     *                        delimiter or not</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delimiters  the delimiters</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">int</span> maxFrameLength, <span class="hljs-keyword">boolean</span> stripDelimiter, ByteBuf... delimiters)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(maxFrameLength, stripDelimiter, <span class="hljs-keyword">true</span>, delimiters);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxFrameLength  the maximum length of the decoded frame.</span><br><span class="hljs-comment">     *                        A &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is thrown if</span><br><span class="hljs-comment">     *                        the length of the frame exceeds this value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stripDelimiter  whether the decoded frame should strip out the</span><br><span class="hljs-comment">     *                        delimiter or not</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> failFast  If &lt;tt&gt;true&lt;/tt&gt;, a &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is</span><br><span class="hljs-comment">     *                  thrown as soon as the decoder notices the length of the</span><br><span class="hljs-comment">     *                  frame will exceed &lt;tt&gt;maxFrameLength&lt;/tt&gt; regardless of</span><br><span class="hljs-comment">     *                  whether the entire frame has been read.</span><br><span class="hljs-comment">     *                  If &lt;tt&gt;false&lt;/tt&gt;, a &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is</span><br><span class="hljs-comment">     *                  thrown after the entire frame that exceeds</span><br><span class="hljs-comment">     *                  &lt;tt&gt;maxFrameLength&lt;/tt&gt; has been read.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delimiters  the delimiters</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">int</span> maxFrameLength, <span class="hljs-keyword">boolean</span> stripDelimiter, <span class="hljs-keyword">boolean</span> failFast, ByteBuf... delimiters)</span> </span>&#123;<br>        validateMaxFrameLength(maxFrameLength);<br>        <span class="hljs-keyword">if</span> (delimiters == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;delimiters&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (delimiters.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;empty delimiters&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (isLineBased(delimiters) &amp;&amp; !isSubclass()) &#123;<br>            lineBasedDecoder = <span class="hljs-keyword">new</span> LineBasedFrameDecoder(maxFrameLength, stripDelimiter, failFast);<br>            <span class="hljs-keyword">this</span>.delimiters = <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.delimiters = <span class="hljs-keyword">new</span> ByteBuf[delimiters.length];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; delimiters.length; i ++) &#123;<br>                ByteBuf d = delimiters[i];<br>                validateDelimiter(d);<br>                <span class="hljs-keyword">this</span>.delimiters[i] = d.slice(d.readerIndex(), d.readableBytes());<br>            &#125;<br>            lineBasedDecoder = <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">this</span>.maxFrameLength = maxFrameLength;<br>        <span class="hljs-keyword">this</span>.stripDelimiter = stripDelimiter;<br>        <span class="hljs-keyword">this</span>.failFast = failFast;<br>    &#125;<br><br>    <span class="hljs-comment">/** Returns true if the delimiters are &quot;\n&quot; and &quot;\r\n&quot;.  */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isLineBased</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ByteBuf[] delimiters)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (delimiters.length != <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        ByteBuf a = delimiters[<span class="hljs-number">0</span>];<br>        ByteBuf b = delimiters[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (a.capacity() &lt; b.capacity()) &#123;<br>            a = delimiters[<span class="hljs-number">1</span>];<br>            b = delimiters[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> a.capacity() == <span class="hljs-number">2</span> &amp;&amp; b.capacity() == <span class="hljs-number">1</span><br>                &amp;&amp; a.getByte(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;\r&#x27;</span> &amp;&amp; a.getByte(<span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;\n&#x27;</span><br>                &amp;&amp; b.getByte(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return &#123;<span class="hljs-doctag">@code</span> true&#125; if the current instance is a subclass of DelimiterBasedFrameDecoder</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSubclass</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getClass() != DelimiterBasedFrameDecoder.class;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode</span><span class="hljs-params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Object decoded = decode(ctx, in);<br>        <span class="hljs-keyword">if</span> (decoded != <span class="hljs-keyword">null</span>) &#123;<br>            out.add(decoded);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Create a frame out of the &#123;<span class="hljs-doctag">@link</span> ByteBuf&#125; and return it.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>   ctx             the &#123;<span class="hljs-doctag">@link</span> ChannelHandlerContext&#125; which this &#123;<span class="hljs-doctag">@link</span> ByteToMessageDecoder&#125; belongs to</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>   buffer          the &#123;<span class="hljs-doctag">@link</span> ByteBuf&#125; from which to read data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  frame           the &#123;<span class="hljs-doctag">@link</span> ByteBuf&#125; which represent the frame or &#123;<span class="hljs-doctag">@code</span> null&#125; if no frame could</span><br><span class="hljs-comment">     *                          be created.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">decode</span><span class="hljs-params">(ChannelHandlerContext ctx, ByteBuf buffer)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">if</span> (lineBasedDecoder != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> lineBasedDecoder.decode(ctx, buffer);<br>        &#125;<br>        <span class="hljs-comment">// Try all delimiters and choose the delimiter which yields the shortest frame.</span><br>        <span class="hljs-keyword">int</span> minFrameLength = Integer.MAX_VALUE;<br>        ByteBuf minDelim = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">for</span> (ByteBuf delim: delimiters) &#123;<br>            <span class="hljs-keyword">int</span> frameLength = indexOf(buffer, delim);<br>            <span class="hljs-keyword">if</span> (frameLength &gt;= <span class="hljs-number">0</span> &amp;&amp; frameLength &lt; minFrameLength) &#123;<br>                minFrameLength = frameLength;<br>                minDelim = delim;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (minDelim != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">int</span> minDelimLength = minDelim.capacity();<br>            ByteBuf frame;<br><br>            <span class="hljs-keyword">if</span> (discardingTooLongFrame) &#123;<br>                <span class="hljs-comment">// We&#x27;ve just finished discarding a very large frame.</span><br>                <span class="hljs-comment">// Go back to the initial state.</span><br>                discardingTooLongFrame = <span class="hljs-keyword">false</span>;<br>                buffer.skipBytes(minFrameLength + minDelimLength);<br><br>                <span class="hljs-keyword">int</span> tooLongFrameLength = <span class="hljs-keyword">this</span>.tooLongFrameLength;<br>                <span class="hljs-keyword">this</span>.tooLongFrameLength = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (!failFast) &#123;<br>                    fail(tooLongFrameLength);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (minFrameLength &gt; maxFrameLength) &#123;<br>                <span class="hljs-comment">// Discard read frame.</span><br>                buffer.skipBytes(minFrameLength + minDelimLength);<br>                fail(minFrameLength);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (stripDelimiter) &#123;<br>                frame = buffer.readSlice(minFrameLength);<br>                buffer.skipBytes(minDelimLength);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                frame = buffer.readSlice(minFrameLength + minDelimLength);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> frame.retain();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!discardingTooLongFrame) &#123;<br>                <span class="hljs-keyword">if</span> (buffer.readableBytes() &gt; maxFrameLength) &#123;<br>                    <span class="hljs-comment">// Discard the content of the buffer until a delimiter is found.</span><br>                    tooLongFrameLength = buffer.readableBytes();<br>                    buffer.skipBytes(buffer.readableBytes());<br>                    discardingTooLongFrame = <span class="hljs-keyword">true</span>;<br>                    <span class="hljs-keyword">if</span> (failFast) &#123;<br>                        fail(tooLongFrameLength);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// Still discarding the buffer since a delimiter is not found.</span><br>                tooLongFrameLength += buffer.readableBytes();<br>                buffer.skipBytes(buffer.readableBytes());<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fail</span><span class="hljs-params">(<span class="hljs-keyword">long</span> frameLength)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (frameLength &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TooLongFrameException(<br>                            <span class="hljs-string">&quot;frame length exceeds &quot;</span> + maxFrameLength +<br>                            <span class="hljs-string">&quot;: &quot;</span> + frameLength + <span class="hljs-string">&quot; - discarded&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TooLongFrameException(<br>                            <span class="hljs-string">&quot;frame length exceeds &quot;</span> + maxFrameLength +<br>                            <span class="hljs-string">&quot; - discarding&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the number of bytes between the readerIndex of the haystack and</span><br><span class="hljs-comment">     * the first needle found in the haystack.  -1 is returned if no needle is</span><br><span class="hljs-comment">     * found in the haystack.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(ByteBuf haystack, ByteBuf needle)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = haystack.readerIndex(); i &lt; haystack.writerIndex(); i ++) &#123;<br>            <span class="hljs-keyword">int</span> haystackIndex = i;<br>            <span class="hljs-keyword">int</span> needleIndex;<br>            <span class="hljs-keyword">for</span> (needleIndex = <span class="hljs-number">0</span>; needleIndex &lt; needle.capacity(); needleIndex ++) &#123;<br>                <span class="hljs-keyword">if</span> (haystack.getByte(haystackIndex) != needle.getByte(needleIndex)) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    haystackIndex ++;<br>                    <span class="hljs-keyword">if</span> (haystackIndex == haystack.writerIndex() &amp;&amp;<br>                        needleIndex != needle.capacity() - <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (needleIndex == needle.capacity()) &#123;<br>                <span class="hljs-comment">// Found the needle from the haystack!</span><br>                <span class="hljs-keyword">return</span> i - haystack.readerIndex();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">validateDelimiter</span><span class="hljs-params">(ByteBuf delimiter)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (delimiter == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;delimiter&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!delimiter.isReadable()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;empty delimiter&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">validateMaxFrameLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxFrameLength)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (maxFrameLength &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>                    <span class="hljs-string">&quot;maxFrameLength must be a positive integer: &quot;</span> +<br>                    maxFrameLength);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在netty中一个inbound实现了对tcp传输中的短爆、粘包的问题解决。先贴出该类的源代码:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="netty" scheme="https://mirsery.github.io/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>netty重链接</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Netty%E7%9A%84%E9%87%8D%E8%BF%9E%E6%9C%BA%E5%88%B6/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Netty%E7%9A%84%E9%87%8D%E8%BF%9E%E6%9C%BA%E5%88%B6/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<p>在socket客户端编程中涉及到最多的就是长连接的问题。在netty框架中客户端和服务器之间的连接断开的话会触发channel的inactive方法，此时我们可以在inactive方法中实现客户端的断线重连机制。<br>    下面是示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Bootstrap <span class="hljs-title">createBootStrap</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Bootstrap bootstrap, <span class="hljs-keyword">final</span> EventLoopGroup eventLoop)</span> </span>&#123;<br>       <span class="hljs-keyword">if</span>(bootstrap != <span class="hljs-keyword">null</span>)&#123;<br>           bootstrap.group(eventLoop).channel(NioSocketChannel.class).handler(janusChannelInitializer);<br><br><br>           <span class="hljs-keyword">final</span> ChannelFuture future = bootstrap.connect(<span class="hljs-keyword">new</span> InetSocketAddress(configuration.getServerIP(), configuration.getPort()));<br><br>           future.addListener(<span class="hljs-keyword">new</span> ChannelFutureListener() &#123;<br>               <span class="hljs-meta">@Override</span><br>               <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operationComplete</span><span class="hljs-params">(ChannelFuture channelFuture)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                   <span class="hljs-keyword">if</span> (future.isSuccess()) &#123;<br>                       log.info(<span class="hljs-string">&quot;janusClient connect to server &quot;</span>+ configuration.getServerIP()+<span class="hljs-string">&quot; at port: &#123;&#125;&quot;</span>, configuration.getPort());<br>                   &#125; <span class="hljs-keyword">else</span> &#123;<br>                       log.error(<span class="hljs-string">&quot;janusClient can&#x27;t connect to server &quot;</span>+configuration.getServerIP()+<span class="hljs-string">&quot; at port: &#123;&#125;!&quot;</span>, configuration.getPort());<br>                       eventLoop.schedule(<span class="hljs-keyword">new</span> Runnable() &#123;<br>                           <span class="hljs-meta">@Override</span><br>                           <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                               createBootStrap(<span class="hljs-keyword">new</span> Bootstrap(),eventLoop);<br>                               log.info(<span class="hljs-string">&quot;reconnect jsonClient.....&quot;</span>);<br>                           &#125;<br>                       &#125;,<span class="hljs-number">30L</span>, TimeUnit.SECONDS);<br>                   &#125;<br>               &#125;<br>           &#125;);<br>           future.syncUninterruptibly();<br>       &#125;<br>       <span class="hljs-keyword">return</span> bootstrap;<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Once channel is inactive</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelInactive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       log.info(<span class="hljs-string">&quot;enter inactive function . . .&quot;</span>);<br>       <span class="hljs-keyword">final</span> EventLoop eventLoop = ctx.channel().eventLoop();<br>       eventLoop.schedule(<span class="hljs-keyword">new</span> Runnable() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>               JsonClient.getJsonClent().createBootStrap(<span class="hljs-keyword">new</span> Bootstrap(),eventLoop);<br>               log.info(<span class="hljs-string">&quot;reconnect .....&quot;</span>);<br>           &#125;<br>       &#125;,<span class="hljs-number">10L</span>, TimeUnit.SECONDS);<br>       <span class="hljs-keyword">super</span>.channelInactive(ctx);<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在socket客户端编程中涉及到最多的就是长连接的问题。在netty框架中客户端和服务器之间的连接断开的话会触发channel的inactive方法，此时我们可以在inactive方法中实现客户端的断线重连机制。&lt;br&gt;    下面是示例代码&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="netty" scheme="https://mirsery.github.io/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>Developing the Spring Boot microservice using the CLI</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Spring%20Cli/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Spring%20Cli/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="developing-the-spring-boot-microservice-using-the-cli">Developing the Spring Boot microservice using the CLI</span></h1><p>The easiest way to develop and demonstrate Spring Boot’s capabilities is using the Spring Boot CLI, a command-line tool. Perform the following steps:</p><p>Install the Spring Boot command-line tool by downloading the spring-boot-cli-1.3.5.RELEASE-bin.zip file from <a href="http://repo.spring.io/release/org/springframework/boot/spring-boot-cli/1.3.5.RELEASE/spring-boot-cli-1.3.5.RELEASE-bin.zip">http://repo.spring.io/release/org/springframework/boot/spring-boot-cli/1.3.5.RELEASE/spring-boot-cli-1.3.5.RELEASE-bin.zip</a>.<br>Unzip the file into a directory of your choice. Open a terminal window and change the terminal prompt to the bin folder.<br>Ensure that the bin folder is added to the system path so that Spring Boot can be run from any location.</p><p>Verify the installation with the following command. If successful, the Spring CLI version will be printed in the console:</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-variable">$spring</span> –-version<br>Spring CLI v1.3.5.RELEASE<br></code></pre></td></tr></table></figure><p>As the next step, a quick REST service will be developed in Groovy, which is supported out of the box in Spring Boot. To do so, copy and paste the following code using any editor of choice and save it as myfirstapp.groovy in any folder:<br>@RestController<br>class HelloworldController {<br>    @RequestMapping(“/“)<br>    String sayHello() {<br>        “Hello World!”<br>    }<br>}<br>In order to run this Groovy application, go to the folder where myfirstapp.groovy is saved and execute the following command. The last few lines of the server start-up log will be similar to the following:</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-variable">$spring</span> run myfirstapp.groovy <br><br>2016-05-09 18:13:55.351  INFO 35861 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet <span class="hljs-string">&#x27;dispatcherServlet&#x27;</span>: initialization started<br>2016-05-09 18:13:55.375  INFO 35861 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet <span class="hljs-string">&#x27;dispatcherServlet&#x27;</span>: initialization completed <span class="hljs-keyword">in</span> 24 ms<br></code></pre></td></tr></table></figure><p>Open a browser window and go to <a href="http://localhost:8080/">http://localhost:8080</a>; the browser will display the following message:<br>Hello World!</p><p>There is no war file created, and no Tomcat server was run. Spring Boot automatically picked up Tomcat as the webserver and embedded it into the application. This is a very basic, minimal microservice. The @RestController annotation, used in the previous code, will be examined in detail in the next example.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;developing-the-spring-boot-microservice-using-the-cli&quot;&gt;Developing the Spring Boot microservice using the CLI&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;The</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://mirsery.github.io/2021/07/12/java/Spring%20Integration/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Spring%20Integration/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="spring-integration">Spring integration</span></h1><p>Spring Integration能在基于Spring的应用中进行简单的消息通信，并通过简单的适配器与外部系统集成。这些适配器提供了一个更高级别的抽象，超越 了Spring对远程调用、消息和调度的支持。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;spring-integration&quot;&gt;Spring integration&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;Spring Integration能在基于Spring的应用中进行简单的消息通信，并通过简单的适配器与外部系统集成。这些适配器提供了一个更高级别</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>springboot interceptor</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Spring%20interceptor/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Spring%20interceptor/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="interceptor">interceptor</span></h1><p>Spring MVC interceptor intercepts the actual request and response. Interceptors are a special web programming technique, where we can execute a certain piece of logic before or after a web request is processed. </p><h2><span id="working-with-interceptors">working with interceptors</span></h2><p>As I have already mentioned, interceptors are used to intercept actual web requests before or after processing them. We can relate the concept of interceptors in Spring MVC to the filter concept in Servlet programming. In Spring MVC, interceptors are special classes that must implement the org.springframework.web.servlet.HandlerInterceptor interface. The HandlerInterceptor interface defines three important methods, as follows:<br>preHandle: This method will get called just before the web request reaches the Controller for execution<br>postHandle: This method will get called just after the Controller method execution<br>afterCompletion: This method will get called after the completion of the entire web request cycle<br>Once we create our own interceptor, by implementing the HandlerInterceptor interface, we need to configure it in our web application context in order for it to take effect.</p><h2><span id="configure-an-interceptor">configure an interceptor</span></h2><p> a interceptor ‘s class demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.packt.webstore.interceptor;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.apache.log4j.Logger;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProcessingTimeLogInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger LOGGER =Logger.getLogger(ProcessingTimeLogInterceptor.class);<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">     HttpServletResponse response, Object handler)</span> </span>&#123;<br>           <span class="hljs-keyword">long</span> startTime = System.currentTimeMillis();<br>           request.setAttribute(<span class="hljs-string">&quot;startTime&quot;</span>, startTime);<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>       &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">       HttpServletResponse response, Object handler, ModelAndView</span></span><br><span class="hljs-params"><span class="hljs-function">       modelAndView)</span> </span>&#123;<br>           String queryString = request.getQueryString() == <span class="hljs-keyword">null</span> ?<br>   <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;?&quot;</span> + request.getQueryString();<br>           String path = request.getRequestURL() + queryString;<br>           <span class="hljs-keyword">long</span> startTime = (Long)<br>           request.getAttribute(<span class="hljs-string">&quot;startTime&quot;</span>);<br>           <span class="hljs-keyword">long</span> endTime = System.currentTimeMillis();<br>           LOGGER.info(String.format(<span class="hljs-string">&quot;%s millisecond taken to process the request %s.&quot;</span>,(endTime - startTime), path));<br>    &#125;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">       HttpServletResponse response, Object handler, Exception</span></span><br><span class="hljs-params"><span class="hljs-function">       exceptionIfAny)</span></span>&#123;<br>          <span class="hljs-comment">// NO operation.</span><br>       &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>open your web application context configuration file WebApplicationContextConfig.java, add the following method to it, and save the file:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>    registry.addInterceptor(<span class="hljs-keyword">new</span><br>    ProcessingTimeLogInterceptor());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;interceptor&quot;&gt;interceptor&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;Spring MVC interceptor intercepts the actual request and response. Interceptors are a s</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
    <category term="interceptor" scheme="https://mirsery.github.io/tags/interceptor/"/>
    
  </entry>
  
  <entry>
    <title>Spring 框架中的@import注解</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Spring%20%E4%B8%AD@import%20%E6%B3%A8%E8%A7%A3/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Spring%20%E4%B8%AD@import%20%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="spring-框架中的import注解">Spring 框架中的@import注解</span></h1><blockquote><p> @import注解是Spring基于java注解配置的主要组成部分，import注解提供了@Bean注解的功能，同时还有原来组织多个分散的@Configuration的功能。</p></blockquote><h2><span id="import注解可以引入其他的configuration">import注解可以引入其他的configuration</span></h2><p>example  code :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TestService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(&#123;ConfigB.class&#125;)</span>     <span class="hljs-comment">//@Import的优先于本身的的类定义加载</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigA</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TestService <span class="hljs-title">getTestService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TestServiceA();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigB</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TestService <span class="hljs-title">getTestServiceB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TestServiceB();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>场景类代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(ConfigA.class);<br>    TestService testService = applicationContext.getBean(TestService.class);<br>    testService.test();<br>    <span class="hljs-comment">//generate TestServiceB</span><br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="import-注解也可以直接初始化其他类的bean">import 注解也可以直接初始化其他类的Bean</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(&#123;TestServiceC.class&#125;)</span>     <span class="hljs-comment">//@Import的优先于本身的的类定义加载</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigA</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TestService <span class="hljs-title">getTestService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TestServiceA();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>场景类保持不变，此时TestService实例会变成TestServiceC 的实例。</p><h2><span id="个性化加载指定实现importselector">个性化加载，指定实现ImportSelector</span></h2><p>实现importSelector接口可实现个性化加载，下面是示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyimportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ImportSelector</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Select and return the names of which class(es) should be imported based on the &#123;<span class="hljs-doctag">@link</span> AnnotationMetadata&#125; of the</span><br><span class="hljs-comment">     * importing @&#123;<span class="hljs-doctag">@link</span> Configuration&#125; class.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> importingClassMetadata</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;com.mirsery.test.webtest.anno.TestServiceA&quot;</span>&#125;;<span class="hljs-comment">//    可以直接返回实体或者对应的config配置类</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基于AnnotationMetadata的参数实现动态加载类示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Import(My1importSelector.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableTestService &#123;<br>    <span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">My1importSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ImportSelector</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Select and return the names of which class(es) should be imported based on the &#123;<span class="hljs-doctag">@link</span> AnnotationMetadata&#125; of the</span><br><span class="hljs-comment">     * importing @&#123;<span class="hljs-doctag">@link</span> Configuration&#125; class.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> importingClassMetadata</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        Map&lt;String , Object&gt; map = importingClassMetadata.getAnnotationAttributes(EnableTestService.class.getName(), <span class="hljs-keyword">true</span>);<br>        String name = (String) map.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-keyword">if</span> (Objects.equals(name, <span class="hljs-string">&quot;B&quot;</span>)) &#123;<span class="hljs-comment">//</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;com.mirsery.test.webtest.anno.ConfigB&quot;</span>&#125;;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br><br>场景类直接使用标注<br><span class="hljs-meta">@EnableTestService(name=&quot;B&quot;)</span><br></code></pre></td></tr></table></figure><h2><span id="实现importbeandefinitionregistrar-接口个性化加载">实现ImportBeanDefinitionRegistrar 接口个性化加载</span></h2><p>和importSelector 类型，想要重新定义Bean，例如动态注入属性改变Bean的类型和Scope等等就需要通过实现ImportBeanDefinitionRegister的类实现,下面是示例代码:<br>//TODO</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;spring-框架中的import注解&quot;&gt;Spring 框架中的@import注解&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; @import注解是Spring基于java注解配置的主要组成部分，import注解提供了@Bean注解的功能，</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
    <category term="annotation" scheme="https://mirsery.github.io/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC参数绑定</title>
    <link href="https://mirsery.github.io/2021/07/12/java/SpringMVC%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/"/>
    <id>https://mirsery.github.io/2021/07/12/java/SpringMVC%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="springmvc参数绑定">SpringMVC参数绑定</span></h1><blockquote><p> 转载自<a href="https://mp.weixin.qq.com/s/ljCX88T8EZO2TIVs7NUvCg">一篇文章搞定SpringMVC参数绑定</a><br>SpringMVC参数绑定，简单来说就是将客户端请求的key/value数据绑定到controller方法的形参上，然后就可以在controller中使用该参数了。</p></blockquote><!-- toc --><ul><li><a href="#requestheader-%E6%B3%A8%E8%A7%A3">@RequestHeader 注解</a></li><li><a href="#cookilevalue-%E6%B3%A8%E8%A7%A3">@CookileValue 注解</a></li><li><a href="#requestparam-%E6%B3%A8%E8%A7%A3">@RequestParam 注解</a></li><li><a href="#requesrbody-%E6%B3%A8%E8%A7%A3">RequesrBody 注解</a></li></ul><!-- tocstop --><p>##@PathVariable 注解<br>@PathVariable 是用来获得请求url中的动态参数的，可以将URL中的变量映射到功能处理方法的参数上，其中URL 中的 {xxx} 占位符可以通过@PathVariable(“xxx“) 绑定到操作方法的入参中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/testUrlPathParam/&#123;param1&#125;/&#123;param2&#125;&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUrlPathParam</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-meta">@PathVariable</span> String param1,</span></span><br><span class="hljs-params"><span class="hljs-function">                                <span class="hljs-meta">@PathVariable</span> String param2)</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;通过PathVariable获取的参数param1=&quot;</span> + param1);<br>       System.out.println(<span class="hljs-string">&quot;通过PathVariable获取的参数param2=&quot;</span> + param2);<br>   &#125;<br></code></pre></td></tr></table></figure><h2><span id="requestheader-注解">@RequestHeader 注解</span></h2><p>@RequestHeader 注解，可以把Request请求header部分的值绑定到方法的参数上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/testHeaderParam&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testHeaderParam</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-meta">@RequestHeader</span> String param1)</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;通过RequestHeader获取的参数param1=&quot;</span> + param1);<br>   &#125;<br></code></pre></td></tr></table></figure><h2><span id="cookilevalue-注解">@CookileValue 注解</span></h2><p>@CookileValue 注解可以把Resquest header中关于Cookie 的值绑定到方法的参数上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/testCookieParam&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCookieParam</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  <span class="hljs-meta">@CookieValue</span> String sessionid)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;通过CookieValue获取的参数sessionid=&quot;</span> + sessionid);<br>    &#125;<br></code></pre></td></tr></table></figure><h2><span id="requestparam-注解">@RequestParam 注解</span></h2><p>@RequestParam注解用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容。提交方式为get或post。（Http协议中，form的enctype属性为编码方式，常用有两种：application/x-www-form-urlencoded和multipart/form-data，默认为application/x-www-form-urlencoded）；<br>@RequestParam注解实质是将Request.getParameter() 中的Key-Value参数Map利用Spring的转化机制ConversionService配置，转化成参数接收对象或字段，<br>get方式中queryString的值，和post方式中body data的值都会被Servlet接受到并转化到Request.getParameter()参数集中，所以@RequestParam可以获取的到；<br>该注解有三个属性： value、required、defaultValue； value用来指定要传入值的id名称，required用来指示参数是否必录，defaultValue表示参数不传时候的默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/testRequestParam&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRequestParam</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  <span class="hljs-meta">@RequestParam(value = &quot;num&quot;, required = true, defaultValue = &quot;0&quot;)</span> <span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;通过RequestParam获取的参数num=&quot;</span> + num);<br>   &#125;<br></code></pre></td></tr></table></figure><h2><span id="requesrbody-注解">RequesrBody 注解</span></h2><p>@RequestBody注解用来处理HttpEntity（请求体）传递过来的数据，一般用来处理非Content-Type: application/x-www-form-urlencoded编码格式的数据；<br>GET请求中，因为没有HttpEntity，所以@RequestBody并不适用；<br>POST请求中，通过HttpEntity传递的参数，必须要在请求头中声明数据的类型Content-Type，SpringMVC通过使用HandlerAdapter配置的HttpMessageConverters来解析HttpEntity中的数据，然后绑定到相应的bean上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/testRequestBody&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRequestBody</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-meta">@RequestBody</span> String bodyStr)</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;通过RequestBody获取的参数bodyStr=&quot;</span> + bodyStr);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;springmvc参数绑定&quot;&gt;SpringMVC参数绑定&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 转载自&lt;a href=&quot;https://mp.weixin.qq.com/s/ljCX88T8EZO2TIVs7NUvCg&quot;&gt;一篇文章搞定</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot自带的md5摘要算法使用</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Springboot%20%E6%A1%86%E6%9E%B6%E8%87%AA%E5%B8%A6%E7%9A%84md5%E6%91%98%E8%A6%81/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Springboot%20%E6%A1%86%E6%9E%B6%E8%87%AA%E5%B8%A6%E7%9A%84md5%E6%91%98%E8%A6%81/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="springboot自带的md5摘要算法使用">springboot自带的md5摘要算法使用</span></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.util.DigestUtils;<br><br>DigestUtils.md5DigestAsHex(<span class="hljs-string">&quot;需要摘要的字符串xxxxx&quot;</span>.getBytes()); 默认是采用的<span class="hljs-number">32</span>位的md5信息摘要算法<br><br>md5(str,<span class="hljs-number">32</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;springboot自带的md5摘要算法使用&quot;&gt;springboot自带的md5摘要算法使用&lt;/span&gt;&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
    <category term="md5" scheme="https://mirsery.github.io/tags/md5/"/>
    
  </entry>
  
  <entry>
    <title>springboot自带的事件驱动模型使用</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Springboot%E8%87%AA%E5%B8%A6%E7%9A%84%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E4%BD%BF%E7%94%A8/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Springboot%E8%87%AA%E5%B8%A6%E7%9A%84%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E4%BD%BF%E7%94%A8/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="springboot自带的事件驱动模型使用">springboot自带的事件驱动模型使用</span></h1><blockquote><p> Springboot框架自行封装了一套发布订阅模式可以供我们日常开发的使用</p></blockquote><p>##自定义事件类<br>在springboot中继承 <strong>ApplicationEvent</strong>类可以实现自定义事件<br>下面是示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ApplicationEvent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestEvent</span><span class="hljs-params">(Object source, String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(source);<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMessage</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>##定义事件监听组件<br>只要实现<strong>ApplicationListner<t>接口</t></strong>，组件就可以订阅相关的事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestEventListerner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ApplicationListener</span>&lt;<span class="hljs-title">TestEvent</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Handle an application event.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> event the event to respond to</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onApplicationEvent</span><span class="hljs-params">(TestEvent event)</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.getClass() + <span class="hljs-string">&quot; message is &quot;</span> + event.getMessage() + <span class="hljs-string">&quot;, source is :&quot;</span> + event.getSource());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="事件发布">事件发布</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ApplicationContext applicationContext = SpringApplication.run(WebTestApplication.class, args);<br>TestEvent test = <span class="hljs-keyword">new</span> TestEvent(<span class="hljs-string">&quot;test-code&quot;</span>, <span class="hljs-string">&quot;测试事件发生&quot;</span>);<br>applicationContext.publishEvent(test);<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;springboot自带的事件驱动模型使用&quot;&gt;springboot自带的事件驱动模型使用&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Springboot框架自行封装了一套发布订阅模式可以供我们日常开发的使用&lt;/p&gt;
&lt;/blockquot</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud eureka注册中心搭建</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Springcloud%20eureka%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Springcloud%20eureka%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="springcloud-eureka注册中心搭建">SpringCloud eureka注册中心搭建</span></h1><blockquote><p> 搭建eureka注册中心，并集成springboot-admin 监控<br>spring-boot-starter-parent 版本号为 <strong>2.3.10.RELEASE</strong><br>spring-cloud-dependencies 版本为 <strong>Hoxton.SR11</strong></p></blockquote><h2><span id="服务端配置">服务端配置</span></h2><p>服务端直接采用idea新建一个springboot项目，选择对应的版本号以及对应的注册中心。<br>下面是<strong>pom.xml</strong>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.hytiot.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>eureka-hytiot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>eureka-hytiot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR11<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot-admin.version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot-admin.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">docker.image.prefix</span>&gt;</span>docker.hytiot.com<span class="hljs-tag">&lt;/<span class="hljs-name">docker.image.prefix</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">docker-maven-plugin.version</span>&gt;</span>1.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">docker-maven-plugin.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">base-image.name</span>&gt;</span>openjdk:8-jdk-alpine<span class="hljs-tag">&lt;/<span class="hljs-name">base-image.name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maintainer.email</span>&gt;</span>mirsery@hytiot.com<span class="hljs-tag">&lt;/<span class="hljs-name">maintainer.email</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot-admin.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docker-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;docker-maven-plugin.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">imageName</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">imageTags</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">imageTags</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">baseImage</span>&gt;</span>$&#123;base-image.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">baseImage</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">maintainer</span>&gt;</span>$&#123;maintainer.email&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maintainer</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">cmd</span>&gt;</span>[&quot;java&quot;, &quot;-version&quot;]<span class="hljs-tag">&lt;/<span class="hljs-name">cmd</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;, &quot;$&#123;project.build.finalName&#125;.jar&quot;]<span class="hljs-tag">&lt;/<span class="hljs-name">entryPoint</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件yml为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml">spring:<br>  application:<br>    name: eureka-server<br>  security:<br>    user:<br>      name: username<br>      password: password<br>  boot:<br>    admin:<br>        # springboot-admin的访问路径<br>      context-path: /admin<br>server:<br>  port: 8080<br>eureka:<br>  server:<br>    enable-self-preservation: false<br>  instance:<br>    hostname: localhost<br>    instance-id: $&#123;spring.application.name&#125;<br>  client:<br>    # admin need to be discovered<br>    register-with-eureka: true<br>    fetch-registry: true<br>    healthcheck:<br>      enabled: true<br>    service-url:<br>      defaultZone: http://$&#123;spring.security.user.name&#125;:$&#123;spring.security.user.password&#125;@$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/<br>management:<br>  endpoints:<br>    web:<br>      exposure:<br>        include: &quot;*&quot;<br>  endpoint:<br>    health:<br>      show-details: ALWAYS<br></code></pre></td></tr></table></figure><p>同时启动类需要增加**@EnableEurekaServer** 和**@EnableAdminServer**标注,同时需要配置WebSecurity，<br>下面是配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        http.httpBasic()<br>                .and().authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/actuator/**&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and().csrf().disable();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="简易客户端的配置">简易客户端的配置</span></h2><p>下面是<strong>pom.xml</strong>文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example.actuator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>actuator-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>actuator-client<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR11<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">server:<br>  port: 9101<br>spring:<br>  application:<br>    name: demo-client<br>eureka:<br>  client:<br>    service-url:<br>      defaultZone: http://username:password@serverIp:serverPort/eureka/<br>    healthcheck:<br>      enabled: true<br>  instance:<br>    prefer-ip-address: true<br>management:<br>  endpoints:<br>    web:<br>      exposure:<br>        include: &quot;*&quot;<br>  endpoint:<br>    health:<br>      show-details: ALWAYS<br></code></pre></td></tr></table></figure><p>启动类需要增加**@EnableDiscoveryClient**标注。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;springcloud-eureka注册中心搭建&quot;&gt;SpringCloud eureka注册中心搭建&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 搭建eureka注册中心，并集成springboot-admin 监控&lt;br&gt;spring-b</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Swagger-ui 使用</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Swagger-ui%20%E4%BD%BF%E7%94%A8/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Swagger-ui%20%E4%BD%BF%E7%94%A8/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="swagger-ui-使用">Swagger-ui 使用</span></h1><!-- toc --><ul><li><a href="#%E5%BC%95%E5%85%A5%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96jar%E5%8C%85">引入相关依赖jar包</a></li><li><a href="#%E5%90%AF%E7%94%A8-swagger">启用 swagger</a></li><li><a href="#controller-%E6%B7%BB%E5%8A%A0%E6%8F%8F%E8%BF%B0%E4%BF%A1%E6%81%AF">Controller 添加描述信息</a></li><li><a href="#%E6%8E%A5%E5%8F%A3%E6%B7%BB%E5%8A%A0%E6%8F%8F%E8%BF%B0%E4%BF%A1%E6%81%AF">接口添加描述信息</a></li><li><a href="#%E7%BB%99%E5%AE%9E%E4%BD%93%E7%B1%BB%E6%B7%BB%E5%8A%A0%E6%8F%8F%E8%BF%B0%E4%BF%A1%E6%81%AF">给实体类添加描述信息</a></li></ul><!-- tocstop --><h2><span id="引入相关依赖jar包">引入相关依赖jar包</span></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2><span id="启用-swagger">启用 swagger</span></h2><p>下面是swagger-ui 配置样例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiKey;<br><span class="hljs-keyword">import</span> springfox.documentation.service.AuthorizationScope;<br><span class="hljs-keyword">import</span> springfox.documentation.service.SecurityReference;<br><span class="hljs-keyword">import</span> springfox.documentation.service.SecurityScheme;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: misery</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-04 16:26</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;swagger.enable:false&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> swagger2Enable;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">createRestApi</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())<br>                .enable(swagger2Enable)<br>                .groupName(<span class="hljs-string">&quot;所有&quot;</span>)<br>                .select()<br>                .apis(RequestHandlerSelectors.any())<br>                .paths(PathSelectors.any())<br>                .paths(PathSelectors.regex(<span class="hljs-string">&quot;(?!/error.*).*&quot;</span>))     <span class="hljs-comment">// 去除默认basicController</span><br>                .paths(PathSelectors.regex(<span class="hljs-string">&quot;(?!/actuator.*).*&quot;</span>))    <span class="hljs-comment">//去除actuator</span><br>                .build()<br>                .securityContexts(securityContext())<br>                .securitySchemes(security());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">appApi</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())<br>                .enable(swagger2Enable)<br>                .groupName(<span class="hljs-string">&quot;groupName&quot;</span>)<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.xxxx.xxx&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build()<br>                .securityContexts(securityContext())<br>                .securitySchemes(security());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<br>                .title(<span class="hljs-string">&quot;title&quot;</span>)<br>                .description(<span class="hljs-string">&quot;description&quot;</span>)<br>                .version(<span class="hljs-string">&quot;0.0.1&quot;</span>)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SecurityScheme&gt; <span class="hljs-title">security</span><span class="hljs-params">()</span> </span>&#123;<br>        SecurityScheme token = <span class="hljs-keyword">new</span> ApiKey(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;header&quot;</span>);<br>        List&lt;SecurityScheme&gt; securitySchemeList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        securitySchemeList.add(token);<br>        <span class="hljs-keyword">return</span> securitySchemeList;<br>    &#125;<br><br>    <span class="hljs-function">List&lt;SecurityReference&gt; <span class="hljs-title">defaultAuth</span><span class="hljs-params">()</span> </span>&#123;<br>        AuthorizationScope authorizationScope<br>                = <span class="hljs-keyword">new</span> AuthorizationScope(<span class="hljs-string">&quot;global&quot;</span>, <span class="hljs-string">&quot;accessEverything&quot;</span>);<br>        AuthorizationScope[] authorizationScopes = <span class="hljs-keyword">new</span> AuthorizationScope[<span class="hljs-number">1</span>];<br>        authorizationScopes[<span class="hljs-number">0</span>] = authorizationScope;<br>        List&lt;SecurityReference&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        lists.add(<span class="hljs-keyword">new</span> SecurityReference(<span class="hljs-string">&quot;token&quot;</span>, authorizationScopes));<br>        <span class="hljs-keyword">return</span> lists;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SecurityContext&gt; <span class="hljs-title">securityContext</span><span class="hljs-params">()</span> </span>&#123;<br>        SecurityContext securityContext = SecurityContext.builder()<br>                .securityReferences(defaultAuth())<br>                .build();<br>        List&lt;SecurityContext&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(securityContext);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="controller-添加描述信息">Controller 添加描述信息</span></h2><p>@Api 可以对Controller进行描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;xxx相关接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="接口添加描述信息">接口添加描述信息</span></h2><p>@ApiOperation 可以对接口进行描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GETMapping(&quot;/hi&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;xxxxx接口&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><em><strong>@ApiOperation 注解属性</strong></em></p><table><thead><tr><th>注解属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>接口说明</td></tr><tr><td>notes</td><td>String</td><td>接口发布说明</td></tr><tr><td>tags</td><td>Stirng[]</td><td>标签</td></tr><tr><td>response</td><td>Class&lt;?&gt;</td><td>接口返回类型</td></tr><tr><td>httpMethod</td><td>String</td><td>接口请求方式</td></tr></tbody></table></li><li><p><em><strong>@ApiIgnore</strong></em><br>  Swagger 文档不会显示拥有该注解的接口。</p></li><li><p><em><strong>@ApiImplicitParams</strong></em><br>  用于描述接口的非对象参数集。</p></li><li><p><em><strong>@ApiImplicitParam</strong></em><br>  用于描述接口的非对象参数，一般与 <em><strong>@ApiImplicitParams</strong></em> 组合使用</p></li></ul><table>    <tr>        <td rowspan="15">@ApiImplicitParam</td>    </tr>    <tr>        <td colspan="3">用在@ApiImplicitParams注解中，指定一个请求参数的各个方面</td>    </tr>    <tr>        <td>name</td>        <td colspan="2">参数名</td>    </tr>    <tr>       <td>value</td>        <td colspan="2">参数的汉字说明、解释</td>    </tr>    <tr>       <td>required</td>        <td colspan="2">参数是否必须传</td>    </tr>    <tr>       <td>dataType</td>       <td colspan="2">参数类型，默认String，其它值dataType="Integer"</td>    </tr>    <tr>       <td>defaultValue</td>        <td colspan="2">参数的默认值</td>    </tr>    <tr>       <td rowspan="8">paramType</td>   </tr>    <tr>       <td colspan="2">参数放在哪个地方</td>    </tr> <tr>       <td>header</td>        <td>请求参数的获取@RequestHeader</td> </tr> <tr>       <td>header</td>        <td>请求参数的获取@RequestHeader</td> </tr> <tr>       <td>query</td>        <td>请求参数的获取@RequestParam</td> </tr> <tr>       <td>path</td>        <td>请求参数的获取@PathVariable</td> </tr> <tr>       <td>body</td>        <td>请求参数的获取@RequestBody</td> </tr> <tr>       <td>form</td>        <td>普通表单提交</td> </tr></table><h2><span id="给实体类添加描述信息">给实体类添加描述信息</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(&quot;用户实体&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Entity</span> </span>&#123;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;用户 id&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>@ApiModelProperty 主要属性</li></ul><table><thead><tr><th>注解属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>字段说明</td></tr><tr><td>name</td><td>String</td><td>重写字段名称</td></tr><tr><td>dataType</td><td>Stirng</td><td>重写字段类型</td></tr><tr><td>required</td><td>boolean 是否必填</td><td></td></tr><tr><td>example</td><td>Stirng</td><td>举例说明</td></tr><tr><td>hidden</td><td>boolean</td><td>是否在文档中隐藏该字段</td></tr><tr><td>allowEmptyValue</td><td>boolean</td><td>是否允许为空</td></tr><tr><td>allowableValues</td><td>String</td><td>该字段允许的值，当我们 API 的某个参数为枚举类型时，使用这个属性就可以清楚地告诉 API 使用者该参数所能允许传入的值</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;swagger-ui-使用&quot;&gt;Swagger-ui 使用&lt;/span&gt;&lt;/h1&gt;&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%BC%95%E5%85%A5%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%9</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>fastjson的简单用法</title>
    <link href="https://mirsery.github.io/2021/07/12/java/fastjson%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/"/>
    <id>https://mirsery.github.io/2021/07/12/java/fastjson%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="fastjson的简单用法">fastjson的简单用法</span></h1><blockquote><p> 最近项目中接触到fastjson 随手记录下关于fastjson的使用</p></blockquote><!-- toc --><ul><li><a href="#%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96">导入依赖</a></li><li><a href="#json%E5%AD%97%E7%AC%A6%E4%B8%B2-%E7%B1%BB%E5%AE%9E%E4%BE%8B">JSON字符串 -&gt; 类实例</a><ul><li><a href="#%E7%AE%80%E5%8D%95json%E5%AD%97%E7%AC%A6%E4%B8%B2-java%E5%AF%B9%E8%B1%A1">简单json字符串 -&gt; java对象</a></li><li><a href="#%E7%AE%80%E5%8D%95json%E5%AD%97%E7%AC%A6%E4%B8%B2-json%E5%AF%B9%E8%B1%A1">简单json字符串 -&gt; Json对象</a></li><li><a href="#%E7%A8%8D%E5%A4%8D%E6%9D%82json%E5%AD%97%E7%AC%A6%E4%B8%B2-json%E5%AF%B9%E8%B1%A1">稍复杂json字符串 -&gt;Json对象</a></li><li><a href="#%E7%A8%8D%E5%A4%8D%E6%9D%82json%E5%AD%97%E7%AC%A6%E4%B8%B2-java%E5%AF%B9%E8%B1%A1">稍复杂json字符串 -&gt;Java对象</a></li></ul></li></ul><!-- tocstop --><h2><span id="导入依赖">导入依赖</span></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2><span id="json字符串-gt-类实例">JSON字符串 -&gt; 类实例</span></h2><h3><span id="简单json字符串-gt-java对象">简单json字符串 -&gt; java对象</span></h3><p>app.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( String[] args )</span></span><br><span class="hljs-function">    </span>&#123;<br>        String msg = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;java\&quot;,\&quot;sex\&quot;:\&quot;unknown\&quot;,\&quot;age\&quot;:24&#125;&quot;</span>;<br>        User user = JSON.parseObject(msg, User.class);<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@JSONField(name = &quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@JSONField(name = &quot;sex&quot;)</span><br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-meta">@JSONField(name = &quot;age&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span><span class="hljs-params">(String sex)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="简单json字符串-gt-json对象">简单json字符串 -&gt; Json对象</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String msg = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;java\&quot;,\&quot;sex\&quot;:\&quot;unknown\&quot;,\&quot;age\&quot;:24&#125;&quot;</span>;<br>JSONObject jsonObject = JSON.parseObject(msg);<br>System.out.println(jsonObject);<br></code></pre></td></tr></table></figure><h3><span id="稍复杂json字符串-gtjson对象">稍复杂json字符串 -&gt;Json对象</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String msg = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;java\&quot;,\&quot;sex\&quot;:\&quot;unknown\&quot;,\&quot;age\&quot;:24,\&quot;pets\&quot;:[&#123;\&quot;nick_name\&quot;:\&quot;coco\&quot;,\&quot;type\&quot;:\&quot;cat\&quot;&#125;,&#123;\&quot;nick_name\&quot;:\&quot;kimi\&quot;,\&quot;type\&quot;:\&quot;dog\&quot;&#125;]&#125;&quot;</span>;<br>  JSONObject jsonObject = JSON.parseObject(msg);<br></code></pre></td></tr></table></figure><h3><span id="稍复杂json字符串-gtjava对象">稍复杂json字符串 -&gt;Java对象</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( String[] args )</span></span><br><span class="hljs-function">   </span>&#123;<br>       String msg = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;java\&quot;,\&quot;sex\&quot;:\&quot;unknown\&quot;,\&quot;age\&quot;:24,\&quot;pets\&quot;:[&#123;\&quot;nick_name\&quot;:\&quot;coco\&quot;,\&quot;type\&quot;:\&quot;cat\&quot;&#125;,&#123;\&quot;nick_name\&quot;:\&quot;kimi\&quot;,\&quot;type\&quot;:\&quot;dog\&quot;&#125;]&#125;&quot;</span>;<br>       User user = JSON.parseObject(msg, <span class="hljs-keyword">new</span> TypeReference&lt;User&lt;Pet&gt;&gt;()&#123;&#125;);<br>       System.out.println(user);<br>   &#125;<br></code></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-meta">@JSONField(name = &quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@JSONField(name = &quot;sex&quot;)</span><br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-meta">@JSONField(name = &quot;age&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-meta">@JSONField(name = &quot;pets&quot;)</span><br>    <span class="hljs-keyword">private</span> T[] pets;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span><span class="hljs-params">(String sex)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T[] getPets() &#123;<br>        <span class="hljs-keyword">return</span> pets;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPets</span><span class="hljs-params">(T[] pets)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pets = pets;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Pet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span> </span>&#123;<br><br>    <span class="hljs-meta">@JSONField(name = &quot;nick_name&quot;)</span><br>    <span class="hljs-keyword">private</span> String nickName;<br><br>    <span class="hljs-meta">@JSONField(name = &quot;type&quot;)</span><br>    <span class="hljs-keyword">private</span> String type;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getNickName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> nickName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNickName</span><span class="hljs-params">(String nickName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.nickName = nickName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(String type)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.type = type;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;fastjson的简单用法&quot;&gt;fastjson的简单用法&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 最近项目中接触到fastjson 随手记录下关于fastjson的使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- toc --&gt;

&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="json" scheme="https://mirsery.github.io/tags/json/"/>
    
    <category term="fastjson" scheme="https://mirsery.github.io/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>RSA 算法加解密代码实现片段</title>
    <link href="https://mirsery.github.io/2021/07/12/java/java%20RSA%20%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>https://mirsery.github.io/2021/07/12/java/java%20RSA%20%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="rsa-算法加解密代码实现片段">RSA 算法加解密代码实现片段</span></h1><blockquote><p> 采用java</p></blockquote><!-- toc --><ul><li><a href="#%E7%A7%98%E9%92%A5%E7%94%9F%E6%88%90">秘钥生成</a></li><li><a href="#%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86">公钥加密</a></li><li><a href="#%E5%85%AC%E9%92%A5%E8%A7%A3%E5%AF%86">公钥解密</a></li><li><a href="#%E7%A7%81%E9%92%A5%E5%8A%A0%E5%AF%86">私钥加密</a></li><li><a href="#%E7%A7%81%E9%92%A5%E8%A7%A3%E5%AF%86">私钥解密</a></li></ul><!-- tocstop --><h2><span id="秘钥生成">秘钥生成</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initKey</span><span class="hljs-params">()</span> </span>&#123;<br>      KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>      keyPairGenerator.initialize(<span class="hljs-number">2048</span>);<span class="hljs-comment">//长度必须为64的倍数 512~65536 之间</span><br>      KeyPair keyPair = keyPairGenerator.generateKeyPair();<br>      RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic(); <span class="hljs-comment">//公钥</span><br>      RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();    <span class="hljs-comment">//私钥</span><br>  &#125;<br></code></pre></td></tr></table></figure><h2><span id="公钥加密">公钥加密</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] encryptByPublicKey(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key) <span class="hljs-keyword">throws</span> Exception &#123;<br>      KeyFactory keyFactory = KeyFactory.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>      X509EncodedKeySpec x509KeySpec = <span class="hljs-keyword">new</span> X509EncodedKeySpec(key);<br>      PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);<br>      Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());<br>      cipher.init(Cipher.ENCRYPT_MODE, pubKey);<br>      <span class="hljs-keyword">return</span> cipher.doFinal(data);<br>  &#125;<br></code></pre></td></tr></table></figure><h2><span id="公钥解密">公钥解密</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] decryptByPublicKey(<span class="hljs-keyword">byte</span>[] data) <span class="hljs-keyword">throws</span> Exception &#123;<br>       ByteArrayOutputStream out = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>       KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);<br>       X509EncodedKeySpec x509KeySpec = <span class="hljs-keyword">new</span> X509EncodedKeySpec(Base64.getDecoder().decode(publicKey.trim()));<br>       PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);<br>       Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());<br>       cipher.init(Cipher.DECRYPT_MODE, pubKey);<br>       <span class="hljs-keyword">int</span> inputLen = data.length;<br>       <span class="hljs-keyword">int</span> offSet = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">byte</span>[] cache;<br>       <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span> (inputLen - offSet &gt; <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">if</span> (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) &#123;<br>               cache = cipher.doFinal(data, offSet, MAX_DECRYPT_BLOCK);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               cache = cipher.doFinal(data, offSet, inputLen - offSet);<br>           &#125;<br>           out.write(cache, <span class="hljs-number">0</span>, cache.length);<br>           i++;<br>           offSet = i * MAX_DECRYPT_BLOCK;<br>       &#125;<br>       out.close();<br>       <span class="hljs-keyword">return</span> out.toByteArray();<br>   &#125;<br></code></pre></td></tr></table></figure><h2><span id="私钥加密">私钥加密</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] encryptByPrivateKey(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key) <span class="hljs-keyword">throws</span> Exception &#123;<br>        ByteArrayOutputStream out = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        PKCS8EncodedKeySpec pkcs8KeySpec = <span class="hljs-keyword">new</span> PKCS8EncodedKeySpec(key);<br>        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);<br>        PrivateKey privateKey = keyFactory.generatePrivate(pkcs8KeySpec);<br>        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());<br>        cipher.init(Cipher.ENCRYPT_MODE, privateKey);<br>        <span class="hljs-keyword">int</span> inputLen = data.length;<br>        <span class="hljs-keyword">int</span> offSet = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span>[] cache;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (inputLen - offSet &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) &#123;<br>                cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cache = cipher.doFinal(data, offSet, inputLen - offSet);<br>            &#125;<br>            out.write(cache, <span class="hljs-number">0</span>, cache.length);<br>            i++;<br>            offSet = i * MAX_ENCRYPT_BLOCK;<br>        &#125;<br>        out.close();<br>        <span class="hljs-keyword">return</span> out.toByteArray();<br>    &#125;<br></code></pre></td></tr></table></figure><h2><span id="私钥解密">私钥解密</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] decryptByPrivateKey(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key) <span class="hljs-keyword">throws</span> Exception &#123;<br>        PKCS8EncodedKeySpec pkcs8KeySpec = <span class="hljs-keyword">new</span> PKCS8EncodedKeySpec(key);<br>        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);<br>        PrivateKey privateKey = keyFactory.generatePrivate(pkcs8KeySpec);<br>        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());<br>        cipher.init(Cipher.DECRYPT_MODE, privateKey);<br>        <span class="hljs-keyword">return</span> cipher.doFinal(data);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;rsa-算法加解密代码实现片段&quot;&gt;RSA 算法加解密代码实现片段&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 采用java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%A7%</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="rsa" scheme="https://mirsery.github.io/tags/rsa/"/>
    
    <category term="加密" scheme="https://mirsery.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>java Annotation示例</title>
    <link href="https://mirsery.github.io/2021/07/12/java/java%20annotation%E4%BE%8B%E5%AD%90%E4%BB%A5%E5%8F%8A%E8%A7%A3%E9%87%8A/"/>
    <id>https://mirsery.github.io/2021/07/12/java/java%20annotation%E4%BE%8B%E5%AD%90%E4%BB%A5%E5%8F%8A%E8%A7%A3%E9%87%8A/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="annotation">Annotation</span></h1><p>From Core Java SE9 for the Impatient<br>Annotations are tags that you insert into your source code so that some tool can process them. The tools can operate on the source level, or they can process class files into which the compiler has placed annotations.<br>Annotations do not change the way your programs are compiled. The Java compiler generates the same virtual machine instructions with or without the annotations.<br>To benefit from annotations, you need to select a processing tool and use annotations that your processing tool understands, before you can apply that tool to your code.<br>There is a wide range of uses for annotations. For example, JUnit uses annotations to mark methods that execute tests and to specify how the tests should be run. The Java Persistence Architecture uses annotations to define mappings between classes and database tables, so that objects can be persisted automatically without the developer having to write SQL queries.</p><!-- toc --><ul><li><a href="#using-annotations">using Annotations</a><ul><li><a href="#simple-annotation">simple annotation</a></li><li><a href="#annotation-elements">annotation elements</a></li><li><a href="#multilple-and-repeated-annotations">Multilple and Repeated Annotations</a></li><li><a href="#annotating-declarations">Annotating Declarations</a></li><li><a href="#annotating-type-users">Annotating Type Users</a></li><li><a href="#making-receivers-explicit">Making Receivers Explicit</a></li></ul></li><li><a href="#defineing-annotations">defineing Annotations</a></li><li><a href="#annotations-for-compilation">Annotations for Compilation</a></li><li><a href="#annotations-for-managing-resources">Annotations for Managing Resources</a></li></ul><!-- tocstop --><h2><span id="using-annotations">using Annotations</span></h2><h3><span id="simple-annotation">simple annotation</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheTest</span> </span>&#123;<br>    ...<br>    <span class="hljs-meta">@Test</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkRandomInsertions</span><span class="hljs-params">()</span></span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><h3><span id="annotation-elements">annotation elements</span></h3><p>Annotation can hava key/value pairs called elements,such as<br>@Test(timeout=10000)<br>An annotation element is one of the following:<br>• A primitive type value<br>• A String<br>• A Class object<br>• An instance of an enum<br>• An annotation<br>• An array of the preceding (but not an array of arrays)</p><h3><span id="multilple-and-repeated-annotations">Multilple and Repeated Annotations</span></h3><p>An item can have multiple annotations:<br>@Test<br>@BugReport(showStopper=true,reportedBy=”Joe”)<br>public void checkRandomInsertions( )<br>If the author of an annotation declared it to be repeatable, you can repeat the same annotation multiple times:<br>@BugReport(showStopper=true, reportedBy=”Joe”)<br>@BugReport(reportedBy={“Harry”, “Carl”})<br>public void checkRandomInsertions()</p><h3><span id="annotating-declarations">Annotating Declarations</span></h3><p>They fail into two categories : <code>declarations</code> and <code> type uses</code>.Declaration annotations can appear at the declarations of  </p><ul><li>Classes(including enum) and interfaces (including annotation interfaces)</li><li>Methods</li><li>Constructors</li><li>Instance variable (including enum constants)</li><li>Local variables (including those deckared in for and try-with-resources statements)</li><li>Parameter variables and catch clasuse parameters</li><li>Type parameters</li><li>Packages<h3><span id="annotating-type-users">Annotating Type Users</span></h3>A declaration annotation provides some information about the item being declared.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> String userId)</span></span><br></code></pre></td></tr></table></figure>It is arrerted that userId parameter is not null.<h3><span id="making-receivers-explicit">Making Receivers Explicit</span></h3>Suppose you want to annotate parameters that are not being mutated by a method.</li></ul><h2><span id="defineing-annotations">defineing Annotations</span></h2><p>@Target(ElementType.METHOD)<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface Test {<br>    long timeout();<br>    …<br>}<br>The @interface declaration creates an actual Java interface. Tools that process annotations receive objects that implement the annotation interface. When the JUnit test runner tool gets an object that implements Test, it simply invokes the timeout method to retrieve the timeout element of a particular Test annotation.</p><h2><span id="annotations-for-compilation">Annotations for Compilation</span></h2><p>The @Deprecated annotation can be attached to any items whose use is no longer encouraged. The compiler will warn when you use a deprecated item. This annotation has the same role as the @deprecated Javadoc tag. However, the annotation persists until runtime.</p><h2><span id="annotations-for-managing-resources">Annotations for Managing Resources</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">@Resource(name=&quot;jdbc/employeedb&quot;)<br>private DataSource source;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;annotation&quot;&gt;Annotation&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;From Core Java SE9 for the Impatient&lt;br&gt;Annotations are tags that you insert into your so</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="annotation" scheme="https://mirsery.github.io/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>java 中面向切面的Aop 解析</title>
    <link href="https://mirsery.github.io/2021/07/12/java/java%E4%B8%AD%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2aop%E8%A7%A3%E6%9E%90/"/>
    <id>https://mirsery.github.io/2021/07/12/java/java%E4%B8%AD%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2aop%E8%A7%A3%E6%9E%90/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="aop-解析">Aop 解析</span></h1><blockquote><p> 了解aop协议</p></blockquote><!-- toc --><ul><li><a href="#%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%9A%84aop">实现简易的Aop</a></li></ul><!-- tocstop --><p>AOP（面向切面编程）是Spring框架的特色功能之一。通过设置横切关注点（cross cutting concerns），AOP提供了极高的扩展性。</p><h2><span id="实现简易的aop">实现简易的Aop</span></h2><ol><li>定义一个 需要被代理的接口，并实现接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Job</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doWork</span><span class="hljs-params">(String msg)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Work</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Job</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doWork</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;[do-work] &quot;</span> + msg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>实现InvocationHandler接口并创建代理方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Object o;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WorkHandler</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.o = o;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        method.invoke(o, args);<br>        System.out.println(<span class="hljs-string">&quot;[proxy-invoke]&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>场景测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkMain</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Job work = <span class="hljs-keyword">new</span> Work();<br>        WorkHandler workHandler = <span class="hljs-keyword">new</span> WorkHandler(work);<br>        Job job = (Job) Proxy.newProxyInstance(work.getClass().getClassLoader(),<br>                work.getClass().getInterfaces(),workHandler);<br>        System.out.println(job.doWork(<span class="hljs-string">&quot;hahahah&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;aop-解析&quot;&gt;Aop 解析&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 了解aop协议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%AE%9E%E7%8E%B0%E7%AE</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="aop" scheme="https://mirsery.github.io/tags/aop/"/>
    
  </entry>
  
  <entry>
    <title>java发起http请求</title>
    <link href="https://mirsery.github.io/2021/07/12/java/java%E5%8F%91%E8%B5%B7http%E8%AF%B7%E6%B1%82/"/>
    <id>https://mirsery.github.io/2021/07/12/java/java%E5%8F%91%E8%B5%B7http%E8%AF%B7%E6%B1%82/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="在java中利用jdk提供的方法我们可以很轻松的发起一个http请求">在java中利用jdk提供的方法我们可以很轻松的发起一个http请求。</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">URL  realURL = <span class="hljs-keyword">new</span> URL(url);  <span class="hljs-comment">//java.net.URL</span><br>URLConnection conn = realURL.openConnection( );<br><span class="hljs-comment">//设置请求头</span><br>connection.setRequestProperties(<span class="hljs-string">&quot;accept&quot;</span>,<span class="hljs-string">&quot;*/*&quot;</span>);<br>conn.setRequestProperty(<span class="hljs-string">&quot;connection&quot;</span>, <span class="hljs-string">&quot;Keep-Alive&quot;</span>);<br>conn.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>conn.setRequestProperty(<span class="hljs-string">&quot;user-agent&quot;</span>,<span class="hljs-string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);<br><span class="hljs-comment">// 发送POST请求必须设置如下两行</span><br>conn.setDoOutput(<span class="hljs-keyword">true</span>);<br>conn.setDoInput(<span class="hljs-keyword">true</span>);<br> <span class="hljs-comment">// 获取URLConnection对象对应的输出流</span><br>out = <span class="hljs-keyword">new</span> PrintWriter(conn.getOutputStream());<br><span class="hljs-comment">// 发送请求参数</span><br>out.print(param);<br>out.flush();<br>BufferedReader in = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(conn.getInputStream()));<br>String line;<br>String result;<br><span class="hljs-keyword">while</span> ((line = in.readLine()) != <span class="hljs-keyword">null</span>) &#123;result += line;&#125;<br></code></pre></td></tr></table></figure><h2><span id="发起一个post请求">发起一个post请求</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">OkHttpClient client = <span class="hljs-keyword">new</span> OkHttpClient.Builder().<br>    connectTimeout(<span class="hljs-number">10</span>, TimeUnit.SECONDS).<br>    readTimeout(<span class="hljs-number">20</span>, TimeUnit.SECONDS).build(); <span class="hljs-comment">//超时时间设置</span><br>MediaType mediaType = MediaType.parse(<span class="hljs-string">&quot;application/json&quot;</span>);<br>    String url = <span class="hljs-string">&quot;request_url&quot;</span>;<br>okhttp3.RequestBody requestBody=okhttp3.RequestBody.<br>    create(message, mediaType);<br>Request request = <span class="hljs-keyword">new</span> Request.Builder().url(url).post(requestBody).<br>addHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>).<br>    addHeader(<span class="hljs-string">&quot;header&quot;</span>, key).build();<br><span class="hljs-keyword">try</span> &#123;<br>        Response response = client.newCall(request).execute();<br>        response.body().string();<br> &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br> &#125;   <br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;在java中利用jdk提供的方法我们可以很轻松的发起一个http请求&quot;&gt;在java中利用jdk提供的方法我们可以很轻松的发起一个http请求。&lt;/span&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="http" scheme="https://mirsery.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>mybatis插入数据后返回自增主键id</title>
    <link href="https://mirsery.github.io/2021/07/12/java/mybatis%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E8%BF%94%E5%9B%9E%E4%B8%BB%E9%94%AE/"/>
    <id>https://mirsery.github.io/2021/07/12/java/mybatis%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E8%BF%94%E5%9B%9E%E4%B8%BB%E9%94%AE/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="mybatis-插入数据后返回自增主键id">[mybatis] 插入数据后返回自增主键id</span></h1><h2><span id="xml映射">xml映射</span></h2><p>在xml中定义<strong>useGeneratedKeys</strong>为true,返回主键id的值,<strong>keyProperty</strong>和<strong>keyColumn</strong>分别代表数据库记录主键字段和java对象成员属性名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- 插入数据:返回记录主键id值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-attr">keyColumn</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert  into stu (name,age) values (#&#123;name&#125;,#&#123;age&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h2><span id="接口映射器">接口映射器</span></h2><p>在接口映射器中通过注解@Options分别设置参数useGeneratedKeys，keyProperty，keyColumn值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 返回主键字段id值</span><br><span class="hljs-meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;, keyColumn = &quot;id&quot;)</span><br><span class="hljs-meta">@Insert(&quot;insert  into stu (name,age) values (#&#123;name&#125;,#&#123;age&#125;)&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Student stu)</span></span>;<br></code></pre></td></tr></table></figure><h2><span id="获取新添加记录主键字段值">获取新添加记录主键字段值</span></h2><p>需要注意的是，在MyBatis中添加操作返回的是记录数并非记录主键id。因此，如果需要获取新添加记录的主键值，需要在执行添加操作之后，直接读取Java对象的主键属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer rows = sqlSession.getMapper(StuMapper.class).insertOneTest(student);<br>System.out.println(<span class="hljs-string">&quot;rows = &quot;</span> + rows); <span class="hljs-comment">// 添加操作返回记录数</span><br>System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + student.getId()); <span class="hljs-comment">// 执行添加操作之后通过Java对象获取主键属性值</span><br></code></pre></td></tr></table></figure><h2><span id="添加批量记录时返回主键id">添加批量记录时返回主键ID</span></h2><p>如果希望执行批量添加并返回各记录主键字段值，只能在xml映射器中实现，在接口映射器中无法做到。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 批量添加数据,并返回主键字段 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert  into stu (name,age) values<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;t&quot;</span>&gt;</span><br>            (#&#123;t.name&#125;,#&#123;t.age&#125;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到,执行批量添加并返回记录主键值的xml映射器配置,跟添加单条记录时是一致的. 不同的地方仅仅是使用了foreach元素构建批量添加语句.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;mybatis-插入数据后返回自增主键id&quot;&gt;[mybatis] 插入数据后返回自增主键id&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;xml映射&quot;&gt;xml映射&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;在xml中定义&lt;strong&gt;useGenerated</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="mybatis" scheme="https://mirsery.github.io/tags/mybatis/"/>
    
    <category term="sql" scheme="https://mirsery.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>netty框架获取websocket协议客户端的真实IP地址问题</title>
    <link href="https://mirsery.github.io/2021/07/12/java/netty%E6%A1%86%E6%9E%B6%E4%B8%AD%E8%8E%B7%E5%8F%96websocket%E5%8D%87%E7%BA%A7%E5%8D%8F%E8%AE%AE%E5%89%8D%E7%9A%84http%20header/"/>
    <id>https://mirsery.github.io/2021/07/12/java/netty%E6%A1%86%E6%9E%B6%E4%B8%AD%E8%8E%B7%E5%8F%96websocket%E5%8D%87%E7%BA%A7%E5%8D%8F%E8%AE%AE%E5%89%8D%E7%9A%84http%20header/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="netty框架获取websocket协议客户端的真实ip地址问题">netty框架获取websocket协议客户端的真实IP地址问题</span></h1><blockquote><p> 背景 目前服务器采用nginx进行反向代理部署，利用socketchannel获取的socketAddress为代理服务器的局域网ip</p></blockquote><h2><span id="代理服务器的配置">代理服务器的配置</span></h2><p>首先代理服务器需将真实的ip地址转发到反向代理的服务上，因此代理服务器需增加代理的请求头。下面是nginx作为代理服务器的样例配置项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">server &#123;<br>    listen xx;<br>    location / &#123;<br>                client_max_body_size 0;<br>                proxy_redirect http://$host/ http://$http_host/;<br>                proxy_set_header Host $host:$server_port;<br>                proxy_set_header X-Real-IP $remote_addr;<br>                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>                proxy_pass http://xxxxxx:xxxx;<br>                proxy_http_version 1.1;<br>                proxy_set_header Upgrade $http_upgrade;<br>                proxy_set_header Connection &#x27;upgrade&#x27;;<br>                proxy_read_timeout 600s;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中** proxy_set_header X-Real-IP $remote_addr;**将真实的客户端ip转发给代理服务中。</p><p>##netty框架中获取传递的<strong>X-Real-IP</strong>请求头地址<br>netty中需要在协议升级之前读取channel的请求头的内容，下面是实例代码。</p><blockquote><p> 该handler需配置在<strong>WebSocketServerProtocolHandler</strong>之前<strong>ChannelInboundHandlerAdapter</strong>不会修改Bytebuf的引用计数问题，详情见<a href="./bytebuf-yin-yong-ji-shu-wen-ti"># ByteBuf 引用计数问题</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpHeadersHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ChannelInboundHandlerAdapter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String REAL_IP = <span class="hljs-string">&quot;X-Real-IP&quot;</span>;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IotClientManager clientManager;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-keyword">if</span> (msg <span class="hljs-keyword">instanceof</span> FullHttpRequest) &#123;<br>            FullHttpRequest httpRequest = (FullHttpRequest) msg;<br>            HttpHeaders headers = httpRequest.headers();<br>            String ip = headers.get(REAL_IP);<br>            <span class="hljs-keyword">if</span> (ip != <span class="hljs-keyword">null</span>) &#123;<br>                clientManager.setIP(ctx.channel(), ip);<br>            &#125;<br>        &#125;<br>        ctx.fireChannelRead(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;netty框架获取websocket协议客户端的真实ip地址问题&quot;&gt;netty框架获取websocket协议客户端的真实IP地址问题&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 背景 目前服务器采用nginx进行反向代理部署，利用socke</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="netty" scheme="https://mirsery.github.io/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 中干掉if else</title>
    <link href="https://mirsery.github.io/2021/07/12/java/springBoot%E4%B8%AD%E6%9B%BF%E6%8D%A2if-else/"/>
    <id>https://mirsery.github.io/2021/07/12/java/springBoot%E4%B8%AD%E6%9B%BF%E6%8D%A2if-else/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="springboot-中干掉if-else">Springboot 中干掉if else</span></h1><blockquote><p> 来自：掘金（作者：cipher）<br>原文链接 <a href="https://juejin.im/post/5c551122e51d457fcc5a9790">https://juejin.im/post/5c551122e51d457fcc5a9790</a></p></blockquote><h2><span id="需求">需求</span></h2><p>这里虚拟一个业务需求，让大家容易理解。假设有一个订单系统，里面的一个功能是根据订单的不同类型作出不同的处理。<br>订单实体:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderDTO</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String code;<br>    <span class="hljs-keyword">private</span> BigDecimal price;<br>    <span class="hljs-keyword">private</span> String type;  <br>&#125;<br></code></pre></td></tr></table></figure><p>service接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IOrderService</span> </span>&#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">            * 根据订单的不同类型做出不同的处理</span><br><span class="hljs-comment">            * <span class="hljs-doctag">@param</span> dto 订单实体</span><br><span class="hljs-comment">            * <span class="hljs-doctag">@return</span> </span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-function">String <span class="hljs-title">handle</span><span class="hljs-params">(OrderDTO dto)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>##传统实现<br>根据订单类写一堆的if-else:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IOrderService</span> </span>&#123;<br>    String type = dto.getType();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(type))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;处理普通订单&quot;</span>;<br>        &#125;<span class="hljs-function">elese <span class="hljs-title">if</span><span class="hljs-params">(<span class="hljs-string">&quot;2&quot;</span>.equals(type)</span>)</span>&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;处理团购订单&quot;</span>;<br>       &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;3&quot;</span>.equals(type))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;处理促销订单&quot;</span>;<br>      &#125;                <br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="策略模式实现">策略模式实现</span></h2><p>利用策略模式只需要实现两行可实现业务逻辑:<br>@Service<br>public class OrderServiceV2Impl implements IOrderService {<br>    @Autowrited<br>    private HandlerContext handlerContext;</p><pre><code>@Overridepublic String handle(OrderDTO dto)&#123;    AbstractHandler handler = handlerContext.getInstance(dto.getType());    return handler.handle(dto);</code></pre><p>   }<br>}<br>可以看到上面的方法中注入了HandlerContext，这是一个处理器上下文，用来保存不同的业务处理器，具体在下文会讲解。我们从中获取一个抽象的处理器AbstractHandler，调用其方法实现业务逻辑。<br>现在可以了解到，我们主要的业务逻辑是在处理器中实现的，因此有多少个订单类型，就对应有多少个处理器。以后需求变化，增加了订单类型，只需要添加相应的处理器就可以，上述OrderServiceV2Impl完全不需改动。</p><hr><p>以上是转自网友 cipher 的文章,今天突然发现springboot可以注入同一接口实现的services集合就想到可以利用其value属性实现策略模式.<br>修改时间 2021-01-06 23:51:58</p><pre><code>其实在springboot中实现策略模式，我们可以利用springboot本身提供的@service 注解以及其 同一接口的实现的Map注入就可以解决。下面简单的举个例子。</code></pre><p>首先我们先定一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DataListener</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onData</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着定义几个实现该接口的类 DataListener1, DataListener2.<br>我们在实现的类DataListener1…上增加@service注解，同时给他命名（其默认名可以为字符串类型的策略），接着我们定义一个场景类<strong>DataHandleContext</strong>,<br>场景类中引入如下变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowrite</span><br><span class="hljs-keyword">public</span> Map&lt;String,DataListener&gt; dataListenerMap;<span class="hljs-comment">//该类是所定义的策略的map集合</span><br></code></pre></td></tr></table></figure><p>至此，我们就很简单的实现了策略模式。策略的命名可以采用枚举类进行控制，这样新增策略时只需要在枚举类中新增相应的枚举类型以及新建相关的service层类。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;springboot-中干掉if-else&quot;&gt;Springboot 中干掉if else&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 来自：掘金（作者：cipher）&lt;br&gt;原文链接 &lt;a href=&quot;https://juejin.im/p</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="转载" scheme="https://mirsery.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springCloud 常见配置</title>
    <link href="https://mirsery.github.io/2021/07/12/java/springCloud%E9%85%8D%E7%BD%AE/"/>
    <id>https://mirsery.github.io/2021/07/12/java/springCloud%E9%85%8D%E7%BD%AE/</id>
    <published>2021-07-12T05:52:47.939Z</published>
    <updated>2021-07-12T05:52:47.939Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="springcloud-常见配置">springCloud 常见配置</span></h1><h2><span id="服务注册类配置">服务注册类配置</span></h2><p>前缀 eureka.client</p><blockquote><p> org.springframework.cloud.netflix.eureka.EurekaClientConfigBean 中定义了常用的配置以及对应的说明和默认值。<br>|参数名|说明|默认值|<br>|:—:|:—:|:—:|<br>enable|应用Eureka客户端|true|<br>registryFetchIntervalSeconds|从Eureka服务端获取注册信息的时间间隔，单位为秒|30<br>instanceInfoReplicationIntervalSeconds|更新实例信息的变化到Eureka服务端的时间间隔时间，单位为秒|30<br>initialInstanceInfoReplicationIntervalSeconds|初始化实例信息到Eureka服务端的时间间隔时间，单位为秒|40<br>eurekaServiceUrlPollIntervalSeconds|轮询Eureka服务端地址更改的时间间隔，单位为秒，当我们与springCloud Config配合，动态刷新Eureka的serviceURL地址时需要关注该需求|300<br>eurekaServerReadTimeoutSeconds|读取Eureka Server信息的超时时间，单位秒|8<br>eurekaServerConnectTimeoutSeconds|连接Eureka Server信息的超时时间，单位秒|5<br>eurekaServerTotalConnections|从Eureka客户端到所有Eureka服务端的连接总数|200<br>eurekaServerTotalConnectionPerlist|从Eureka客户端到每个Eureka服务端主机的连接总数|50<br>eurekaConnection sss</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;springcloud-常见配置&quot;&gt;springCloud 常见配置&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;服务注册类配置&quot;&gt;服务注册类配置&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;前缀 eureka.client&lt;/p&gt;
&lt;blockquote&gt;
&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
</feed>
