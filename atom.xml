<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mirsery</title>
  
  
  <link href="https://mirsery.github.io/atom.xml" rel="self"/>
  
  <link href="https://mirsery.github.io/"/>
  <updated>2021-07-12T02:55:16.537Z</updated>
  <id>https://mirsery.github.io/</id>
  
  <author>
    <name>mirsery</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ByteBuffer详解</title>
    <link href="https://mirsery.github.io/2021/07/12/java/ByteBuffer%20%E8%AF%A6%E8%A7%A3/"/>
    <id>https://mirsery.github.io/2021/07/12/java/ByteBuffer%20%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="bytebuffer详解">ByteBuffer详解</span></h1><blockquote><p>参考了开源中国上<a href="https://my.oschina.net/talenttan/home">talent-tan</a>的一篇博客 <a href="https://my.oschina.net/talenttan/blog/889887">图解bytebuffer</a></p></blockquote><hr><p>java.nio.ByteBuffer</p><ul><li>byte get( )<br>  从当前位置获得一个字节，并将当前位置移动到下一个字节。</li><li>byte get(int index)<br>  从指定索引处获得一个字节。</li><li>ByteBuffer put(byte b)<br>  向当前位置推入一个字节，并将当前位置移动到下一个字节。返回对缓冲区的引用。</li><li>ByteBuffer put(int index,byte b)<br>  向指定索引处推入一个字节，返回对这个缓冲区的引用。</li><li>ByteBuffer get(byte[] destination)</li><li>ByteBuffer get(byte[] destination,int offset ,int length)<br>   用缓冲区中的字节来填充字节数组，或者字节数组的某个区域，并将当前位置向前移动读入的字节数个位置。<br>  如果缓冲区不够大就不会读入任何字节，并抛出BufferUnderflow Exception。返回对这个缓冲区的引用。<br>  参数: destination     要填充的字节数组<pre><code>           offset              要填充区域的偏移量            length              要填充区域的长度</code></pre></li><li>Xxx getXxx()</li><li>Xxx getXxx(int index)</li><li>ByteBuffer putXxx(xxx value)</li><li>ByteBuffer putXxx(int value,xxx value)<br>  获得或放置一个二进制数。Xxx是Int、Long、Short、Char、Float或者Double中的一个。</li><li>ByteBuffer order(ByteOrder order)</li><li>ByteBuffer order(order)<br>  设置获得字节顺序，order是ByteOrder类的常量BIG_ENDLAN或者LITTLE_ENDIAN中的一个。</li><li>static ByteBuffer allcate(int capacity)<br> 构建具有指定容量的缓冲区，该缓冲区是对给定数组的包装。</li><li>CharBuffer asCharBuffer ( )<br>  构建字符缓冲区，它是对缓冲区的包装。对该字符缓冲区的变更将在这个缓冲区中反映出来，但是该字符缓冲区<br>  有自己的位置、界限和标记。</li></ul><hr><p>java.nio.CharBuffer</p><ul><li>char get()</li><li>CharBuffer get(char[] destination)</li><li>CharBuffer get(char[] destination,int offset,int length)<br>  从这个缓冲区的当前位置开始，获取一个char值，或者一个范围内的所有char值，<br>  然后将位置向前移动越过所有读入的字符。最后两个方法将返回this。</li><li>CharBuffer put(char c)</li><li>CharBuffer put(char[] source)</li><li>CharBuffer put(char[] source,int offset,int length)</li><li>CharBuffer put(String source)</li><li>CharBuffer put(CharBuffer source)<br>从这个缓冲区的当前位置开始，放置一个char值，或者一个范围内的所有char值，然后将位置向前移动越过所有被<br>写出的字符。当放置的值是从CharBuffer读入时，将读入剩下所有剩余字符。所有方法返回this。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;bytebuffer详解&quot;&gt;ByteBuffer详解&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;参考了开源中国上&lt;a href=&quot;https://my.oschina.net/talenttan/home&quot;&gt;talent-tan&lt;/a&gt;的一</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="ByteBuffer" scheme="https://mirsery.github.io/tags/ByteBuffer/"/>
    
    <category term="netty" scheme="https://mirsery.github.io/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>ByteBuf 引用计数问题</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Bytebuf%20%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Bytebuf%20%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="bytebuf-引用计数问题">ByteBuf 引用计数问题</span></h1><blockquote><p> netty框架使用过程中关于ByteBuf 的处理<br>SImpleChannelInbound 会release ByteBuf，ChannelInboundHandlerAdapter 不会影响ByteBuf的引用计数</p></blockquote><!-- toc --><ul><li><a href="#%E9%87%87%E7%94%A8%E5%B0%BE%E5%9B%9E%E6%94%B6%E8%87%AA%E5%8A%A8%E9%87%8A%E6%94%BE">采用尾回收自动释放</a></li><li><a href="#%E6%89%8B%E5%8A%A8%E9%87%8A%E6%94%BE">手动释放</a></li></ul><!-- tocstop --><p>下面是使用<strong>EmbeddedChannel</strong>来演示ByteBuf引用计数回收的示例</p><h2><span id="采用尾回收自动释放">采用尾回收自动释放</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">EmbeddedChannel embeddedChannel = <span class="hljs-keyword">new</span> EmbeddedChannel();<br>embeddedChannel.pipeline().addLast(<span class="hljs-keyword">new</span> MyInBound());<br>ByteBuf buf = Unpooled.buffer();<br>buf.writeBytes(<span class="hljs-string">&quot;hello world!&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>embeddedChannel.writeInbound(buf);<br>System.out.println(<span class="hljs-string">&quot;The buf refCnt is &quot;</span> + buf.refCnt());<br><span class="hljs-keyword">try</span> &#123;<br>    Thread.sleep(<span class="hljs-number">10</span> * <span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInBound</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ChannelInboundHandlerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;my inbound===&quot;</span>);<br>        ByteBuf byteBuf = (ByteBuf) msg;<br>        System.out.println(byteBuf.slice().toString(CharsetUtil.UTF_8));<br>        ctx.fireChannelRead(byteBuf);<span class="hljs-comment">//must pass Bytebuf 才能出发尾引用计数回收</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="手动释放">手动释放</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInBound</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ChannelInboundHandlerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;my inbound===&quot;</span>);<br>        ByteBuf byteBuf = (ByteBuf) msg;<br>        System.out.println(byteBuf.slice().toString(CharsetUtil.UTF_8));<br>        byteBuf.release();<br>...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p> netty自带的编码器处理了ByteBuf的引用释放问题 例如：StringDecoder.class</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;bytebuf-引用计数问题&quot;&gt;ByteBuf 引用计数问题&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; netty框架使用过程中关于ByteBuf 的处理&lt;br&gt;SImpleChannelInbound 会release ByteBuf，</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="netty" scheme="https://mirsery.github.io/tags/netty/"/>
    
    <category term="ByteBuf" scheme="https://mirsery.github.io/tags/ByteBuf/"/>
    
  </entry>
  
  <entry>
    <title>NIO SelectionKey 类解析</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Java%20NIO%20SelectionKey/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Java%20NIO%20SelectionKey/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="nio-selectionkey-类解析">NIO SelectionKey 类解析</span></h1><blockquote><p> A token representing the registration of a SelectableChannel with a Selector.</p></blockquote><!-- toc --><ul><li><a href="#selectionkey%E7%B1%BB%E8%A7%A3%E9%87%8A%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%B3%95">SelectionKey类解释以及用法</a></li><li><a href="#%E5%8F%98%E9%87%8F">变量</a><ul><li><a href="#op_accept-1-4"><strong>OP_ACCEPT</strong> 1 &lt;&lt; 4</a></li><li><a href="#op_connect-1-3"><strong>OP_CONNECT</strong> 1 &lt;&lt; 3</a></li><li><a href="#op_read-1-0"><strong>OP_READ</strong> 1 &lt;&lt; 0</a></li><li><a href="#op_write-1-2"><strong>OP_WRITE</strong> 1 &lt;&lt; 2</a></li></ul></li><li><a href="#%E6%96%B9%E6%B3%95">方法</a><ul><li><a href="#public-abstract-selectablechannel-channel"><strong>public abstract SelectableChannel channel()</strong></a></li></ul></li></ul><!-- tocstop --><h2><span id="selectionkey类解释以及用法">SelectionKey类解释以及用法</span></h2><p><img src="./_image/2021/969959BD-AB3E-4F9B-9133-ACDF5C67AEF6.png"><br>以下是 <strong>javadoc</strong> 对 <strong>SelectionKey</strong> 的解释：<br>A token representing the registration of a SelectableChannel with a Selector.</p><p>A selection key is created each time a channel is registered with a selector. A key remains valid until it is cancelled by invoking its cancel method, by closing its channel, or by closing its selector. Cancelling a key does not immediately remove it from its selector; it is instead added to the selector’s cancelled-key set for removal during the next selection operation. The validity of a key may be tested by invoking its isValid method.</p><p>A selection key contains two operation sets represented as integer values. Each bit of an operation set denotes a category of selectable operations that are supported by the key’s channel.</p><p>The interest set determines which operation categories will be tested for readiness the next time one of the selector’s selection methods is invoked. The interest set is initialized with the value given when the key is created; it may later be changed via the interestOps(int) method.</p><p>The ready set identifies the operation categories for which the key’s channel has been detected to be ready by the key’s selector. The ready set is initialized to zero when the key is created; it may later be updated by the selector during a selection operation, but it cannot be updated directly.</p><p>That a selection key’s ready set indicates that its channel is ready for some operation category is a hint, but not a guarantee, that an operation in such a category may be performed by a thread without causing the thread to block. A ready set is most likely to be accurate immediately after the completion of a selection operation. It is likely to be made inaccurate by external events and by I/O operations that are invoked upon the corresponding channel.</p><p>This class defines all known operation-set bits, but precisely which bits are supported by a given channel depends upon the type of the channel. Each subclass of SelectableChannel defines an validOps() method which returns a set identifying just those operations that are supported by the channel. An attempt to set or test an operation-set bit that is not supported by a key’s channel will result in an appropriate run-time exception.</p><p>It is often necessary to associate some application-specific data with a selection key, for example an object that represents the state of a higher-level protocol and handles readiness notifications in order to implement that protocol. Selection keys therefore support the attachment of a single arbitrary object to a key. An object can be attached via the attach method and then later retrieved via the attachment method.</p><p>Selection keys are safe for use by multiple concurrent threads.The operations of reading and writing the interest set will, in general, be synchronized with certain operations of the selector.Exactly how this synchronization is performed is implementation-dependent: In a naive implementation, reading or writing the interest set may block indefinitely if a selection operation is already in progress; in a high-performance implementation, reading or writing the interest set may block briefly, if at all. In any case, a selection operation will always use the interest-set value that was current at the moment that the operation began.</p><blockquote><p>selector is thread safe but Selectionkeys’s set is not!</p></blockquote><h2><span id="变量">变量</span></h2><h3><span id="op_accept-1-ltlt-4"><strong>OP_ACCEPT</strong>  1 &lt;&lt; 4</span></h3><blockquote><p> Operation-set bit for socket-accept operations<br>Suppose that a selection key’s interest set contains <strong>OP_ACCEPT</strong> at the start of a selection operation. If the selector detects that the corresponding server-socket channel is ready to accept another connection, or has an error pending, then it will add <strong>OP_ACCEPT</strong> to the key’s ready set and add the key to its <strong>selected-key set</strong>.</p></blockquote><h3><span id="op_connect-1-ltlt-3"><strong>OP_CONNECT</strong> 1 &lt;&lt; 3</span></h3><blockquote><p>Operation-set bit for socket-connect operations.<br>Operation-set bit for socket-connect operations.<br>Suppose that a selection key’s interest set contains <strong>OP_CONNECT</strong> at the start of a selection operation. If the selector detects that the corresponding socket channel is ready to complete its connection sequence, or has an error pending, then it will add <strong>OP_CONNECT</strong> to the key’s ready set and add the key to its <strong>selected-key set</strong>.</p></blockquote><h3><span id="op_read-1-ltlt-0"><strong>OP_READ</strong> 1 &lt;&lt; 0</span></h3><blockquote><p>Operation-set bit for read operations.<br>Operation-set bit for read operations.<br>Suppose that a selection key’s interest set contains <strong>OP_READ</strong> at the start of a selection operation. If the selector detects that the corresponding channel is ready for reading, has reached end-of-stream, has been remotely shut down for further reading, or has an error pending, then it will add <strong>OP_READ</strong> to the key’s ready-operation set and add the key to its <strong>selected-key set</strong>.</p></blockquote><h3><span id="op_write-1-ltlt-2"><strong>OP_WRITE</strong> 1 &lt;&lt; 2</span></h3><blockquote><p> Operation-set bit for write operations.<br>Operation-set bit for write operations.<br>Suppose that a selection key’s interest set contains <strong>OP_WRITE</strong> at the start of a selection operation. If the selector detects that the corresponding channel is ready for writing, has been remotely shut down for further writing, or has an error pending, then it will add <strong>OP_WRITE</strong> to the key’s ready set and add the key to its <strong>selected-key set</strong>.</p></blockquote><h2><span id="方法">方法</span></h2><h3><span id="public-abstract-selectablechannel-channel"><strong>public abstract SelectableChannel channel()</strong></span></h3><blockquote><p> Returns the channel for which this key was created.<br> This method will continue to return the selector even after the key is cancelled.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;nio-selectionkey-类解析&quot;&gt;NIO SelectionKey 类解析&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; A token representing the registration of a SelectableCh</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="nio" scheme="https://mirsery.github.io/tags/nio/"/>
    
    <category term="socket" scheme="https://mirsery.github.io/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://mirsery.github.io/2021/07/12/java/Java%20Web%20Application/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Java%20Web%20Application/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="java-web-application">Java web Application</span></h2><p> <img src="./_image/2018-10-29/0144FBEB-DFF4-4A59-8FDB-E52BA8108B77.png"><br>Domain layer<br>    domain - &gt; beans<br>Persistence layer<br>    domain/repository - &gt; dal interface<br>    domain/repository/iml - &gt; dal class<br>Service layer<br>    service -&gt; operation logic<br>     service/iml<br>Controller layer<br>    controller  -&gt;  model view controller</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;java-web-application&quot;&gt;Java web Application&lt;/span&gt;&lt;/h2&gt;&lt;p&gt; &lt;img src=&quot;./_image/2018-10-29/0144FBEB-DFF4-4A59-8FDB-E52BA8108B77.p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://mirsery.github.io/2021/07/12/java/Java%E6%8C%81%E4%B9%85%E5%8C%96%E6%A1%86%E6%9E%B6/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Java%E6%8C%81%E4%B9%85%E5%8C%96%E6%A1%86%E6%9E%B6/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<p>#Java 持久化框架</p><ul><li>Ebean</li><li>Hibernate</li><li>JPA</li><li>MyBatis</li><li>JOOQ</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#Java 持久化框架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ebean&lt;/li&gt;
&lt;li&gt;Hibernate&lt;/li&gt;
&lt;li&gt;JPA&lt;/li&gt;
&lt;li&gt;MyBatis&lt;/li&gt;
&lt;li&gt;JOOQ&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>内存映射文件</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Java%E6%B5%81%E4%B8%8E%E6%96%87%E4%BB%B6--%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Java%E6%B5%81%E4%B8%8E%E6%96%87%E4%BB%B6--%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="内存映射文件">内存映射文件</span></h1><p>内存映射文件包含虚拟内存中文件的内容。 利用文件与内存空间之间的映射，应用程序（包括多个进程）可以通过直接在内存中进行读写来修改文件。<br>在java中java.nio包使得内存映射文件的操作变得十分简单。<a href="https://msdn.microsoft.com/zh-cn/library/dd997372(v=vs.110).aspx#Anchor_0">内存映射文件详情</a><br>常见做法:</p><ul><li>首先从文件中获得一个channel ( 用于磁盘文件的一种抽象，他使得我们可以访问诸如内存映射、文件加锁机制以及文件间快速数据传递等操作系统特性。 )<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">FileChannel channel = FileChannel.open(path,options);<br></code></pre></td></tr></table></figure></li><li>然后通过调用FileChannel类的map方法从这个通道中获得一个ByteBuffer。映射的文件区域与映射模式支持的有三种:<ul><li>FileChannel.MapMode.READ_ONLY : 所产生的缓冲区是只读的，任何对该缓冲区的写入尝试都会导致ReadOnlyBufferException异常。</li><li>FileChannel.MapModel.READ_WRITE : 所产生的缓冲区是可写的，任何修改都会在某个时刻写回到文件中。注意，其他映射到同一个文件的程序可能不能立即看到这些修改，多个程序同时进行文件映射的确切行为是依赖于操作系统的。 </li><li>FileChannel.MapMode.PRIVATE : 所产生的缓冲区是可写的，但是任何修改对这个缓冲区来说都是私有的，不会传播到文件中。<blockquote><p> java对于二进制数据使用高位在前的排序机制，但是如果需要以低位在前的排序方式处理包含二进制数字的文件，那么只需调用<code> buffer.order(ByteOrder.LITTLE_ENDIAN);</code>要查询缓冲区内当前的字节顺序可以调用:<code> ByteOrder b = buffer.order()</code><br>下面是一个文件copy使用内存映射的例子:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.byteBuffer;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.MappedByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.FileChannel;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by mirsery on 02/05/2017.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MaoMemberBuffer</span> </span>&#123;<br>        <span class="hljs-comment">/**内存映射*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;test.mp4&quot;</span>);<br>            FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;test1.mp4&quot;</span>);<br>            FileChannel fileInChannel = fileInputStream.getChannel();<br>            FileChannel fileOutChannel = fileOutputStream.getChannel();<br>            MappedByteBuffer mappedByteBuffer = fileInChannel.map(FileChannel.MapMode.READ_ONLY,<span class="hljs-number">0</span>,fileInChannel.size());<br>            fileOutChannel.write(mappedByteBuffer);<br>            mappedByteBuffer.flip();<span class="hljs-comment">//指针指向0</span><br>            fileOutChannel.close();<br>            fileOutputStream.close();<br>            fileInChannel.close();<br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>常用的API:</li></ul></li><li>java.nio.channels.FileChannel<ul><li>static FileChannel open(Path path,OpenOption … optioins)<pre><code>      打开指定路径的文件通道，默认状况下，通道打开时用于读入。</code></pre></li><li>MappedByteBuffer map(FileChannel.MapMode mode,long position,long size)<pre><code>       将文件的一个区域映射到内存中</code></pre></li><li>boolean hasRemining()<pre><code>      如果当前的缓冲区位置没有到达这个缓冲区的界限位置，则返回true。</code></pre></li><li>int limit()<pre><code>      返回这个缓冲区的界限位置，即没有任何价值可用的第一个位置。</code></pre></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;内存映射文件&quot;&gt;内存映射文件&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;内存映射文件包含虚拟内存中文件的内容。 利用文件与内存空间之间的映射，应用程序（包括多个进程）可以通过直接在内存中进行读写来修改文件。&lt;br&gt;在java中java.nio包使得内存映射文件的操作</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="io" scheme="https://mirsery.github.io/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>Memory</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Memory/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Memory/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<p>#Memory<br>As with running time, a program’s memory usage connects directly to the physical world: a substantial amount of your computer’s circuitry enables your pro- gram to store values and later retrieve them. The more values you need to have stored at any given instant, the more circuitry you need. You probably are aware of limits on memory usage on your computer (even more so than for time) because you probably have paid extra money to get more memory.<br>Memory usage is well-defined for Java on your computer (every value requires pre- cisely the same amount of memory each time that you run your program), but Java is implemented on a very wide range of computational devices, and memory consump- tion is implementation-dependent. For economy, we use the word typical to signal that values are subject to machine dependencies.</p><table><thead><tr><th>type</th><th>bytes</th></tr></thead><tbody><tr><td>boolean</td><td>1</td></tr><tr><td>byte</td><td>1</td></tr><tr><td>char</td><td>2</td></tr><tr><td>int</td><td>4</td></tr><tr><td>float</td><td>4</td></tr><tr><td>long</td><td>8</td></tr><tr><td>double</td><td>8</td></tr></tbody></table><blockquote><p>Typical memory requirements for primitive types</p></blockquote><p>One of Java’s most significant features is its memory allocation system, which is supposed to relieve you from having to worry about memory. Certainly, you are well-advised to take advantage of this feature when ap- propriate. Still, it is your responsibility to know, at least approximately, when a program’s memory requirements will prevent you from solving a given problem.<br>Analyzing memory usage is much easier than analyzing running time, primarily because not as many program statements are involved (just dec- larations) and because the analysis reduces complex objects to the primi- tive types, whose memory usage is well-defined and simple to understand: we can count up the number of variables and weight them by the number of bytes according to their type. For example, since the Java int data type is the set of integer values between 2,147,483,648 and 2,147,483,647, a grand total of 232 different values, typical Java implementations use 32 bits<br> to represent int values. Similar considerations hold for other primitive types: typical Java implementations use 8-bit bytes, representing each char value with 2 bytes (16 bits), each int value with 4 bytes (32 bits), each double and each long value with 8 bytes (64 bits), and each boolean value with 1 byte (since computers typically access memory one byte at a time). Combined with knowledge of the amount of memory available, you can calculate limitations from these values. For example, if you have 1GB of memory on your computer (1 billion bytes), you cannot fit more than about 32 mil- lion int values or 16 million double values in memory at any one time.<br>On the other hand, analyzing memory usage is subject to various differences in ma- chine hardware and in Java implementations, so you should consider the specific ex- amples that we give as indicative of how you might go about determining memory usage when warranted, not the final word for your computer. For example, many data structures involve representation of machine addresses, and the amount of memory needed for a machine address varies from machine to machine. For consistency, we assume that 8 bytes are needed to represent addresses, as is typical for 64-bit architectures that are now widely used, recognizing that many older machines use a 32-bit architecture that would involve just 4 bytes per machine address.<br>##Objects.<br>Todeterminethememoryusageofanobject, we add the amount of memory used by each instance variable to the overhead associated with each object, typically 16 bytes. The overhead includes a reference to the object’s class, garbage collection information, and synchronization information. Moreover, the memory usage is typically padded to be a multiple of 8 bytes (machine words, on a 64-bit machine). For example, an Integer object uses 24 bytes (16 bytes of overhead, 4 bytes for its int instance variable, and 4 bytes of padding). Similarly, a Date (page 91) object also uses 32 bytes: 16 bytes of overhead, 4 bytes for each of its three int instance variables, and 4 bytes of padding. A ref- erence to an object typically is a memory address and thus uses 8 bytes of memory. For example, a Counter (page 89) object uses 32 bytes: 16 bytes of overhead, 8 bytes for its String instance variable (a reference), 4 bytes for its int instance variable, and 4 bytes of pad- ding. When we account for the memory for a reference, we account separately for the memory for the object itself, so this total does not count the memory for the String value.<br>##Linked lists.<br> A nested non-static (inner) class such as our Node class (page 142) requires an extra 8 bytes of<br>overhead (for a reference to the enclosing instance). Thus, a Node object uses 40 bytes (16 bytes of object overhead, 8 bytes each for the references to the Item and Node ob- jects, and 8 bytes for the extra overhead). Thus, since an Integer object uses 24 bytes, a stack with N integers built with a linked-list representation (Algorithm 1.2) uses 32 + 64N bytes, the usual 16 for object overhead for Stack, 8 for its reference instance vari- able, 4 for its int instance variable, 4 for padding, and 64 for each entry, 40 for a Node and 24 for an Integer.<br>##Arrays.<br>Typical memory requirements for various types of arrays in Java are summa- rized in the diagrams on the facing page. Arrays in Java are implemented as objects, typically with extra overhead for the length. An array of primitive-type values typically requires 24 bytes of header information (16 bytes of object overhead, 4 bytes for the length, and 4 bytes of padding) plus the memory needed to store the values. For ex- ample, an array of N int values uses 24   4N bytes (rounded up to be a multiple of 8), and an array of N double values uses 24   8N bytes. An array of objects is an array of references to the objects, so we need to add the space for the references to the space required for the objects. For example, an array of N Date objects (page 91) uses 24 bytes (array overhead) plus 8N bytes (references) plus 32 bytes for each object and 4 bytes of padding, for a grand total of 24 + 40N bytes. A two-dimensional array is an array of ar- rays (each array is an object). For example, a two-dimensional M-by-N array of double values uses 24 bytes (overhead for the array of arrays) plus 8 M bytes (references to the row arrays) plus M times 16 bytes (overhead from the row arrays) plus M times N times 8 bytes (for the N double values in each of the M rows) for a grand total of 8NM   32M   24 ~ 8NM bytes. When array entries are objects, a similar accounting leads to a total of 8NM   32M   24 ~ 8NM bytes for the array of arrays filled with references to objects, plus the memory for the objects themselves.<br>##String objects.<br> We account for memory in Java’s String objects in the same way as for any other object, except that aliasing is common for strings. The standard String implementation has four instance variables: a reference to a character array (8 bytes) and three int values (4 bytes each). The first int value is an offset into the character ar- ray; the second is a count (the string length). In terms of the instance variable names in the drawing on the facing page, the string that is represented consists of the characters value[offset]throughvalue[offset + count - 1].ThethirdintvalueinString objects is a hash code that saves recomputation in certain circumstances that need not concern us now. Therefore, each String object uses a total of 40 bytes (16 bytes for object overhead plus 4 bytes for each of the three int instance variables plus 8 bytes for the array reference plus 4 bytes of padding). This space requirement is in addition to the space needed for the characters themselves, which are in the array. The space needed for the characters is accounted for separately because the char array is often shared among strings. Since String objects are immutable, this arrangement allows the imple- mentation to save memory when String objects have the same underlying value[].<br>##String values and substrings.<br>A String of length N typically uses 40 bytes (for the String object) plus 24   2N bytes (for the array that contains the characters) for a total of 64 + 2N bytes. But it is typical in string processing to work with substrings, and Java’s representation is meant to allow us to do so without having to make copies of the string’s characters. When you use the substring() method, you create a new String object (40 bytes) but reuse the same value[] array, so a substring of an existing string takes just 40 bytes. The character array containing the original string is aliased in the object for the substring; the offset and length fields identify the substring. In other words, a substring takes constant ex- tra memory and forming a substring takes constant time, even when the lengths of the string and the substring are huge. A naive representation that requires copying characters to make substrings would take linear time and space. The ability to create a substring using space (and time) independent of its length is the key to effi- ciency in many basic string-processing algorithms.<br>These basic mechanisms are effective for esti- mating the memory usage of a great many programs, but there are numerous complicating factors that can make the task significantly more difficult. We have already noted the potential effect of aliasing. More- over, memory consumption is a complicated dynamic process when function calls are involved because the system memory allocation mechanism plays a more important role, with more system dependencies. For example, when your program calls a method, the sys- tem allocates the memory needed for the method (for its local variables) from a special area of memory called the stack (a system pushdown stack), and when the method returns to the caller, the memory is returned to the stack. For this reason, creating arrays or other large objects in recursive programs is dangerous, since each recursive call implies significant memory usage. When you create an object with new, the system allocates the memory needed for the object from another special area of memory known as the heap (not the same as the binary heap data structure we consider in Section 2.4), and you must remember that every object lives until no references to it remain, at which point a system process known as garbage collection reclaims its memory for the heap. Such dynamics can make the task of pre- cisely estimating memory usage of a program challenging.</p><p>![](./_image/屏幕快照 2017-01-20 10.05.52.png)</p><p>![](./_image/屏幕快照 2017-01-20 10.06.41.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#Memory&lt;br&gt;As with running time, a program’s memory usage connects directly to the physical world: a substantial amount of your computer’</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="内存" scheme="https://mirsery.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://mirsery.github.io/2021/07/12/java/MergeSort/"/>
    <id>https://mirsery.github.io/2021/07/12/java/MergeSort/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<p>#MergeSort<br>The algorithms that we consider in this section are based on a simple operation known as merging: combining two ordered arrays to make one larger ordered array. This operation immediately leads to a simple recursive sort method known as merge- sort: to sort an array, divide it into two halves, sort the two halves (recursively), and then merge the results. As you will see, one of mergesort’s most attractive properties is that it guarantees to sort any array of N items in time proportional to N log N. Its prime disadvantage is that it uses extra space proportional to N.<br>##Abstract in-place merge<br>The straightforward approach to implementing merg- ing is to design a method that merges two disjoint ordered arrays of Comparable ob- jects into a third array. This strategy is easy to implement: create an output array of the requisite size and then choose successively the smallest remaining item from the two<br>input arrays to be the next item added to the output array.<br>However, when we mergesort a large array, we are doing a huge number of merges,<br>so the cost of creating a new array to hold the output every time that we do a merge is problematic. It would be much more desirable to have an in-place method so that we could sort the first half of the array in place, then sort the second half of the array in place, then do the merge of the two halves by moving the items around within the ar- ray, without using a significant amount of other extra space. It is worthwhile to pause momentarily to consider how you might do that. At first blush, this problem seems to be one that must be simple to solve, but solutions that are known are quite complicated, especially by comparison to alternatives that use extra space.<br>Still, the abstraction of an in-place merge is useful. Accordingly, we use the method signaturemerge(a, lo, mid, hi)tospecifyamergemethodthatputstheresultof merging the subarrays a[lo..mid] with a[mid+1..hi] into a single ordered array, leaving the result in a[lo..hi]. The code on the next page implements this merge method in just a few lines by copying everything to an auxiliary array and then merging back to the original. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> lo, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> hi)</span></span><br><span class="hljs-function">  </span>&#123;  <span class="hljs-comment">// Merge a[lo..mid] with a[mid+1..hi].</span><br>     <span class="hljs-keyword">int</span> i = lo, j = mid+<span class="hljs-number">1</span>;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = lo; k &lt;= hi; k++)  <span class="hljs-comment">// Copy a[lo..hi] to aux[lo..hi].</span><br>        aux[k] = a[k];<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = lo; k &lt;= hi; k++)  <span class="hljs-comment">// Merge back to a[lo..hi].</span><br>        <span class="hljs-keyword">if</span>      (i &gt; mid)              a[k] = aux[j++];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j &gt; hi )              a[k] = aux[i++];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (less(aux[j], aux[i])) a[k] = aux[j++];<br>        <span class="hljs-keyword">else</span>                           a[k] = aux[i++];<br>  &#125;<br></code></pre></td></tr></table></figure><p>This method merges by first copying into the auxiliary array aux[] then merging back to a[]. In the merge (the second for loop), there are four conditions: left half exhausted (take from the right), right half exhausted (take from the left), current key on right less than current key on left (take from the right), and current key on right greater than or equal to current key on left (take from the left).<br>##Top-down mergesort<br>It is one of the best-known examples of the utility of the divide-and-conquer paradigm for efficient algorithm design. This recursive code is the basis for an inductive proof that the algorithm sorts the array: if it sorts the two subarrays, it sorts the whole array, by merg- ing together the subarrays.<br>To understand mergesort, it is worthwhile to consider carefully the dynamics of the method calls, shown in the trace at right. To sort a[0..15], the sort() method calls itself to sort a[0..7] then calls itself to sort a[0..3] and a[0..1] before finally doing the first merge of a[0] with a[1] after calling itself to sort a[0] and then a[1] (for brevity, we omit the calls for the base-case 1-entry sorts in the trace). Then the next merge is a[2] with a[3] and then a[0..1] with a[2..3] and so forth. From this trace, we see that the sort code simply provides an orga- nized way to sequence the calls to the merge() method. This insight will be useful later in this section.<br>The recursive code also provides us with the basis for analyzing mergesort’s running time. Because mergesort is a prototype of the divide-and-conquer algorithm de- sign paradigm, we will consider this analysis in detail.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Merge</span></span><br><span class="hljs-class">  </span>&#123;<br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Comparable[] aux;      <span class="hljs-comment">// auxiliary array for merges</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span></span><br><span class="hljs-function">     </span>&#123;<br>        aux = <span class="hljs-keyword">new</span> Comparable[a.length];    <span class="hljs-comment">// Allocate space just once.</span><br>        sort(a, <span class="hljs-number">0</span>, a.length - <span class="hljs-number">1</span>);<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> lo, <span class="hljs-keyword">int</span> hi)</span></span><br><span class="hljs-function">     </span>&#123;  <span class="hljs-comment">// Sort a[lo..hi].</span><br>        <span class="hljs-keyword">if</span> (hi &lt;= lo) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">int</span> mid = lo + (hi - lo)/<span class="hljs-number">2</span>;<br>        sort(a, lo, mid);       <span class="hljs-comment">// Sort left half.</span><br>        sort(a, mid+<span class="hljs-number">1</span>, hi);     <span class="hljs-comment">// Sort right half.</span><br>        merge(a, lo, mid, hi);  <span class="hljs-comment">// Merge results (code on page 271).</span><br>&#125; &#125;<br></code></pre></td></tr></table></figure><p>##Use insertion sort for small subarrays.<br>We can improve most recursive algorithms by handling small cases differently, because the recursion guarantees that the method will be used often for small cases, so improvements in handling them lead to improvements in the whole algorithm. In the case of sorting, we know that insertion sort (or selection sort) is simple and therefore likely to be faster than mergesort for tiny subarrays. As usual, a visual trace provides insight into the operation of mergesort. The visual trace on the facing page shows the operation of a mergesort implementation with a cutoff for small subarrays. Switching to insertion sort for small subarrays (length 15 or less, say) will improve the running time of a typical mergesort implementation by 10 to 15 percent (see Exercise 2.2.23).<br>Test whether the array is already in order. We can reduce the running time to be linear for arrays that are already in order by adding a test to skip the call to merge() if a[mid] is less than or equal to a[mid+1].<br>##Eliminatethecopytotheauxiliaryarray.<br>It is possible to eliminate the time(but not the space) taken to copy to the auxiliary array used for merging. To do so, we use two invocations of the sort method: one takes its input from the given array and puts the sorted output in the auxiliary array; the other takes its input from the auxiliary array and puts the sorted output in the given array. </p><p>![](./_image/屏幕快照 2017-01-28 00.54.31.png)<br>It is appropriate to repeat here a point raised in Chapter 1 that is easily forgotten and needs reemphasis. Locally, we treat each algorithm in this book as if it were critical in some application. Globally, we try to reach general conclusions about which approach to recommend. Our discussion of such improvements is not necessarily a recommen- dation to always implement them, rather a warning not to draw absolute conclusions about performance from initial implementations. When addressing a new problem, your best bet is to use the simplest implementation with which you are comfortable and then refine it if it becomes a bottleneck. Addressing improvements that decrease running time just by a constant factor may not otherwise be worthwhile. You need to test the effectiveness of specific improvements by running experiments, as we indicate in exercises throughout.<br>In the case of mergesort, the three improvements just listed are simple to implement and are of interest when mergesort is the method of choice—for example, in situations discussed at the end of this chapter.<br>##Bottom-up mergesort<br>The recursive implementation of mergesort is prototypi- cal of the divide-and-conquer algorithm design paradigm, where we solve a large prob- lem by dividing it into pieces, solving the subproblems, then using the solutions for the pieces to solve the whole problem. Even though we are thinking in terms of merging together two large subarrays, the fact is that most merges are merging together tiny subarrays. Another way to implement mergesort is to organize the merges so that we do all the merges of tiny subarrays on one pass, then do a second pass to merge those sub- arrays in pairs, and so forth, continuing until we do a merge that encompasses the whole array. This method requires even less code than the standard recursive implementation. We start by doing a pass 2 of 1-by-1 merges (considering individual items as subarrays of size 1), then a pass of 2-by-2 merges (merge subarrays of size 2 to make subarrays of size 4), then 4-by-4 merges, and so forth. The sec- ond subarray may be smaller than the first in the last merge on each pass (which is no problem for merge()), but otherwise all merges involve subar- rays of equal size, doubling the sorted subarray size for the next pass.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeBU</span></span><br><span class="hljs-class">  </span>&#123;<br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Comparable[] aux;      <span class="hljs-comment">// auxiliary array for merges</span><br>     <span class="hljs-comment">// See page 271 for merge() code.</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span></span><br><span class="hljs-function">     </span>&#123;  <span class="hljs-comment">// Do lg N passes of pairwise merges.</span><br> &#125; &#125;<br><span class="hljs-keyword">int</span> N = a.length;<br>aux = <span class="hljs-keyword">new</span> Comparable[N];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> sz = <span class="hljs-number">1</span>; sz &lt; N; sz = sz+sz)<br>                                         <span class="hljs-comment">// sz: subarray size</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> lo = <span class="hljs-number">0</span>; lo &lt; N-sz; lo += sz+sz) <span class="hljs-comment">// lo: subarray index</span><br>merge(a, lo, lo+sz-<span class="hljs-number">1</span>, Math.min(lo+sz+sz-<span class="hljs-number">1</span>, N-<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><br> * Created by mirsery on <span class="hljs-number">2017</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20.</span><br> */<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeSort</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br><br>            <span class="hljs-keyword">int</span> i = low; <span class="hljs-comment">// i是第一段序列的下标</span><br><br>            <span class="hljs-keyword">int</span> j = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// j是第二段序列的下标</span><br><br>            <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; <span class="hljs-comment">// k是临时存放合并序列的下标</span><br><br>            <span class="hljs-keyword">int</span>[] array2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[high - low + <span class="hljs-number">1</span>]; <span class="hljs-comment">// array2是临时合并序列</span><br><br>            <span class="hljs-comment">// 扫描第一段和第二段序列，直到有一个扫描结束</span><br>            <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high) &#123;<br>                <span class="hljs-comment">// 判断第一段和第二段取出的数哪个更小，将其存入合并序列，并继续向下扫描</span><br>                <span class="hljs-keyword">if</span> (array[i] &lt;= array[j]) &#123;<br>                    array2[k] = array[i];<br>                    i++;<br>                    k++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    array2[k] = array[j];<br>                    j++;<br>                    k++;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 若第一段序列还没扫描完，将其全部复制到合并序列</span><br>            <span class="hljs-keyword">while</span> (i &lt;= mid) &#123;<br>                array2[k] = array[i];<br>                i++;<br>                k++;<br>            &#125;<br><br>            <span class="hljs-comment">// 若第二段序列还没扫描完，将其全部复制到合并序列</span><br>            <span class="hljs-keyword">while</span> (j &lt;= high) &#123;<br>                array2[k] = array[j];<br>                j++;<br>                k++;<br>            &#125;<br><br>            <span class="hljs-comment">// 将合并序列复制到原始序列中</span><br>            <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>, i = low; i &lt;= high; i++, k++) &#123;<br>                array[i] = array2[k];<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">MergePass</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> gap, <span class="hljs-keyword">int</span> length)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-comment">// 归并gap长度的两个相邻子表</span><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i + <span class="hljs-number">2</span> * gap - <span class="hljs-number">1</span> &lt; length; i = i + <span class="hljs-number">2</span> * gap) &#123;<br>                Merge(array, i, i + gap - <span class="hljs-number">1</span>, i + <span class="hljs-number">2</span> * gap - <span class="hljs-number">1</span>);<br>            &#125;<br><br>            <span class="hljs-comment">// 余下两个子表，后者长度小于gap</span><br>            <span class="hljs-keyword">if</span> (i + gap - <span class="hljs-number">1</span> &lt; length) &#123;<br>                Merge(array, i, i + gap - <span class="hljs-number">1</span>, length - <span class="hljs-number">1</span>);<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] sort(<span class="hljs-keyword">int</span>[] list) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap = <span class="hljs-number">1</span>; gap &lt; list.length; gap = <span class="hljs-number">2</span> * gap) &#123;<br>                MergePass(list, gap, list.length);<br>                System.out.print(<span class="hljs-string">&quot;gap = &quot;</span> + gap + <span class="hljs-string">&quot;:\t&quot;</span>);<br>                <span class="hljs-keyword">this</span>.printAll(list);<br>            &#125;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br><br>        <span class="hljs-comment">// 打印完整序列</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printAll</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] list)</span> </span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> value : list) &#123;<br>                System.out.print(value + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>            <span class="hljs-keyword">int</span>[] array = &#123;<br>               <span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span><br>            &#125;;<br><br>            MergeSort merge = <span class="hljs-keyword">new</span> MergeSort();<br>            System.out.print(<span class="hljs-string">&quot;排序前:\t\t&quot;</span>);<br>            merge.printAll(array);<br><br>            merge.sort(array);<br>            System.out.print(<span class="hljs-string">&quot;排序后:\t\t&quot;</span>);<br>            merge.printAll(array);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#MergeSort&lt;br&gt;The algorithms that we consider in this section are based on a simple operation known as merging: combining two ordered arr</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="排序" scheme="https://mirsery.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Netty 断包/沾包问题解决方案</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Netty%E6%96%AD%E5%8C%85%E3%80%81%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Netty%E6%96%AD%E5%8C%85%E3%80%81%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<p>在netty中一个inbound实现了对tcp传输中的短爆、粘包的问题解决。先贴出该类的源代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 2012 The Netty Project</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * The Netty Project licenses this file to you under the Apache License,</span><br><span class="hljs-comment"> * version 2.0 (the &quot;License&quot;); you may not use this file except in compliance</span><br><span class="hljs-comment"> * with the License. You may obtain a copy of the License at:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT</span><br><span class="hljs-comment"> * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the</span><br><span class="hljs-comment"> * License for the specific language governing permissions and limitations</span><br><span class="hljs-comment"> * under the License.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> io.netty.handler.codec;<br><br><span class="hljs-keyword">import</span> io.netty.buffer.ByteBuf;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelHandlerContext;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A decoder that splits the received &#123;<span class="hljs-doctag">@link</span> ByteBuf&#125;s by one or more</span><br><span class="hljs-comment"> * delimiters.  It is particularly useful for decoding the frames which ends</span><br><span class="hljs-comment"> * with a delimiter such as &#123;<span class="hljs-doctag">@link</span> Delimiters#nulDelimiter() NUL&#125; or</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@linkplain</span> Delimiters#lineDelimiter() newline characters&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;h3&gt;Predefined delimiters&lt;/h3&gt;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> Delimiters&#125; defines frequently used delimiters for convenience&#x27; sake.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;h3&gt;Specifying more than one delimiter&lt;/h3&gt;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> DelimiterBasedFrameDecoder&#125; allows you to specify more than one</span><br><span class="hljs-comment"> * delimiter.  If more than one delimiter is found in the buffer, it chooses</span><br><span class="hljs-comment"> * the delimiter which produces the shortest frame.  For example, if you have</span><br><span class="hljs-comment"> * the following data in the buffer:</span><br><span class="hljs-comment"> * &lt;pre&gt;</span><br><span class="hljs-comment"> * +--------------+</span><br><span class="hljs-comment"> * | ABC\nDEF\r\n |</span><br><span class="hljs-comment"> * +--------------+</span><br><span class="hljs-comment"> * &lt;/pre&gt;</span><br><span class="hljs-comment"> * a &#123;<span class="hljs-doctag">@link</span> DelimiterBasedFrameDecoder&#125;(&#123;<span class="hljs-doctag">@link</span> Delimiters#lineDelimiter() Delimiters.lineDelimiter()&#125;)</span><br><span class="hljs-comment"> * will choose &#123;<span class="hljs-doctag">@code</span> &#x27;\n&#x27;&#125; as the first delimiter and produce two frames:</span><br><span class="hljs-comment"> * &lt;pre&gt;</span><br><span class="hljs-comment"> * +-----+-----+</span><br><span class="hljs-comment"> * | ABC | DEF |</span><br><span class="hljs-comment"> * +-----+-----+</span><br><span class="hljs-comment"> * &lt;/pre&gt;</span><br><span class="hljs-comment"> * rather than incorrectly choosing &#123;<span class="hljs-doctag">@code</span> &#x27;\r\n&#x27;&#125; as the first delimiter:</span><br><span class="hljs-comment"> * &lt;pre&gt;</span><br><span class="hljs-comment"> * +----------+</span><br><span class="hljs-comment"> * | ABC\nDEF |</span><br><span class="hljs-comment"> * +----------+</span><br><span class="hljs-comment"> * &lt;/pre&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ByteToMessageDecoder</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ByteBuf[] delimiters;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> maxFrameLength;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> stripDelimiter;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> failFast;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> discardingTooLongFrame;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tooLongFrameLength;<br>    <span class="hljs-comment">/** Set only when decoding with &quot;\n&quot; and &quot;\r\n&quot; as the delimiter.  */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> LineBasedFrameDecoder lineBasedDecoder;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxFrameLength  the maximum length of the decoded frame.</span><br><span class="hljs-comment">     *                        A &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is thrown if</span><br><span class="hljs-comment">     *                        the length of the frame exceeds this value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delimiter  the delimiter</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxFrameLength, ByteBuf delimiter)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(maxFrameLength, <span class="hljs-keyword">true</span>, delimiter);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxFrameLength  the maximum length of the decoded frame.</span><br><span class="hljs-comment">     *                        A &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is thrown if</span><br><span class="hljs-comment">     *                        the length of the frame exceeds this value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stripDelimiter  whether the decoded frame should strip out the</span><br><span class="hljs-comment">     *                        delimiter or not</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delimiter  the delimiter</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">int</span> maxFrameLength, <span class="hljs-keyword">boolean</span> stripDelimiter, ByteBuf delimiter)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(maxFrameLength, stripDelimiter, <span class="hljs-keyword">true</span>, delimiter);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxFrameLength  the maximum length of the decoded frame.</span><br><span class="hljs-comment">     *                        A &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is thrown if</span><br><span class="hljs-comment">     *                        the length of the frame exceeds this value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stripDelimiter  whether the decoded frame should strip out the</span><br><span class="hljs-comment">     *                        delimiter or not</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> failFast  If &lt;tt&gt;true&lt;/tt&gt;, a &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is</span><br><span class="hljs-comment">     *                  thrown as soon as the decoder notices the length of the</span><br><span class="hljs-comment">     *                  frame will exceed &lt;tt&gt;maxFrameLength&lt;/tt&gt; regardless of</span><br><span class="hljs-comment">     *                  whether the entire frame has been read.</span><br><span class="hljs-comment">     *                  If &lt;tt&gt;false&lt;/tt&gt;, a &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is</span><br><span class="hljs-comment">     *                  thrown after the entire frame that exceeds</span><br><span class="hljs-comment">     *                  &lt;tt&gt;maxFrameLength&lt;/tt&gt; has been read.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delimiter  the delimiter</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">int</span> maxFrameLength, <span class="hljs-keyword">boolean</span> stripDelimiter, <span class="hljs-keyword">boolean</span> failFast,</span></span><br><span class="hljs-params"><span class="hljs-function">            ByteBuf delimiter)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(maxFrameLength, stripDelimiter, failFast, <span class="hljs-keyword">new</span> ByteBuf[] &#123;<br>                delimiter.slice(delimiter.readerIndex(), delimiter.readableBytes())&#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxFrameLength  the maximum length of the decoded frame.</span><br><span class="hljs-comment">     *                        A &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is thrown if</span><br><span class="hljs-comment">     *                        the length of the frame exceeds this value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delimiters  the delimiters</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxFrameLength, ByteBuf... delimiters)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(maxFrameLength, <span class="hljs-keyword">true</span>, delimiters);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxFrameLength  the maximum length of the decoded frame.</span><br><span class="hljs-comment">     *                        A &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is thrown if</span><br><span class="hljs-comment">     *                        the length of the frame exceeds this value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stripDelimiter  whether the decoded frame should strip out the</span><br><span class="hljs-comment">     *                        delimiter or not</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delimiters  the delimiters</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">int</span> maxFrameLength, <span class="hljs-keyword">boolean</span> stripDelimiter, ByteBuf... delimiters)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(maxFrameLength, stripDelimiter, <span class="hljs-keyword">true</span>, delimiters);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxFrameLength  the maximum length of the decoded frame.</span><br><span class="hljs-comment">     *                        A &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is thrown if</span><br><span class="hljs-comment">     *                        the length of the frame exceeds this value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stripDelimiter  whether the decoded frame should strip out the</span><br><span class="hljs-comment">     *                        delimiter or not</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> failFast  If &lt;tt&gt;true&lt;/tt&gt;, a &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is</span><br><span class="hljs-comment">     *                  thrown as soon as the decoder notices the length of the</span><br><span class="hljs-comment">     *                  frame will exceed &lt;tt&gt;maxFrameLength&lt;/tt&gt; regardless of</span><br><span class="hljs-comment">     *                  whether the entire frame has been read.</span><br><span class="hljs-comment">     *                  If &lt;tt&gt;false&lt;/tt&gt;, a &#123;<span class="hljs-doctag">@link</span> TooLongFrameException&#125; is</span><br><span class="hljs-comment">     *                  thrown after the entire frame that exceeds</span><br><span class="hljs-comment">     *                  &lt;tt&gt;maxFrameLength&lt;/tt&gt; has been read.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delimiters  the delimiters</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelimiterBasedFrameDecoder</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">int</span> maxFrameLength, <span class="hljs-keyword">boolean</span> stripDelimiter, <span class="hljs-keyword">boolean</span> failFast, ByteBuf... delimiters)</span> </span>&#123;<br>        validateMaxFrameLength(maxFrameLength);<br>        <span class="hljs-keyword">if</span> (delimiters == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;delimiters&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (delimiters.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;empty delimiters&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (isLineBased(delimiters) &amp;&amp; !isSubclass()) &#123;<br>            lineBasedDecoder = <span class="hljs-keyword">new</span> LineBasedFrameDecoder(maxFrameLength, stripDelimiter, failFast);<br>            <span class="hljs-keyword">this</span>.delimiters = <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.delimiters = <span class="hljs-keyword">new</span> ByteBuf[delimiters.length];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; delimiters.length; i ++) &#123;<br>                ByteBuf d = delimiters[i];<br>                validateDelimiter(d);<br>                <span class="hljs-keyword">this</span>.delimiters[i] = d.slice(d.readerIndex(), d.readableBytes());<br>            &#125;<br>            lineBasedDecoder = <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">this</span>.maxFrameLength = maxFrameLength;<br>        <span class="hljs-keyword">this</span>.stripDelimiter = stripDelimiter;<br>        <span class="hljs-keyword">this</span>.failFast = failFast;<br>    &#125;<br><br>    <span class="hljs-comment">/** Returns true if the delimiters are &quot;\n&quot; and &quot;\r\n&quot;.  */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isLineBased</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ByteBuf[] delimiters)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (delimiters.length != <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        ByteBuf a = delimiters[<span class="hljs-number">0</span>];<br>        ByteBuf b = delimiters[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (a.capacity() &lt; b.capacity()) &#123;<br>            a = delimiters[<span class="hljs-number">1</span>];<br>            b = delimiters[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> a.capacity() == <span class="hljs-number">2</span> &amp;&amp; b.capacity() == <span class="hljs-number">1</span><br>                &amp;&amp; a.getByte(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;\r&#x27;</span> &amp;&amp; a.getByte(<span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;\n&#x27;</span><br>                &amp;&amp; b.getByte(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return &#123;<span class="hljs-doctag">@code</span> true&#125; if the current instance is a subclass of DelimiterBasedFrameDecoder</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSubclass</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getClass() != DelimiterBasedFrameDecoder.class;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode</span><span class="hljs-params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Object decoded = decode(ctx, in);<br>        <span class="hljs-keyword">if</span> (decoded != <span class="hljs-keyword">null</span>) &#123;<br>            out.add(decoded);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Create a frame out of the &#123;<span class="hljs-doctag">@link</span> ByteBuf&#125; and return it.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>   ctx             the &#123;<span class="hljs-doctag">@link</span> ChannelHandlerContext&#125; which this &#123;<span class="hljs-doctag">@link</span> ByteToMessageDecoder&#125; belongs to</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>   buffer          the &#123;<span class="hljs-doctag">@link</span> ByteBuf&#125; from which to read data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  frame           the &#123;<span class="hljs-doctag">@link</span> ByteBuf&#125; which represent the frame or &#123;<span class="hljs-doctag">@code</span> null&#125; if no frame could</span><br><span class="hljs-comment">     *                          be created.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">decode</span><span class="hljs-params">(ChannelHandlerContext ctx, ByteBuf buffer)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">if</span> (lineBasedDecoder != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> lineBasedDecoder.decode(ctx, buffer);<br>        &#125;<br>        <span class="hljs-comment">// Try all delimiters and choose the delimiter which yields the shortest frame.</span><br>        <span class="hljs-keyword">int</span> minFrameLength = Integer.MAX_VALUE;<br>        ByteBuf minDelim = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">for</span> (ByteBuf delim: delimiters) &#123;<br>            <span class="hljs-keyword">int</span> frameLength = indexOf(buffer, delim);<br>            <span class="hljs-keyword">if</span> (frameLength &gt;= <span class="hljs-number">0</span> &amp;&amp; frameLength &lt; minFrameLength) &#123;<br>                minFrameLength = frameLength;<br>                minDelim = delim;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (minDelim != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">int</span> minDelimLength = minDelim.capacity();<br>            ByteBuf frame;<br><br>            <span class="hljs-keyword">if</span> (discardingTooLongFrame) &#123;<br>                <span class="hljs-comment">// We&#x27;ve just finished discarding a very large frame.</span><br>                <span class="hljs-comment">// Go back to the initial state.</span><br>                discardingTooLongFrame = <span class="hljs-keyword">false</span>;<br>                buffer.skipBytes(minFrameLength + minDelimLength);<br><br>                <span class="hljs-keyword">int</span> tooLongFrameLength = <span class="hljs-keyword">this</span>.tooLongFrameLength;<br>                <span class="hljs-keyword">this</span>.tooLongFrameLength = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (!failFast) &#123;<br>                    fail(tooLongFrameLength);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (minFrameLength &gt; maxFrameLength) &#123;<br>                <span class="hljs-comment">// Discard read frame.</span><br>                buffer.skipBytes(minFrameLength + minDelimLength);<br>                fail(minFrameLength);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (stripDelimiter) &#123;<br>                frame = buffer.readSlice(minFrameLength);<br>                buffer.skipBytes(minDelimLength);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                frame = buffer.readSlice(minFrameLength + minDelimLength);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> frame.retain();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!discardingTooLongFrame) &#123;<br>                <span class="hljs-keyword">if</span> (buffer.readableBytes() &gt; maxFrameLength) &#123;<br>                    <span class="hljs-comment">// Discard the content of the buffer until a delimiter is found.</span><br>                    tooLongFrameLength = buffer.readableBytes();<br>                    buffer.skipBytes(buffer.readableBytes());<br>                    discardingTooLongFrame = <span class="hljs-keyword">true</span>;<br>                    <span class="hljs-keyword">if</span> (failFast) &#123;<br>                        fail(tooLongFrameLength);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// Still discarding the buffer since a delimiter is not found.</span><br>                tooLongFrameLength += buffer.readableBytes();<br>                buffer.skipBytes(buffer.readableBytes());<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fail</span><span class="hljs-params">(<span class="hljs-keyword">long</span> frameLength)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (frameLength &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TooLongFrameException(<br>                            <span class="hljs-string">&quot;frame length exceeds &quot;</span> + maxFrameLength +<br>                            <span class="hljs-string">&quot;: &quot;</span> + frameLength + <span class="hljs-string">&quot; - discarded&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TooLongFrameException(<br>                            <span class="hljs-string">&quot;frame length exceeds &quot;</span> + maxFrameLength +<br>                            <span class="hljs-string">&quot; - discarding&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the number of bytes between the readerIndex of the haystack and</span><br><span class="hljs-comment">     * the first needle found in the haystack.  -1 is returned if no needle is</span><br><span class="hljs-comment">     * found in the haystack.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(ByteBuf haystack, ByteBuf needle)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = haystack.readerIndex(); i &lt; haystack.writerIndex(); i ++) &#123;<br>            <span class="hljs-keyword">int</span> haystackIndex = i;<br>            <span class="hljs-keyword">int</span> needleIndex;<br>            <span class="hljs-keyword">for</span> (needleIndex = <span class="hljs-number">0</span>; needleIndex &lt; needle.capacity(); needleIndex ++) &#123;<br>                <span class="hljs-keyword">if</span> (haystack.getByte(haystackIndex) != needle.getByte(needleIndex)) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    haystackIndex ++;<br>                    <span class="hljs-keyword">if</span> (haystackIndex == haystack.writerIndex() &amp;&amp;<br>                        needleIndex != needle.capacity() - <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (needleIndex == needle.capacity()) &#123;<br>                <span class="hljs-comment">// Found the needle from the haystack!</span><br>                <span class="hljs-keyword">return</span> i - haystack.readerIndex();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">validateDelimiter</span><span class="hljs-params">(ByteBuf delimiter)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (delimiter == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;delimiter&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!delimiter.isReadable()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;empty delimiter&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">validateMaxFrameLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxFrameLength)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (maxFrameLength &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>                    <span class="hljs-string">&quot;maxFrameLength must be a positive integer: &quot;</span> +<br>                    maxFrameLength);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在netty中一个inbound实现了对tcp传输中的短爆、粘包的问题解决。先贴出该类的源代码:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="netty" scheme="https://mirsery.github.io/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>netty重链接</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Netty%E7%9A%84%E9%87%8D%E8%BF%9E%E6%9C%BA%E5%88%B6/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Netty%E7%9A%84%E9%87%8D%E8%BF%9E%E6%9C%BA%E5%88%B6/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<p>在socket客户端编程中涉及到最多的就是长连接的问题。在netty框架中客户端和服务器之间的连接断开的话会触发channel的inactive方法，此时我们可以在inactive方法中实现客户端的断线重连机制。<br>    下面是示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Bootstrap <span class="hljs-title">createBootStrap</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Bootstrap bootstrap, <span class="hljs-keyword">final</span> EventLoopGroup eventLoop)</span> </span>&#123;<br>       <span class="hljs-keyword">if</span>(bootstrap != <span class="hljs-keyword">null</span>)&#123;<br>           bootstrap.group(eventLoop).channel(NioSocketChannel.class).handler(janusChannelInitializer);<br><br><br>           <span class="hljs-keyword">final</span> ChannelFuture future = bootstrap.connect(<span class="hljs-keyword">new</span> InetSocketAddress(configuration.getServerIP(), configuration.getPort()));<br><br>           future.addListener(<span class="hljs-keyword">new</span> ChannelFutureListener() &#123;<br>               <span class="hljs-meta">@Override</span><br>               <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operationComplete</span><span class="hljs-params">(ChannelFuture channelFuture)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                   <span class="hljs-keyword">if</span> (future.isSuccess()) &#123;<br>                       log.info(<span class="hljs-string">&quot;janusClient connect to server &quot;</span>+ configuration.getServerIP()+<span class="hljs-string">&quot; at port: &#123;&#125;&quot;</span>, configuration.getPort());<br>                   &#125; <span class="hljs-keyword">else</span> &#123;<br>                       log.error(<span class="hljs-string">&quot;janusClient can&#x27;t connect to server &quot;</span>+configuration.getServerIP()+<span class="hljs-string">&quot; at port: &#123;&#125;!&quot;</span>, configuration.getPort());<br>                       eventLoop.schedule(<span class="hljs-keyword">new</span> Runnable() &#123;<br>                           <span class="hljs-meta">@Override</span><br>                           <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                               createBootStrap(<span class="hljs-keyword">new</span> Bootstrap(),eventLoop);<br>                               log.info(<span class="hljs-string">&quot;reconnect jsonClient.....&quot;</span>);<br>                           &#125;<br>                       &#125;,<span class="hljs-number">30L</span>, TimeUnit.SECONDS);<br>                   &#125;<br>               &#125;<br>           &#125;);<br>           future.syncUninterruptibly();<br>       &#125;<br>       <span class="hljs-keyword">return</span> bootstrap;<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Once channel is inactive</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelInactive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       log.info(<span class="hljs-string">&quot;enter inactive function . . .&quot;</span>);<br>       <span class="hljs-keyword">final</span> EventLoop eventLoop = ctx.channel().eventLoop();<br>       eventLoop.schedule(<span class="hljs-keyword">new</span> Runnable() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>               JsonClient.getJsonClent().createBootStrap(<span class="hljs-keyword">new</span> Bootstrap(),eventLoop);<br>               log.info(<span class="hljs-string">&quot;reconnect .....&quot;</span>);<br>           &#125;<br>       &#125;,<span class="hljs-number">10L</span>, TimeUnit.SECONDS);<br>       <span class="hljs-keyword">super</span>.channelInactive(ctx);<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在socket客户端编程中涉及到最多的就是长连接的问题。在netty框架中客户端和服务器之间的连接断开的话会触发channel的inactive方法，此时我们可以在inactive方法中实现客户端的断线重连机制。&lt;br&gt;    下面是示例代码&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="netty" scheme="https://mirsery.github.io/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>Developing the Spring Boot microservice using the CLI</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Spring%20Cli/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Spring%20Cli/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="developing-the-spring-boot-microservice-using-the-cli">Developing the Spring Boot microservice using the CLI</span></h1><p>The easiest way to develop and demonstrate Spring Boot’s capabilities is using the Spring Boot CLI, a command-line tool. Perform the following steps:</p><p>Install the Spring Boot command-line tool by downloading the spring-boot-cli-1.3.5.RELEASE-bin.zip file from <a href="http://repo.spring.io/release/org/springframework/boot/spring-boot-cli/1.3.5.RELEASE/spring-boot-cli-1.3.5.RELEASE-bin.zip">http://repo.spring.io/release/org/springframework/boot/spring-boot-cli/1.3.5.RELEASE/spring-boot-cli-1.3.5.RELEASE-bin.zip</a>.<br>Unzip the file into a directory of your choice. Open a terminal window and change the terminal prompt to the bin folder.<br>Ensure that the bin folder is added to the system path so that Spring Boot can be run from any location.</p><p>Verify the installation with the following command. If successful, the Spring CLI version will be printed in the console:</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-variable">$spring</span> –-version<br>Spring CLI v1.3.5.RELEASE<br></code></pre></td></tr></table></figure><p>As the next step, a quick REST service will be developed in Groovy, which is supported out of the box in Spring Boot. To do so, copy and paste the following code using any editor of choice and save it as myfirstapp.groovy in any folder:<br>@RestController<br>class HelloworldController {<br>    @RequestMapping(“/“)<br>    String sayHello() {<br>        “Hello World!”<br>    }<br>}<br>In order to run this Groovy application, go to the folder where myfirstapp.groovy is saved and execute the following command. The last few lines of the server start-up log will be similar to the following:</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-variable">$spring</span> run myfirstapp.groovy <br><br>2016-05-09 18:13:55.351  INFO 35861 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet <span class="hljs-string">&#x27;dispatcherServlet&#x27;</span>: initialization started<br>2016-05-09 18:13:55.375  INFO 35861 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet <span class="hljs-string">&#x27;dispatcherServlet&#x27;</span>: initialization completed <span class="hljs-keyword">in</span> 24 ms<br></code></pre></td></tr></table></figure><p>Open a browser window and go to <a href="http://localhost:8080/">http://localhost:8080</a>; the browser will display the following message:<br>Hello World!</p><p>There is no war file created, and no Tomcat server was run. Spring Boot automatically picked up Tomcat as the webserver and embedded it into the application. This is a very basic, minimal microservice. The @RestController annotation, used in the previous code, will be examined in detail in the next example.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;developing-the-spring-boot-microservice-using-the-cli&quot;&gt;Developing the Spring Boot microservice using the CLI&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;The</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://mirsery.github.io/2021/07/12/java/Spring%20Integration/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Spring%20Integration/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="spring-integration">Spring integration</span></h1><p>Spring Integration能在基于Spring的应用中进行简单的消息通信，并通过简单的适配器与外部系统集成。这些适配器提供了一个更高级别的抽象，超越 了Spring对远程调用、消息和调度的支持。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;spring-integration&quot;&gt;Spring integration&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;Spring Integration能在基于Spring的应用中进行简单的消息通信，并通过简单的适配器与外部系统集成。这些适配器提供了一个更高级别</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>springboot interceptor</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Spring%20interceptor/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Spring%20interceptor/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="interceptor">interceptor</span></h1><p>Spring MVC interceptor intercepts the actual request and response. Interceptors are a special web programming technique, where we can execute a certain piece of logic before or after a web request is processed. </p><h2><span id="working-with-interceptors">working with interceptors</span></h2><p>As I have already mentioned, interceptors are used to intercept actual web requests before or after processing them. We can relate the concept of interceptors in Spring MVC to the filter concept in Servlet programming. In Spring MVC, interceptors are special classes that must implement the org.springframework.web.servlet.HandlerInterceptor interface. The HandlerInterceptor interface defines three important methods, as follows:<br>preHandle: This method will get called just before the web request reaches the Controller for execution<br>postHandle: This method will get called just after the Controller method execution<br>afterCompletion: This method will get called after the completion of the entire web request cycle<br>Once we create our own interceptor, by implementing the HandlerInterceptor interface, we need to configure it in our web application context in order for it to take effect.</p><h2><span id="configure-an-interceptor">configure an interceptor</span></h2><p> a interceptor ‘s class demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.packt.webstore.interceptor;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.apache.log4j.Logger;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProcessingTimeLogInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger LOGGER =Logger.getLogger(ProcessingTimeLogInterceptor.class);<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">     HttpServletResponse response, Object handler)</span> </span>&#123;<br>           <span class="hljs-keyword">long</span> startTime = System.currentTimeMillis();<br>           request.setAttribute(<span class="hljs-string">&quot;startTime&quot;</span>, startTime);<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>       &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">       HttpServletResponse response, Object handler, ModelAndView</span></span><br><span class="hljs-params"><span class="hljs-function">       modelAndView)</span> </span>&#123;<br>           String queryString = request.getQueryString() == <span class="hljs-keyword">null</span> ?<br>   <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;?&quot;</span> + request.getQueryString();<br>           String path = request.getRequestURL() + queryString;<br>           <span class="hljs-keyword">long</span> startTime = (Long)<br>           request.getAttribute(<span class="hljs-string">&quot;startTime&quot;</span>);<br>           <span class="hljs-keyword">long</span> endTime = System.currentTimeMillis();<br>           LOGGER.info(String.format(<span class="hljs-string">&quot;%s millisecond taken to process the request %s.&quot;</span>,(endTime - startTime), path));<br>    &#125;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">       HttpServletResponse response, Object handler, Exception</span></span><br><span class="hljs-params"><span class="hljs-function">       exceptionIfAny)</span></span>&#123;<br>          <span class="hljs-comment">// NO operation.</span><br>       &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>open your web application context configuration file WebApplicationContextConfig.java, add the following method to it, and save the file:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>    registry.addInterceptor(<span class="hljs-keyword">new</span><br>    ProcessingTimeLogInterceptor());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;interceptor&quot;&gt;interceptor&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;Spring MVC interceptor intercepts the actual request and response. Interceptors are a s</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
    <category term="interceptor" scheme="https://mirsery.github.io/tags/interceptor/"/>
    
  </entry>
  
  <entry>
    <title>Spring 框架中的@import注解</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Spring%20%E4%B8%AD@import%20%E6%B3%A8%E8%A7%A3/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Spring%20%E4%B8%AD@import%20%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="spring-框架中的import注解">Spring 框架中的@import注解</span></h1><blockquote><p> @import注解是Spring基于java注解配置的主要组成部分，import注解提供了@Bean注解的功能，同时还有原来组织多个分散的@Configuration的功能。</p></blockquote><h2><span id="import注解可以引入其他的configuration">import注解可以引入其他的configuration</span></h2><p>example  code :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TestService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(&#123;ConfigB.class&#125;)</span>     <span class="hljs-comment">//@Import的优先于本身的的类定义加载</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigA</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TestService <span class="hljs-title">getTestService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TestServiceA();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigB</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TestService <span class="hljs-title">getTestServiceB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TestServiceB();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>场景类代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(ConfigA.class);<br>    TestService testService = applicationContext.getBean(TestService.class);<br>    testService.test();<br>    <span class="hljs-comment">//generate TestServiceB</span><br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="import-注解也可以直接初始化其他类的bean">import 注解也可以直接初始化其他类的Bean</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(&#123;TestServiceC.class&#125;)</span>     <span class="hljs-comment">//@Import的优先于本身的的类定义加载</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigA</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TestService <span class="hljs-title">getTestService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TestServiceA();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>场景类保持不变，此时TestService实例会变成TestServiceC 的实例。</p><h2><span id="个性化加载指定实现importselector">个性化加载，指定实现ImportSelector</span></h2><p>实现importSelector接口可实现个性化加载，下面是示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyimportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ImportSelector</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Select and return the names of which class(es) should be imported based on the &#123;<span class="hljs-doctag">@link</span> AnnotationMetadata&#125; of the</span><br><span class="hljs-comment">     * importing @&#123;<span class="hljs-doctag">@link</span> Configuration&#125; class.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> importingClassMetadata</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;com.mirsery.test.webtest.anno.TestServiceA&quot;</span>&#125;;<span class="hljs-comment">//    可以直接返回实体或者对应的config配置类</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基于AnnotationMetadata的参数实现动态加载类示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Import(My1importSelector.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableTestService &#123;<br>    <span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">My1importSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ImportSelector</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Select and return the names of which class(es) should be imported based on the &#123;<span class="hljs-doctag">@link</span> AnnotationMetadata&#125; of the</span><br><span class="hljs-comment">     * importing @&#123;<span class="hljs-doctag">@link</span> Configuration&#125; class.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> importingClassMetadata</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        Map&lt;String , Object&gt; map = importingClassMetadata.getAnnotationAttributes(EnableTestService.class.getName(), <span class="hljs-keyword">true</span>);<br>        String name = (String) map.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-keyword">if</span> (Objects.equals(name, <span class="hljs-string">&quot;B&quot;</span>)) &#123;<span class="hljs-comment">//</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;com.mirsery.test.webtest.anno.ConfigB&quot;</span>&#125;;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br><br>场景类直接使用标注<br><span class="hljs-meta">@EnableTestService(name=&quot;B&quot;)</span><br></code></pre></td></tr></table></figure><h2><span id="实现importbeandefinitionregistrar-接口个性化加载">实现ImportBeanDefinitionRegistrar 接口个性化加载</span></h2><p>和importSelector 类型，想要重新定义Bean，例如动态注入属性改变Bean的类型和Scope等等就需要通过实现ImportBeanDefinitionRegister的类实现,下面是示例代码:<br>//TODO</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;spring-框架中的import注解&quot;&gt;Spring 框架中的@import注解&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; @import注解是Spring基于java注解配置的主要组成部分，import注解提供了@Bean注解的功能，</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
    <category term="annotation" scheme="https://mirsery.github.io/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC参数绑定</title>
    <link href="https://mirsery.github.io/2021/07/12/java/SpringMVC%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/"/>
    <id>https://mirsery.github.io/2021/07/12/java/SpringMVC%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="springmvc参数绑定">SpringMVC参数绑定</span></h1><blockquote><p> 转载自<a href="https://mp.weixin.qq.com/s/ljCX88T8EZO2TIVs7NUvCg">一篇文章搞定SpringMVC参数绑定</a><br>SpringMVC参数绑定，简单来说就是将客户端请求的key/value数据绑定到controller方法的形参上，然后就可以在controller中使用该参数了。</p></blockquote><!-- toc --><ul><li><a href="#requestheader-%E6%B3%A8%E8%A7%A3">@RequestHeader 注解</a></li><li><a href="#cookilevalue-%E6%B3%A8%E8%A7%A3">@CookileValue 注解</a></li><li><a href="#requestparam-%E6%B3%A8%E8%A7%A3">@RequestParam 注解</a></li><li><a href="#requesrbody-%E6%B3%A8%E8%A7%A3">RequesrBody 注解</a></li></ul><!-- tocstop --><p>##@PathVariable 注解<br>@PathVariable 是用来获得请求url中的动态参数的，可以将URL中的变量映射到功能处理方法的参数上，其中URL 中的 {xxx} 占位符可以通过@PathVariable(“xxx“) 绑定到操作方法的入参中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/testUrlPathParam/&#123;param1&#125;/&#123;param2&#125;&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUrlPathParam</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-meta">@PathVariable</span> String param1,</span></span><br><span class="hljs-params"><span class="hljs-function">                                <span class="hljs-meta">@PathVariable</span> String param2)</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;通过PathVariable获取的参数param1=&quot;</span> + param1);<br>       System.out.println(<span class="hljs-string">&quot;通过PathVariable获取的参数param2=&quot;</span> + param2);<br>   &#125;<br></code></pre></td></tr></table></figure><h2><span id="requestheader-注解">@RequestHeader 注解</span></h2><p>@RequestHeader 注解，可以把Request请求header部分的值绑定到方法的参数上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/testHeaderParam&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testHeaderParam</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-meta">@RequestHeader</span> String param1)</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;通过RequestHeader获取的参数param1=&quot;</span> + param1);<br>   &#125;<br></code></pre></td></tr></table></figure><h2><span id="cookilevalue-注解">@CookileValue 注解</span></h2><p>@CookileValue 注解可以把Resquest header中关于Cookie 的值绑定到方法的参数上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/testCookieParam&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCookieParam</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  <span class="hljs-meta">@CookieValue</span> String sessionid)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;通过CookieValue获取的参数sessionid=&quot;</span> + sessionid);<br>    &#125;<br></code></pre></td></tr></table></figure><h2><span id="requestparam-注解">@RequestParam 注解</span></h2><p>@RequestParam注解用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容。提交方式为get或post。（Http协议中，form的enctype属性为编码方式，常用有两种：application/x-www-form-urlencoded和multipart/form-data，默认为application/x-www-form-urlencoded）；<br>@RequestParam注解实质是将Request.getParameter() 中的Key-Value参数Map利用Spring的转化机制ConversionService配置，转化成参数接收对象或字段，<br>get方式中queryString的值，和post方式中body data的值都会被Servlet接受到并转化到Request.getParameter()参数集中，所以@RequestParam可以获取的到；<br>该注解有三个属性： value、required、defaultValue； value用来指定要传入值的id名称，required用来指示参数是否必录，defaultValue表示参数不传时候的默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/testRequestParam&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRequestParam</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  <span class="hljs-meta">@RequestParam(value = &quot;num&quot;, required = true, defaultValue = &quot;0&quot;)</span> <span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;通过RequestParam获取的参数num=&quot;</span> + num);<br>   &#125;<br></code></pre></td></tr></table></figure><h2><span id="requesrbody-注解">RequesrBody 注解</span></h2><p>@RequestBody注解用来处理HttpEntity（请求体）传递过来的数据，一般用来处理非Content-Type: application/x-www-form-urlencoded编码格式的数据；<br>GET请求中，因为没有HttpEntity，所以@RequestBody并不适用；<br>POST请求中，通过HttpEntity传递的参数，必须要在请求头中声明数据的类型Content-Type，SpringMVC通过使用HandlerAdapter配置的HttpMessageConverters来解析HttpEntity中的数据，然后绑定到相应的bean上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/testRequestBody&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRequestBody</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-meta">@RequestBody</span> String bodyStr)</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;通过RequestBody获取的参数bodyStr=&quot;</span> + bodyStr);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;springmvc参数绑定&quot;&gt;SpringMVC参数绑定&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 转载自&lt;a href=&quot;https://mp.weixin.qq.com/s/ljCX88T8EZO2TIVs7NUvCg&quot;&gt;一篇文章搞定</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot自带的md5摘要算法使用</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Springboot%20%E6%A1%86%E6%9E%B6%E8%87%AA%E5%B8%A6%E7%9A%84md5%E6%91%98%E8%A6%81/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Springboot%20%E6%A1%86%E6%9E%B6%E8%87%AA%E5%B8%A6%E7%9A%84md5%E6%91%98%E8%A6%81/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="springboot自带的md5摘要算法使用">springboot自带的md5摘要算法使用</span></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.util.DigestUtils;<br><br>DigestUtils.md5DigestAsHex(<span class="hljs-string">&quot;需要摘要的字符串xxxxx&quot;</span>.getBytes()); 默认是采用的<span class="hljs-number">32</span>位的md5信息摘要算法<br><br>md5(str,<span class="hljs-number">32</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;springboot自带的md5摘要算法使用&quot;&gt;springboot自带的md5摘要算法使用&lt;/span&gt;&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
    <category term="md5" scheme="https://mirsery.github.io/tags/md5/"/>
    
  </entry>
  
  <entry>
    <title>springboot自带的事件驱动模型使用</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Springboot%E8%87%AA%E5%B8%A6%E7%9A%84%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E4%BD%BF%E7%94%A8/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Springboot%E8%87%AA%E5%B8%A6%E7%9A%84%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E4%BD%BF%E7%94%A8/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="springboot自带的事件驱动模型使用">springboot自带的事件驱动模型使用</span></h1><blockquote><p> Springboot框架自行封装了一套发布订阅模式可以供我们日常开发的使用</p></blockquote><p>##自定义事件类<br>在springboot中继承 <strong>ApplicationEvent</strong>类可以实现自定义事件<br>下面是示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ApplicationEvent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestEvent</span><span class="hljs-params">(Object source, String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(source);<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMessage</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>##定义事件监听组件<br>只要实现<strong>ApplicationListner<t>接口</t></strong>，组件就可以订阅相关的事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestEventListerner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ApplicationListener</span>&lt;<span class="hljs-title">TestEvent</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Handle an application event.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> event the event to respond to</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onApplicationEvent</span><span class="hljs-params">(TestEvent event)</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.getClass() + <span class="hljs-string">&quot; message is &quot;</span> + event.getMessage() + <span class="hljs-string">&quot;, source is :&quot;</span> + event.getSource());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="事件发布">事件发布</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ApplicationContext applicationContext = SpringApplication.run(WebTestApplication.class, args);<br>TestEvent test = <span class="hljs-keyword">new</span> TestEvent(<span class="hljs-string">&quot;test-code&quot;</span>, <span class="hljs-string">&quot;测试事件发生&quot;</span>);<br>applicationContext.publishEvent(test);<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;springboot自带的事件驱动模型使用&quot;&gt;springboot自带的事件驱动模型使用&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Springboot框架自行封装了一套发布订阅模式可以供我们日常开发的使用&lt;/p&gt;
&lt;/blockquot</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud eureka注册中心搭建</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Springcloud%20eureka%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Springcloud%20eureka%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="springcloud-eureka注册中心搭建">SpringCloud eureka注册中心搭建</span></h1><blockquote><p> 搭建eureka注册中心，并集成springboot-admin 监控<br>spring-boot-starter-parent 版本号为 <strong>2.3.10.RELEASE</strong><br>spring-cloud-dependencies 版本为 <strong>Hoxton.SR11</strong></p></blockquote><h2><span id="服务端配置">服务端配置</span></h2><p>服务端直接采用idea新建一个springboot项目，选择对应的版本号以及对应的注册中心。<br>下面是<strong>pom.xml</strong>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.hytiot.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>eureka-hytiot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>eureka-hytiot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR11<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot-admin.version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot-admin.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">docker.image.prefix</span>&gt;</span>docker.hytiot.com<span class="hljs-tag">&lt;/<span class="hljs-name">docker.image.prefix</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">docker-maven-plugin.version</span>&gt;</span>1.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">docker-maven-plugin.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">base-image.name</span>&gt;</span>openjdk:8-jdk-alpine<span class="hljs-tag">&lt;/<span class="hljs-name">base-image.name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maintainer.email</span>&gt;</span>mirsery@hytiot.com<span class="hljs-tag">&lt;/<span class="hljs-name">maintainer.email</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot-admin.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docker-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;docker-maven-plugin.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">imageName</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">imageTags</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">imageTags</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">baseImage</span>&gt;</span>$&#123;base-image.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">baseImage</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">maintainer</span>&gt;</span>$&#123;maintainer.email&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maintainer</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">cmd</span>&gt;</span>[&quot;java&quot;, &quot;-version&quot;]<span class="hljs-tag">&lt;/<span class="hljs-name">cmd</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;, &quot;$&#123;project.build.finalName&#125;.jar&quot;]<span class="hljs-tag">&lt;/<span class="hljs-name">entryPoint</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件yml为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml">spring:<br>  application:<br>    name: eureka-server<br>  security:<br>    user:<br>      name: username<br>      password: password<br>  boot:<br>    admin:<br>        # springboot-admin的访问路径<br>      context-path: /admin<br>server:<br>  port: 8080<br>eureka:<br>  server:<br>    enable-self-preservation: false<br>  instance:<br>    hostname: localhost<br>    instance-id: $&#123;spring.application.name&#125;<br>  client:<br>    # admin need to be discovered<br>    register-with-eureka: true<br>    fetch-registry: true<br>    healthcheck:<br>      enabled: true<br>    service-url:<br>      defaultZone: http://$&#123;spring.security.user.name&#125;:$&#123;spring.security.user.password&#125;@$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/<br>management:<br>  endpoints:<br>    web:<br>      exposure:<br>        include: &quot;*&quot;<br>  endpoint:<br>    health:<br>      show-details: ALWAYS<br></code></pre></td></tr></table></figure><p>同时启动类需要增加**@EnableEurekaServer** 和**@EnableAdminServer**标注,同时需要配置WebSecurity，<br>下面是配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        http.httpBasic()<br>                .and().authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/actuator/**&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and().csrf().disable();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="简易客户端的配置">简易客户端的配置</span></h2><p>下面是<strong>pom.xml</strong>文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example.actuator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>actuator-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>actuator-client<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR11<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">server:<br>  port: 9101<br>spring:<br>  application:<br>    name: demo-client<br>eureka:<br>  client:<br>    service-url:<br>      defaultZone: http://username:password@serverIp:serverPort/eureka/<br>    healthcheck:<br>      enabled: true<br>  instance:<br>    prefer-ip-address: true<br>management:<br>  endpoints:<br>    web:<br>      exposure:<br>        include: &quot;*&quot;<br>  endpoint:<br>    health:<br>      show-details: ALWAYS<br></code></pre></td></tr></table></figure><p>启动类需要增加**@EnableDiscoveryClient**标注。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;springcloud-eureka注册中心搭建&quot;&gt;SpringCloud eureka注册中心搭建&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 搭建eureka注册中心，并集成springboot-admin 监控&lt;br&gt;spring-b</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Swagger-ui 使用</title>
    <link href="https://mirsery.github.io/2021/07/12/java/Swagger-ui%20%E4%BD%BF%E7%94%A8/"/>
    <id>https://mirsery.github.io/2021/07/12/java/Swagger-ui%20%E4%BD%BF%E7%94%A8/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="swagger-ui-使用">Swagger-ui 使用</span></h1><!-- toc --><ul><li><a href="#%E5%BC%95%E5%85%A5%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96jar%E5%8C%85">引入相关依赖jar包</a></li><li><a href="#%E5%90%AF%E7%94%A8-swagger">启用 swagger</a></li><li><a href="#controller-%E6%B7%BB%E5%8A%A0%E6%8F%8F%E8%BF%B0%E4%BF%A1%E6%81%AF">Controller 添加描述信息</a></li><li><a href="#%E6%8E%A5%E5%8F%A3%E6%B7%BB%E5%8A%A0%E6%8F%8F%E8%BF%B0%E4%BF%A1%E6%81%AF">接口添加描述信息</a></li><li><a href="#%E7%BB%99%E5%AE%9E%E4%BD%93%E7%B1%BB%E6%B7%BB%E5%8A%A0%E6%8F%8F%E8%BF%B0%E4%BF%A1%E6%81%AF">给实体类添加描述信息</a></li></ul><!-- tocstop --><h2><span id="引入相关依赖jar包">引入相关依赖jar包</span></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2><span id="启用-swagger">启用 swagger</span></h2><p>下面是swagger-ui 配置样例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiKey;<br><span class="hljs-keyword">import</span> springfox.documentation.service.AuthorizationScope;<br><span class="hljs-keyword">import</span> springfox.documentation.service.SecurityReference;<br><span class="hljs-keyword">import</span> springfox.documentation.service.SecurityScheme;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: misery</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-04 16:26</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;swagger.enable:false&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> swagger2Enable;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">createRestApi</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())<br>                .enable(swagger2Enable)<br>                .groupName(<span class="hljs-string">&quot;所有&quot;</span>)<br>                .select()<br>                .apis(RequestHandlerSelectors.any())<br>                .paths(PathSelectors.any())<br>                .paths(PathSelectors.regex(<span class="hljs-string">&quot;(?!/error.*).*&quot;</span>))     <span class="hljs-comment">// 去除默认basicController</span><br>                .paths(PathSelectors.regex(<span class="hljs-string">&quot;(?!/actuator.*).*&quot;</span>))    <span class="hljs-comment">//去除actuator</span><br>                .build()<br>                .securityContexts(securityContext())<br>                .securitySchemes(security());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">appApi</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())<br>                .enable(swagger2Enable)<br>                .groupName(<span class="hljs-string">&quot;groupName&quot;</span>)<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.xxxx.xxx&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build()<br>                .securityContexts(securityContext())<br>                .securitySchemes(security());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<br>                .title(<span class="hljs-string">&quot;title&quot;</span>)<br>                .description(<span class="hljs-string">&quot;description&quot;</span>)<br>                .version(<span class="hljs-string">&quot;0.0.1&quot;</span>)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SecurityScheme&gt; <span class="hljs-title">security</span><span class="hljs-params">()</span> </span>&#123;<br>        SecurityScheme token = <span class="hljs-keyword">new</span> ApiKey(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;header&quot;</span>);<br>        List&lt;SecurityScheme&gt; securitySchemeList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        securitySchemeList.add(token);<br>        <span class="hljs-keyword">return</span> securitySchemeList;<br>    &#125;<br><br>    <span class="hljs-function">List&lt;SecurityReference&gt; <span class="hljs-title">defaultAuth</span><span class="hljs-params">()</span> </span>&#123;<br>        AuthorizationScope authorizationScope<br>                = <span class="hljs-keyword">new</span> AuthorizationScope(<span class="hljs-string">&quot;global&quot;</span>, <span class="hljs-string">&quot;accessEverything&quot;</span>);<br>        AuthorizationScope[] authorizationScopes = <span class="hljs-keyword">new</span> AuthorizationScope[<span class="hljs-number">1</span>];<br>        authorizationScopes[<span class="hljs-number">0</span>] = authorizationScope;<br>        List&lt;SecurityReference&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        lists.add(<span class="hljs-keyword">new</span> SecurityReference(<span class="hljs-string">&quot;token&quot;</span>, authorizationScopes));<br>        <span class="hljs-keyword">return</span> lists;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SecurityContext&gt; <span class="hljs-title">securityContext</span><span class="hljs-params">()</span> </span>&#123;<br>        SecurityContext securityContext = SecurityContext.builder()<br>                .securityReferences(defaultAuth())<br>                .build();<br>        List&lt;SecurityContext&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(securityContext);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="controller-添加描述信息">Controller 添加描述信息</span></h2><p>@Api 可以对Controller进行描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;xxx相关接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="接口添加描述信息">接口添加描述信息</span></h2><p>@ApiOperation 可以对接口进行描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GETMapping(&quot;/hi&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;xxxxx接口&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><em><strong>@ApiOperation 注解属性</strong></em></p><table><thead><tr><th>注解属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>接口说明</td></tr><tr><td>notes</td><td>String</td><td>接口发布说明</td></tr><tr><td>tags</td><td>Stirng[]</td><td>标签</td></tr><tr><td>response</td><td>Class&lt;?&gt;</td><td>接口返回类型</td></tr><tr><td>httpMethod</td><td>String</td><td>接口请求方式</td></tr></tbody></table></li><li><p><em><strong>@ApiIgnore</strong></em><br>  Swagger 文档不会显示拥有该注解的接口。</p></li><li><p><em><strong>@ApiImplicitParams</strong></em><br>  用于描述接口的非对象参数集。</p></li><li><p><em><strong>@ApiImplicitParam</strong></em><br>  用于描述接口的非对象参数，一般与 <em><strong>@ApiImplicitParams</strong></em> 组合使用</p></li></ul><table>    <tr>        <td rowspan="15">@ApiImplicitParam</td>    </tr>    <tr>        <td colspan="3">用在@ApiImplicitParams注解中，指定一个请求参数的各个方面</td>    </tr>    <tr>        <td>name</td>        <td colspan="2">参数名</td>    </tr>    <tr>       <td>value</td>        <td colspan="2">参数的汉字说明、解释</td>    </tr>    <tr>       <td>required</td>        <td colspan="2">参数是否必须传</td>    </tr>    <tr>       <td>dataType</td>       <td colspan="2">参数类型，默认String，其它值dataType="Integer"</td>    </tr>    <tr>       <td>defaultValue</td>        <td colspan="2">参数的默认值</td>    </tr>    <tr>       <td rowspan="8">paramType</td>   </tr>    <tr>       <td colspan="2">参数放在哪个地方</td>    </tr> <tr>       <td>header</td>        <td>请求参数的获取@RequestHeader</td> </tr> <tr>       <td>header</td>        <td>请求参数的获取@RequestHeader</td> </tr> <tr>       <td>query</td>        <td>请求参数的获取@RequestParam</td> </tr> <tr>       <td>path</td>        <td>请求参数的获取@PathVariable</td> </tr> <tr>       <td>body</td>        <td>请求参数的获取@RequestBody</td> </tr> <tr>       <td>form</td>        <td>普通表单提交</td> </tr></table><h2><span id="给实体类添加描述信息">给实体类添加描述信息</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(&quot;用户实体&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Entity</span> </span>&#123;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;用户 id&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>@ApiModelProperty 主要属性</li></ul><table><thead><tr><th>注解属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>字段说明</td></tr><tr><td>name</td><td>String</td><td>重写字段名称</td></tr><tr><td>dataType</td><td>Stirng</td><td>重写字段类型</td></tr><tr><td>required</td><td>boolean 是否必填</td><td></td></tr><tr><td>example</td><td>Stirng</td><td>举例说明</td></tr><tr><td>hidden</td><td>boolean</td><td>是否在文档中隐藏该字段</td></tr><tr><td>allowEmptyValue</td><td>boolean</td><td>是否允许为空</td></tr><tr><td>allowableValues</td><td>String</td><td>该字段允许的值，当我们 API 的某个参数为枚举类型时，使用这个属性就可以清楚地告诉 API 使用者该参数所能允许传入的值</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;swagger-ui-使用&quot;&gt;Swagger-ui 使用&lt;/span&gt;&lt;/h1&gt;&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%BC%95%E5%85%A5%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%9</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>fastjson的简单用法</title>
    <link href="https://mirsery.github.io/2021/07/12/java/fastjson%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/"/>
    <id>https://mirsery.github.io/2021/07/12/java/fastjson%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/</id>
    <published>2021-07-12T02:55:16.537Z</published>
    <updated>2021-07-12T02:55:16.537Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="fastjson的简单用法">fastjson的简单用法</span></h1><blockquote><p> 最近项目中接触到fastjson 随手记录下关于fastjson的使用</p></blockquote><!-- toc --><ul><li><a href="#%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96">导入依赖</a></li><li><a href="#json%E5%AD%97%E7%AC%A6%E4%B8%B2-%E7%B1%BB%E5%AE%9E%E4%BE%8B">JSON字符串 -&gt; 类实例</a><ul><li><a href="#%E7%AE%80%E5%8D%95json%E5%AD%97%E7%AC%A6%E4%B8%B2-java%E5%AF%B9%E8%B1%A1">简单json字符串 -&gt; java对象</a></li><li><a href="#%E7%AE%80%E5%8D%95json%E5%AD%97%E7%AC%A6%E4%B8%B2-json%E5%AF%B9%E8%B1%A1">简单json字符串 -&gt; Json对象</a></li><li><a href="#%E7%A8%8D%E5%A4%8D%E6%9D%82json%E5%AD%97%E7%AC%A6%E4%B8%B2-json%E5%AF%B9%E8%B1%A1">稍复杂json字符串 -&gt;Json对象</a></li><li><a href="#%E7%A8%8D%E5%A4%8D%E6%9D%82json%E5%AD%97%E7%AC%A6%E4%B8%B2-java%E5%AF%B9%E8%B1%A1">稍复杂json字符串 -&gt;Java对象</a></li></ul></li></ul><!-- tocstop --><h2><span id="导入依赖">导入依赖</span></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2><span id="json字符串-gt-类实例">JSON字符串 -&gt; 类实例</span></h2><h3><span id="简单json字符串-gt-java对象">简单json字符串 -&gt; java对象</span></h3><p>app.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( String[] args )</span></span><br><span class="hljs-function">    </span>&#123;<br>        String msg = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;java\&quot;,\&quot;sex\&quot;:\&quot;unknown\&quot;,\&quot;age\&quot;:24&#125;&quot;</span>;<br>        User user = JSON.parseObject(msg, User.class);<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@JSONField(name = &quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@JSONField(name = &quot;sex&quot;)</span><br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-meta">@JSONField(name = &quot;age&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span><span class="hljs-params">(String sex)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="简单json字符串-gt-json对象">简单json字符串 -&gt; Json对象</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String msg = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;java\&quot;,\&quot;sex\&quot;:\&quot;unknown\&quot;,\&quot;age\&quot;:24&#125;&quot;</span>;<br>JSONObject jsonObject = JSON.parseObject(msg);<br>System.out.println(jsonObject);<br></code></pre></td></tr></table></figure><h3><span id="稍复杂json字符串-gtjson对象">稍复杂json字符串 -&gt;Json对象</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String msg = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;java\&quot;,\&quot;sex\&quot;:\&quot;unknown\&quot;,\&quot;age\&quot;:24,\&quot;pets\&quot;:[&#123;\&quot;nick_name\&quot;:\&quot;coco\&quot;,\&quot;type\&quot;:\&quot;cat\&quot;&#125;,&#123;\&quot;nick_name\&quot;:\&quot;kimi\&quot;,\&quot;type\&quot;:\&quot;dog\&quot;&#125;]&#125;&quot;</span>;<br>  JSONObject jsonObject = JSON.parseObject(msg);<br></code></pre></td></tr></table></figure><h3><span id="稍复杂json字符串-gtjava对象">稍复杂json字符串 -&gt;Java对象</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( String[] args )</span></span><br><span class="hljs-function">   </span>&#123;<br>       String msg = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;java\&quot;,\&quot;sex\&quot;:\&quot;unknown\&quot;,\&quot;age\&quot;:24,\&quot;pets\&quot;:[&#123;\&quot;nick_name\&quot;:\&quot;coco\&quot;,\&quot;type\&quot;:\&quot;cat\&quot;&#125;,&#123;\&quot;nick_name\&quot;:\&quot;kimi\&quot;,\&quot;type\&quot;:\&quot;dog\&quot;&#125;]&#125;&quot;</span>;<br>       User user = JSON.parseObject(msg, <span class="hljs-keyword">new</span> TypeReference&lt;User&lt;Pet&gt;&gt;()&#123;&#125;);<br>       System.out.println(user);<br>   &#125;<br></code></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-meta">@JSONField(name = &quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@JSONField(name = &quot;sex&quot;)</span><br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-meta">@JSONField(name = &quot;age&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-meta">@JSONField(name = &quot;pets&quot;)</span><br>    <span class="hljs-keyword">private</span> T[] pets;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span><span class="hljs-params">(String sex)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T[] getPets() &#123;<br>        <span class="hljs-keyword">return</span> pets;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPets</span><span class="hljs-params">(T[] pets)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pets = pets;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Pet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span> </span>&#123;<br><br>    <span class="hljs-meta">@JSONField(name = &quot;nick_name&quot;)</span><br>    <span class="hljs-keyword">private</span> String nickName;<br><br>    <span class="hljs-meta">@JSONField(name = &quot;type&quot;)</span><br>    <span class="hljs-keyword">private</span> String type;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getNickName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> nickName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNickName</span><span class="hljs-params">(String nickName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.nickName = nickName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(String type)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.type = type;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;fastjson的简单用法&quot;&gt;fastjson的简单用法&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 最近项目中接触到fastjson 随手记录下关于fastjson的使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- toc --&gt;

&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="json" scheme="https://mirsery.github.io/tags/json/"/>
    
    <category term="fastjson" scheme="https://mirsery.github.io/tags/fastjson/"/>
    
  </entry>
  
</feed>
