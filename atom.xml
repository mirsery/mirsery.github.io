<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mirsery</title>
  
  <subtitle>兴趣使然博客</subtitle>
  <link href="https://mirsery.github.io/atom.xml" rel="self"/>
  
  <link href="https://mirsery.github.io/"/>
  <updated>2021-07-27T06:52:03.000Z</updated>
  <id>https://mirsery.github.io/</id>
  
  <author>
    <name>mirsery</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu内核升级降级和切换</title>
    <link href="https://mirsery.github.io/2021/07/27/linux/ubuntu%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7%E9%99%8D%E7%BA%A7%E5%92%8C%E5%88%87%E6%8D%A2/"/>
    <id>https://mirsery.github.io/2021/07/27/linux/ubuntu%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7%E9%99%8D%E7%BA%A7%E5%92%8C%E5%88%87%E6%8D%A2/</id>
    <published>2021-07-27T06:52:03.000Z</published>
    <updated>2021-07-27T06:52:03.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#------">内核下载地址</a></li><li><a href="#------">手动升级内核</a></li><li><a href="#------">切换内核版本</a></li></ul><!-- tocstop --><blockquote><p>背景 笔者目前运行的系统是Ubuntu 20.04.2 LTS</p></blockquote><h2 id="内核下载地址"><a href="#内核下载地址" class="headerlink" title="内核下载地址"></a>内核下载地址</h2><p>下面是内核下载地址 <a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/">https://kernel.ubuntu.com/~kernel-ppa/mainline/</a></p><p><img src="/2021/07/27/linux/ubuntu%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7%E9%99%8D%E7%BA%A7%E5%92%8C%E5%88%87%E6%8D%A2/BC9FEFBF-AE3C-4C86-95DB-36A36D1824F1.png"></p><h2 id="手动升级内核"><a href="#手动升级内核" class="headerlink" title="手动升级内核"></a>手动升级内核</h2><p>选择对应的内核版本点进去，根据系统硬件的架构选择相应的目录。</p><p><img src="/2021/07/27/linux/ubuntu%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7%E9%99%8D%E7%BA%A7%E5%92%8C%E5%88%87%E6%8D%A2/4145D291-1B70-4C41-99B8-5C2E15B2CE25.png"></p><blockquote><p>一般情况下pc都是选择amd64，arm板选择arm版本。</p></blockquote><p>下载对应的deb文件（headers、image、modules）即可。</p><p>下载完成后，进入到下载目录，执行以下 命令安装内核文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dpkg -i *.deb<br></code></pre></td></tr></table></figure><p>留意安装过程中是否会有报错信息，安装完成后重启计算机，运行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前计算机运行的内核版本号是否为你刚刚下载的版本号</span><br>uanme -a <br></code></pre></td></tr></table></figure><h2 id="切换内核版本"><a href="#切换内核版本" class="headerlink" title="切换内核版本"></a>切换内核版本</h2><blockquote><p>首先需要下载和安装你想要切换的内核版本，操作方法和上述步骤一致。</p></blockquote><p>下载并安装对应的内核文件之后，你可以运行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep menuentry /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><p>查看对应的系统中安装的内核版本的列表是否存在你刚刚安装的内核版本，如果没有则返回上一步核对安装过程中是否有纰漏。如果没有问题则复制你想要运行的内核版本的名称的全称。<br>修改<code>/etc/default/grub</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GRUB_DEFALT=<span class="hljs-string">&quot;你刚刚复制的内核版本全名称&quot;</span><br></code></pre></td></tr></table></figure><p>执行更新命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update grub<br></code></pre></td></tr></table></figure><p>看是否有报错信息，如果有保存信息，根据报错信息的提示进行修改。修改完成之后重复上一步的更新操作直至成功为止。然后重启电脑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo reboot<br></code></pre></td></tr></table></figure><p>重启电脑之后查看内核版本是否更换为对应的你所切换的版本，然后再次打开<code>/etc/default/grub</code>文件，将 GRUB_DEFALT值修改为原先的0.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#------&quot;&gt;内核下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#------&quot;&gt;手动升级内核&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#------&quot;&gt;切换内核版本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;</summary>
      
    
    
    
    <category term="linux" scheme="https://mirsery.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://mirsery.github.io/tags/linux/"/>
    
    <category term="ubuntu" scheme="https://mirsery.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>mac使用技巧</title>
    <link href="https://mirsery.github.io/2021/07/27/mac/2021/mac%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://mirsery.github.io/2021/07/27/mac/2021/mac%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2021-07-27T04:36:53.000Z</published>
    <updated>2021-07-27T04:36:53.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#icloud-drive-----ignore--">iCloud Drive同步中实现ignore功能</a></li></ul><!-- tocstop --><h2 id="iCloud-Drive同步中实现ignore功能"><a href="#iCloud-Drive同步中实现ignore功能" class="headerlink" title="iCloud Drive同步中实现ignore功能"></a>iCloud Drive同步中实现ignore功能</h2><blockquote><p>该方法来自于苹果帮助社区<a href="https://discussions.apple.com/thread/8137146">Sal the newyorker</a></p></blockquote><p>apple iCloud Drive中如果有不想同步的文件夹，则可修改该文件夹的名称。只需要在该文件夹（不需要同步）的名字后面新增**.nosync**后缀。如果希望apple iCloudDrive同步这个文件则可以去除该后缀。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#icloud-drive-----ignore--&quot;&gt;iCloud Drive同步中实现ignore功能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;h2 id=&quot;iCloud-Drive同</summary>
      
    
    
    
    <category term="mac" scheme="https://mirsery.github.io/categories/mac/"/>
    
    
    <category term="mac" scheme="https://mirsery.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Future模式</title>
    <link href="https://mirsery.github.io/2021/07/24/java/2021/Future%E6%A8%A1%E5%BC%8F/"/>
    <id>https://mirsery.github.io/2021/07/24/java/2021/Future%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-07-24T13:48:07.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#future------">future 模式的概述</a></li><li><a href="#future--------">future 模式的简单实现</a></li><li><a href="#jdk--future--">JDK中的Future模式</a></li></ul><!-- tocstop --><blockquote><p>future 模式是多线程开发中比较常见的一种模式，他的核心思想是利用多线程来实现耗时操作的异步调用。主要利用多线程去处理耗时的任务，并支持异步回调处理相关的信息。</p></blockquote><h2 id="future-模式的概述"><a href="#future-模式的概述" class="headerlink" title="future 模式的概述"></a>future 模式的概述</h2><p>future模式优点类似快递订餐，比如我们利用xx软件进行外卖下单。下完单之后我们可以继续我们上班的摸鱼动作，等待骑手的电话。其中下完单之后会立刻返回一个订单号，我们可以根据这个订单号去获取相应的订单信息。对于future模式来说，虽然他并不能立刻给予我们所需要的数据（外卖），但是他会返回订单给到我们，我们可以借由订单去获取相应的骑手以及派送状态信息。可以充分的节约我们的摸鱼时间。</p><h2 id="future-模式的简单实现"><a href="#future-模式的简单实现" class="headerlink" title="future 模式的简单实现"></a>future 模式的简单实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Data</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getFood</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//取餐</span><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> record <span class="hljs-title">RealData</span><span class="hljs-params">(String result)</span> implements Data </span>&#123;<span class="hljs-comment">//since @jdk14</span><br><br>    <span class="hljs-keyword">public</span> RealData &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">5</span> * <span class="hljs-number">1000</span>);<span class="hljs-comment">// 午餐制作</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getFood</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FutureData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Data</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> RealData realData = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> isReady = <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRealData</span><span class="hljs-params">(RealData realData)</span> </span>&#123; <span class="hljs-comment">// 骑手取餐</span><br>        <span class="hljs-keyword">if</span> (isReady)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">this</span>.realData = realData;<br>        isReady = <span class="hljs-keyword">true</span>;<br>        notifyAll();<span class="hljs-comment">//唤醒当前对象上的等待线程</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> String <span class="hljs-title">getFood</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//用户取餐</span><br>        <span class="hljs-keyword">while</span> (!isReady) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<span class="hljs-comment">//当前线程进入等待并释放锁</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> realData.getFood();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Data <span class="hljs-title">request</span><span class="hljs-params">(String order)</span> </span>&#123;<br>            FutureData futureData = <span class="hljs-keyword">new</span> FutureData();<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>                RealData realData = <span class="hljs-keyword">new</span> RealData(order);<br>                futureData.setRealData(realData);<br>            &#125;).start();<br>            <span class="hljs-keyword">return</span> futureData;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Client client = <span class="hljs-keyword">new</span> Client();<br>        Data data = client.request(<span class="hljs-string">&quot;鱼香肉丝&quot;</span>); <span class="hljs-comment">//开始订餐</span><br>        System.out.println(<span class="hljs-string">&quot;订单已经提交，骑手赶往店铺&quot;</span>);<span class="hljs-comment">//订餐完成</span><br><br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// do something 摸鱼时间</span><br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;food is: &quot;</span> + data.getFood()); <span class="hljs-comment">//拿到外卖</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="JDK中的Future模式"><a href="#JDK中的Future模式" class="headerlink" title="JDK中的Future模式"></a>JDK中的Future模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Food</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> String food;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Food</span><span class="hljs-params">(String food)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.food = food;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        Thread.sleep(<span class="hljs-number">5</span> * <span class="hljs-number">1000</span>);<span class="hljs-comment">//配送</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.food;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    FutureTask&lt;String&gt; futureTask = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(<span class="hljs-keyword">new</span> Food(<span class="hljs-string">&quot;鱼香肉丝&quot;</span>));<br>    ExecutorService service = Executors.newSingleThreadExecutor();<br>    service.execute(futureTask);<br><br>    System.out.println(<span class="hljs-string">&quot;下单完成&quot;</span>);<br>    <br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">6</span> * <span class="hljs-number">1000</span>);<span class="hljs-comment">//摸鱼</span><br>        System.out.println(<span class="hljs-string">&quot;lunch is : &quot;</span> + futureTask.get());<br>        service.shutdown();<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException | ExecutionException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">future 模式是多线程开发中比较常见的一种模式，他的核心思想是利用多线程来实现耗时操作的异步调用。主要利用多线程去处理耗时的任务，并支持异步回调...</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://mirsery.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>线程阻塞工具 Locksupport</title>
    <link href="https://mirsery.github.io/2021/07/22/java/2021/Locksupport%E7%BA%BF%E7%A8%8B%E9%98%BB%E5%A1%9E%E5%B7%A5%E5%85%B7/"/>
    <id>https://mirsery.github.io/2021/07/22/java/2021/Locksupport%E7%BA%BF%E7%A8%8B%E9%98%BB%E5%A1%9E%E5%B7%A5%E5%85%B7/</id>
    <published>2021-07-22T12:31:30.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Lock Support 是一个非常方便的线程阻塞工具，他可以在线程内任意位置让线程阻塞。与 <strong>Thread.suspend()</strong> 方法相比，他补充了由于 <strong>resume( )</strong> 方法发生导致线程无法继续执行的情况。和<strong>Object.wait( )<strong>相比，他不需要先获得对象的锁，也不会抛出</strong>InterruptedException</strong>异常。</p></blockquote><!-- toc --><ul><li><a href="#locksupport-----">LockSupport 静态方法</a></li><li><a href="#locksupport------">LockSupport 的简易用法</a></li></ul><!-- tocstop --><h2 id="LockSupport-静态方法"><a href="#LockSupport-静态方法" class="headerlink" title="LockSupport 静态方法"></a>LockSupport 静态方法</h2><p><strong>+ setCurrentBlocker( )</strong><br><strong>+ unpark( )</strong><br><strong>+ park( )</strong><br><strong>+ parkNanos( )</strong><br><strong>+ parkUntil( )</strong><br><strong>+ getBlocker( )</strong><br><strong>+ park( )</strong><br><strong>+ parkNanos( )</strong><br><strong>+ parkUntil( )</strong><br><strong>+ getThreadId( )</strong></p><p>LockSupport 的静态方法 <strong>park(  )</strong> 可以阻塞当前线程，类似的还有 <strong>parkNanos( )</strong> , <strong>parkUtil( )</strong> 等方法。</p><h2 id="LockSupport-的简易用法"><a href="#LockSupport-的简易用法" class="headerlink" title="LockSupport 的简易用法"></a>LockSupport 的简易用法</h2><p>下面是JDK中的先进先出的非可重入锁的简易示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FIFOMutex</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicBoolean locked  = <span class="hljs-keyword">new</span> AtomicBoolean(<span class="hljs-keyword">false</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Queue&lt;Thread&gt; waiters = <span class="hljs-keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;<br>     <span class="hljs-keyword">boolean</span> wasInterrupted = <span class="hljs-keyword">false</span>;<br>     <span class="hljs-comment">// publish current thread for unparkers</span><br>     waiters.add(Thread.currentThread());<br><br>     <span class="hljs-comment">// Block while not first in queue or cannot acquire lock</span><br>     <span class="hljs-keyword">while</span> (waiters.peek() != Thread.currentThread() ||<br>            !locked.compareAndSet(<span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>)) &#123;<br>       LockSupport.park(<span class="hljs-keyword">this</span>);<br>       <span class="hljs-comment">// ignore interrupts while waiting</span><br>       <span class="hljs-keyword">if</span> (Thread.interrupted())<br>         wasInterrupted = <span class="hljs-keyword">true</span>;<br>     &#125;<br><br>     waiters.remove();<br>     <span class="hljs-comment">// ensure correct interrupt status on return</span><br>     <span class="hljs-keyword">if</span> (wasInterrupted)<br>       Thread.currentThread().interrupt();<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span> </span>&#123;<br>     locked.set(<span class="hljs-keyword">false</span>);<br>     LockSupport.unpark(waiters.peek());<br>   &#125;<br><br>   <span class="hljs-keyword">static</span> &#123;<br>     <span class="hljs-comment">// Reduce the risk of &quot;lost unpark&quot; due to classloading</span><br>     Class&lt;?&gt; ensureLoaded = LockSupport.class;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Lock Support 是一个非常方便的线程阻塞工具，他可以在线程内任意位置让线程阻塞。与 **Thread.suspend()** 方法相比，他补充了由于 **resume( )** 方法发生导致线程无法继续执行的情况...</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="线程" scheme="https://mirsery.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="java" scheme="https://mirsery.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Semaphore 信号量</title>
    <link href="https://mirsery.github.io/2021/07/21/java/2021/Semaphore%20%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
    <id>https://mirsery.github.io/2021/07/21/java/2021/Semaphore%20%E4%BF%A1%E5%8F%B7%E9%87%8F/</id>
    <published>2021-07-21T14:55:01.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<p>信号量为多线程协作提供了更为详细的控制方法，广义上说信号量是锁的扩展。无论是内部锁还是重入锁，一次只能允许一个线程访问一个资源，但是信号量却可以指定多个线程并行访问某一个资源。</p><h2 id="信号量提供的构造函数"><a href="#信号量提供的构造函数" class="headerlink" title="信号量提供的构造函数"></a>信号量提供的构造函数</h2><p>JDK源码中 Semaphore 构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a &#123;<span class="hljs-doctag">@code</span> Semaphore&#125; with the given number of</span><br><span class="hljs-comment"> * permits and nonfair fairness setting.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> permits the initial number of permits available.</span><br><span class="hljs-comment"> *        This value may be negative, in which case releases</span><br><span class="hljs-comment"> *        must occur before any acquires will be granted.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Semaphore</span><span class="hljs-params">(<span class="hljs-keyword">int</span> permits)</span> </span>&#123;<br>    sync = <span class="hljs-keyword">new</span> NonfairSync(permits);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a &#123;<span class="hljs-doctag">@code</span> Semaphore&#125; with the given number of</span><br><span class="hljs-comment"> * permits and the given fairness setting.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> permits the initial number of permits available.</span><br><span class="hljs-comment"> *        This value may be negative, in which case releases</span><br><span class="hljs-comment"> *        must occur before any acquires will be granted.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> fair &#123;<span class="hljs-doctag">@code</span> true&#125; if this semaphore will guarantee</span><br><span class="hljs-comment"> *        first-in first-out granting of permits under contention,</span><br><span class="hljs-comment"> *        else &#123;<span class="hljs-doctag">@code</span> false&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Semaphore</span><span class="hljs-params">(<span class="hljs-keyword">int</span> permits, <span class="hljs-keyword">boolean</span> fair)</span> </span>&#123;<br>    sync = fair ? <span class="hljs-keyword">new</span> FairSync(permits) : <span class="hljs-keyword">new</span> NonfairSync(permits);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>permits</strong> 信号量的准入数，即同时能申请多少个许可。</p><p>下面是jdk中信号量使用的简单的例子:<br>Semaphores are often used to restrict the number of threads than can access some (physical or logical) resource.<br>For example, here is a class that uses a semaphore to control access to a pool of items.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pool</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_AVAILABLE = <span class="hljs-number">100</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Semaphore available = <span class="hljs-keyword">new</span> Semaphore(MAX_AVAILABLE, <span class="hljs-keyword">true</span>);<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getItem</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>     available.acquire();<br>     <span class="hljs-keyword">return</span> getNextAvailableItem();<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putItem</span><span class="hljs-params">(Object x)</span> </span>&#123;<br>     <span class="hljs-keyword">if</span> (markAsUnused(x))<br>       available.release();<br>   &#125;<br><br>   <span class="hljs-comment">// Not a particularly efficient data structure; just for demo</span><br><br>   <span class="hljs-keyword">protected</span> Object[] items = ... whatever kinds of items being managed<br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span>[] used = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[MAX_AVAILABLE];<br><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> Object <span class="hljs-title">getNextAvailableItem</span><span class="hljs-params">()</span> </span>&#123;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX_AVAILABLE; ++i) &#123;<br>       <span class="hljs-keyword">if</span> (!used[i]) &#123;<br>         used[i] = <span class="hljs-keyword">true</span>;<br>         <span class="hljs-keyword">return</span> items[i];<br>       &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>; <span class="hljs-comment">// not reached</span><br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">markAsUnused</span><span class="hljs-params">(Object item)</span> </span>&#123;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX_AVAILABLE; ++i) &#123;<br>       <span class="hljs-keyword">if</span> (item == items[i]) &#123;<br>         <span class="hljs-keyword">if</span> (used[i]) &#123;<br>           used[i] = <span class="hljs-keyword">false</span>;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>         &#125; <span class="hljs-keyword">else</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>       &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">信号量为多线程协作提供了更为详细的控制方法，广义上说信号量是锁的扩展。无论是内部锁还是重入锁，一次只能允许一个线程访问一个资源，但是信号量却可...</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="线程" scheme="https://mirsery.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Condition</title>
    <link href="https://mirsery.github.io/2021/07/20/java/2021/Condition/"/>
    <id>https://mirsery.github.io/2021/07/20/java/2021/Condition/</id>
    <published>2021-07-20T14:48:13.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Condition 一般配合重入锁实现进程间的协作.</p></blockquote><!-- toc --><ul><li><a href="#condition-----">Condition 接口源码</a></li></ul><!-- tocstop --><h2 id="Condition-接口源码"><a href="#Condition-接口源码" class="headerlink" title="Condition 接口源码"></a>Condition 接口源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.util.concurrent.locks;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Condition</span> </span>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Causes the current thread to wait until it is signalled or</span><br><span class="hljs-comment">     * &#123;@linkplain Thread#interrupt interrupted&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;The lock associated with this &#123;@code Condition&#125; is atomically</span><br><span class="hljs-comment">     * released and the current thread becomes disabled for thread scheduling</span><br><span class="hljs-comment">     * purposes and lies dormant until &lt;em&gt;one&lt;/em&gt; of four things happens:</span><br><span class="hljs-comment">     * &lt;ul&gt;</span><br><span class="hljs-comment">     * &lt;li&gt;Some other thread invokes the &#123;@link #signal&#125; method for this</span><br><span class="hljs-comment">     * &#123;@code Condition&#125; and the current thread happens to be chosen as the</span><br><span class="hljs-comment">     * thread to be awakened; or</span><br><span class="hljs-comment">     * &lt;li&gt;Some other thread invokes the &#123;@link #signalAll&#125; method for this</span><br><span class="hljs-comment">     * &#123;@code Condition&#125;; or</span><br><span class="hljs-comment">     * &lt;li&gt;Some other thread &#123;@linkplain Thread#interrupt interrupts&#125; the</span><br><span class="hljs-comment">     * current thread, and interruption of thread suspension is supported; or</span><br><span class="hljs-comment">     * &lt;li&gt;A &amp;quot;&lt;em&gt;spurious wakeup&lt;/em&gt;&amp;quot; occurs.</span><br><span class="hljs-comment">     * &lt;/ul&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;In all cases, before this method can return the current thread must</span><br><span class="hljs-comment">     * re-acquire the lock associated with this condition. When the</span><br><span class="hljs-comment">     * thread returns it is &lt;em&gt;guaranteed&lt;/em&gt; to hold this lock.</span><br><span class="hljs-comment">  */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;<br>  <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">awaitUninterruptibly</span><span class="hljs-params">()</span></span>;<br>  <br>    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">awaitNanos</span><span class="hljs-params">(<span class="hljs-keyword">long</span> nanosTimeout)</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">await</span><span class="hljs-params">(<span class="hljs-keyword">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;<br>    <br>  <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">awaitUntil</span><span class="hljs-params">(Date deadline)</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;<br>    <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Wakes up one waiting thread.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;If any threads are waiting on this condition then one</span><br><span class="hljs-comment">     * is selected for waking up. That thread must then re-acquire the</span><br><span class="hljs-comment">     * lock before returning from &#123;<span class="hljs-doctag">@code</span> await&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;Implementation Considerations&lt;/b&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;An implementation may (and typically does) require that the</span><br><span class="hljs-comment">     * current thread hold the lock associated with this &#123;<span class="hljs-doctag">@code</span></span><br><span class="hljs-comment">     * Condition&#125; when this method is called. Implementations must</span><br><span class="hljs-comment">     * document this precondition and any actions taken if the lock is</span><br><span class="hljs-comment">     * not held. Typically, an exception such as &#123;<span class="hljs-doctag">@link</span></span><br><span class="hljs-comment">     * IllegalMonitorStateException&#125; will be thrown.</span><br><span class="hljs-comment">     */</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">signal</span><span class="hljs-params">()</span></span>;<br>    <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">signalAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>await( )</strong> 方法会使当前线程等待，自动释放当前锁。当其他线程使用 <strong>signal( )</strong> 时，该线程必须要重新再次获取锁并继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReenterLockCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Condition condition = lock.newCondition();<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<br>            condition.await(); <span class="hljs-comment">//等待</span><br>            System.out.println(<span class="hljs-string">&quot;Thread is going on &quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        ReenterLockCondition reenterLockCondition = <span class="hljs-keyword">new</span> ReenterLockCondition();<br>        Thread t = <span class="hljs-keyword">new</span> Thread(reenterLockCondition);<br>        t.start();<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>        lock.lock();<br>        condition.signal();<br>        lock.unlock();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>As an example, suppose we have a bounded buffer which supports put and take methods. If a take is attempted on an empty buffer, then the thread will block until an item becomes available; if a put is attempted on a full buffer, then the thread will block until a space becomes available. We would like to keep waiting put threads and take threads in separate wait-sets so that we can use the optimization of only notifying a single thread at a time when items or spaces become available in the buffer. This can be achieved using two Condition instances.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BoundedBuffer</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">final</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">final</span> Condition notFull  = lock.newCondition(); <br>    <span class="hljs-keyword">final</span> Condition notEmpty = lock.newCondition(); <br> <br>    <span class="hljs-keyword">final</span> Object[] items = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">int</span> putptr, takeptr, count;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(E x)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>      lock.lock();<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (count == items.length)<br>          notFull.await();<br>        items[putptr] = x;<br>        <span class="hljs-keyword">if</span> (++putptr == items.length) putptr = <span class="hljs-number">0</span>;<br>        ++count;<br>        notEmpty.signal();<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>      &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">take</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>      lock.lock();<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (count == <span class="hljs-number">0</span>)<br>          notEmpty.await();<br>        E x = (E) items[takeptr];<br>        <span class="hljs-keyword">if</span> (++takeptr == items.length) takeptr = <span class="hljs-number">0</span>;<br>        --count;<br>        notFull.signal();<br>        <span class="hljs-keyword">return</span> x;<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>Jdk 中 <em><strong>java.util.concurrent.ArrayBlockingQueue</strong></em> 同时也是利用Condition 来生产者和消费者队列。</p>]]></content>
    
    
    <summary type="html">Condition 一般配合重入锁实现进程间的协作....</summary>
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="线程" scheme="https://mirsery.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="java" scheme="https://mirsery.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ReentrantLock重入锁</title>
    <link href="https://mirsery.github.io/2021/07/20/java/2021/ReentrantLock%E9%87%8D%E5%85%A5%E9%94%81/"/>
    <id>https://mirsery.github.io/2021/07/20/java/2021/ReentrantLock%E9%87%8D%E5%85%A5%E9%94%81/</id>
    <published>2021-07-20T05:45:01.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#----">中断响应</a></li><li><a href="#-------">锁申请等待限时</a></li><li><a href="#---">公平锁</a></li></ul><!-- tocstop --><p>重入锁采用 <em><strong>java.util.concurrent.locks.ReentrantLock</strong></em>类实现，下面是一段简单的重入锁的案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10000000</span>;j++)&#123;<br>           lock.lock();<br>           <span class="hljs-keyword">try</span>&#123;<br>               i++;<br>           &#125;<span class="hljs-keyword">finally</span> &#123;<br>               lock.unlock();<br>           &#125;<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>       SimpleReenterLock simpleReenterLock = <span class="hljs-keyword">new</span> SimpleReenterLock();<br>       Thread t1 = <span class="hljs-keyword">new</span> Thread(simpleReenterLock);<br>       Thread t2 = <span class="hljs-keyword">new</span> Thread(simpleReenterLock);<br>       t1.start();<br>       t2.start();<br>       t1.join();<br>       t2.join();<br>       System.out.println(i);<br>   &#125;<br><br></code></pre></td></tr></table></figure><h2 id="中断响应"><a href="#中断响应" class="headerlink" title="中断响应"></a>中断响应</h2><p>使用可重入锁的过程中，如果一个线程在等待锁，那么程序可以根据需求取消对锁的请求。下面是简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ReentrantLock lock1 = <span class="hljs-keyword">new</span> ReentrantLock();<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ReentrantLock lock2 = <span class="hljs-keyword">new</span> ReentrantLock();<br>   <span class="hljs-keyword">int</span> lock;<br><br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InitLock</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lock)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.lock = lock;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">if</span> (lock == <span class="hljs-number">1</span>) &#123;<br>               lock1.lockInterruptibly();<br>               Thread.sleep(<span class="hljs-number">500</span>);<br>               lock2.lockInterruptibly();<br><br>               System.out.println(<span class="hljs-string">&quot;handle &quot;</span>+lock);<br>           &#125;<span class="hljs-keyword">else</span> &#123;<br>               lock2.lockInterruptibly();<br>               Thread.sleep(<span class="hljs-number">500</span>);<br>               lock1.lockInterruptibly();<br><br>               System.out.println(<span class="hljs-string">&quot;handle &quot;</span>+lock);<br>           &#125;<br>       &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>           e.printStackTrace();<br>       &#125;<span class="hljs-keyword">finally</span> &#123;<br>           <span class="hljs-keyword">if</span>(lock1.isHeldByCurrentThread())&#123;<br>               lock1.unlock();<br>           &#125;<br>           <span class="hljs-keyword">if</span>(lock2.isHeldByCurrentThread())&#123;<br>               lock2.unlock();<br>               System.out.println(lock +<span class="hljs-string">&quot;-&quot;</span>+ Thread.currentThread().getId() + <span class="hljs-string">&quot;: thread exit!&quot;</span>);<br>           &#125;<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>       InitLock initLock1 = <span class="hljs-keyword">new</span> InitLock(<span class="hljs-number">1</span>);<br>       InitLock initLock2 = <span class="hljs-keyword">new</span> InitLock(<span class="hljs-number">2</span>);<br>       Thread t1 = <span class="hljs-keyword">new</span> Thread(initLock1);<br>       Thread t2 = <span class="hljs-keyword">new</span> Thread(initLock2);<br>       t1.start();<br>       t2.start();<br>       Thread.sleep(<span class="hljs-number">1000</span>);<br>       t2.interrupt();<br>   &#125;<br></code></pre></td></tr></table></figure><p>上述代码，很容易产生死锁。当t1线程申请lock1之后想申请lock2锁的时候，t2很容易提前申请到lock2，导致程序死锁。主程序触发t2的中断，使得t2线程释放资源，t1线程获得对应的lock2继续完成下面的代码任务。</p><h2 id="锁申请等待限时"><a href="#锁申请等待限时" class="headerlink" title="锁申请等待限时"></a>锁申请等待限时</h2><p>除了采用中断的方式获取外部通知，避免死锁还有另一中方法就限时等待。使用 <em><strong>tryLock( )</strong></em> 方法获取锁，该方法接受2个参数，一个表示等待时长，另一个表示计时单位。如果成功获得锁就会返回true，反之返回false。  <em><strong>ReentrantLock.tryLock( )</strong></em> 方法也可以不带参数直接运行，在这种情况下，当前线程会尝试获得锁，如果锁未被其他线程占用则申请锁成功，立即返回true；反之如果被其他线程占用，则其他线程不会进行等待，而是立即返回false。这种模式不会引起线程等待，因此不会产生死锁。</p><h2 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h2><p>一般情况下，锁的申请都是非公平的，重入锁允许我们对公平性进行设置，他的构造函数如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReentrantLock</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span>  fair)</span></span><br></code></pre></td></tr></table></figure><p>fair 为true表示当前的锁是公平的。默认情况下，锁是非公平的，实现公平锁必然要求系统维护一个有序队列，因此公平锁的实现成本比较高。如果没有特殊的需求则不需要使用公平锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ReentrantLock fairLock = <span class="hljs-keyword">new</span> ReentrantLock(<span class="hljs-keyword">true</span>);<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            fairLock.lock();<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; get the lock&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            fairLock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>    FairLock fairLock = <span class="hljs-keyword">new</span> FairLock();<br>    Thread t1 = <span class="hljs-keyword">new</span> Thread(fairLock,<span class="hljs-string">&quot;t1&quot;</span>);<br>    Thread t2 = <span class="hljs-keyword">new</span> Thread(fairLock,<span class="hljs-string">&quot;t2&quot;</span>);<br><br>    t1.start();<br>    t2.start();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#----&quot;&gt;中断响应&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-------&quot;&gt;锁申请等待限时&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#---&quot;&gt;公平锁&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocs</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="线程" scheme="https://mirsery.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="java" scheme="https://mirsery.github.io/tags/java/"/>
    
    <category term="锁" scheme="https://mirsery.github.io/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>java运算符</title>
    <link href="https://mirsery.github.io/2021/07/12/java/2021/java%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://mirsery.github.io/2021/07/12/java/2021/java%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-07-12T05:07:17.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 运算符是一种特殊的符号，用来表示数据的运算，赋值和比较等。</p></blockquote><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>四则混合运算： <strong>+</strong> , <strong>-</strong>, <strong>x</strong> , <strong>/</strong> </p><p>取模运算：<strong>%</strong> , 取模运算的结果和被模数的正负相关。例如 <strong>-5 % 3 = -2</strong></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><strong>+=</strong>, <strong>-=</strong> ,<strong>/=</strong> , <strong>*=</strong> ,<strong>%=</strong> , <strong>=</strong></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><strong>&amp;</strong>,  <strong>|</strong>,  <strong>!</strong>,  <strong>&amp;&amp;</strong>,  <strong>||</strong>,  <strong>^</strong></p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><blockquote><p>位运算符操作的都是整型数据</p></blockquote><ul><li><strong>&lt;&lt; 1</strong> 左移，相当于<strong>*2</strong>(正数高位补0，负数补1)</li><li><strong>&gt;&gt; 1</strong> 右移，相当于**/2** (正数高位补0，负数补1)</li><li><strong>&gt;&gt;&gt;</strong> 无符号右移，不管此整数正负高位都补0</li></ul><h3 id="交换两个变量的值"><a href="#交换两个变量的值" class="headerlink" title="交换两个变量的值"></a>交换两个变量的值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> m = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> temp = m;<br>m = n;<br>n = temp;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">m = m + n ;<br>n = m - n ;<br>m = m - n;<br></code></pre></td></tr></table></figure><p>使用位运算：原理（ m ^ n ) ^ n = m</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">m = m ^ n;<br>n = m ^ n;<br>m = m ^ n;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">运算符是一种特殊的符号，用来表示数据的运算，赋值和比较等...</summary>
    
    
    
    <category term="运算符" scheme="https://mirsery.github.io/categories/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
    
    <category term="java" scheme="https://mirsery.github.io/tags/java/"/>
    
    <category term="运算符" scheme="https://mirsery.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>xss和csrf攻击</title>
    <link href="https://mirsery.github.io/2021/07/12/web/2021/xss%E5%92%8Ccsrf%E6%94%BB%E5%87%BB/"/>
    <id>https://mirsery.github.io/2021/07/12/web/2021/xss%E5%92%8Ccsrf%E6%94%BB%E5%87%BB/</id>
    <published>2021-07-12T01:31:45.000Z</published>
    <updated>2021-07-27T07:43:10.728Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#xss">xss</a></li><li><a href="#csrf">csrf</a></li></ul><!-- tocstop --><h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><p>xss（cross-site scripting,简称xss）跨站脚本攻击是一种迫使web站点回显可执行代码的攻击技术，而这些可执行代码由攻击者提供，被终端用户浏览器所加载执行。XSS的主要目的是获取客户端的Cookie或者其他网站用户识别客户端身份的敏感信息。获取到合法用户的信息后，攻击者可以假冒最终用户与网站进行交互。<br>xss漏洞的成因是由于动态页面的web应用对用户提交参数未作充分的检查过滤，允许用户在提交的数据中插入HTML代码，然后未加编码输出到用户的浏览器，这些恶意的提交代码会被受害用户的浏览器解释执行。</p><h2 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h2><p>csrf（cross-site-request-forgery）跨站请求伪造。简单讲就是从A网站发起一个到B网站的请求，而这个请求是经过了伪装的，伪装操作达到的目的就是让请求看起来像是从网站B中发起的，也就是说让B网站所在的服务器误以为该请求是从自己网站发起的，而不是A网站发起的。</p>]]></content>
    
    
    <summary type="html">xss（cross-site scripting,简称xss）跨站脚本攻击是一种迫使web站点回显可执行代码的攻击技术，而这些可执行代码由攻击者提供...</summary>
    
    
    
    <category term="web" scheme="https://mirsery.github.io/categories/web/"/>
    
    
    <category term="网络安全" scheme="https://mirsery.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>文章迁移</title>
    <link href="https://mirsery.github.io/2021/07/09/talk/2021/%E6%96%87%E7%AB%A0%E8%BF%81%E7%A7%BB/"/>
    <id>https://mirsery.github.io/2021/07/09/talk/2021/%E6%96%87%E7%AB%A0%E8%BF%81%E7%A7%BB/</id>
    <published>2021-07-09T05:47:45.000Z</published>
    <updated>2021-07-27T07:43:10.728Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#----------">关于分类和标签的处理</a></li><li><a href="#hexo----------">hexo框架中使用分类和标签</a><ul><li><a href="#-------">安装相应的插件</a></li><li><a href="#-------">新增对应的文件</a></li><li><a href="#---------">修改对应的文件内容</a></li><li><a href="#----------">添加相对应的前端链接</a></li><li><a href="#----">重要内容</a></li></ul></li></ul><!-- tocstop --><p>从15年末开始，陆陆续续记录的一些文档因为某些不可抗力的原因，需要做一些迁移的工作。刚开始写博客的时候用的farbox，后来迁移到bitcron,现在要回归github pages。记录一次文档的迁移过程吧。</p><h2 id="关于分类和标签的处理"><a href="#关于分类和标签的处理" class="headerlink" title="关于分类和标签的处理"></a>关于分类和标签的处理</h2><p>借用B乎上一个表格</p><table><thead><tr><th></th><th>分类</th><th>标签</th></tr></thead><tbody><tr><td>排他性</td><td>是</td><td>否</td></tr><tr><td>关系</td><td>从属</td><td>相关（关联）</td></tr><tr><td>创建</td><td>事先规划</td><td>随时增加</td></tr><tr><td>代价</td><td>高</td><td>低</td></tr></tbody></table><p>满足排他性的归为分类，不满足排他性条件的归为标签。分类是固定的、严谨的；标签是自由的、有特色的、是可以修改和添加的。</p><h2 id="hexo框架中使用分类和标签"><a href="#hexo框架中使用分类和标签" class="headerlink" title="hexo框架中使用分类和标签"></a>hexo框架中使用分类和标签</h2><h3 id="安装相应的插件"><a href="#安装相应的插件" class="headerlink" title="安装相应的插件"></a>安装相应的插件</h3><p>在项目根目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-category --save<br><br>npm install hexo-generator-tag --save<br><br></code></pre></td></tr></table></figure><h3 id="新增对应的文件"><a href="#新增对应的文件" class="headerlink" title="新增对应的文件"></a>新增对应的文件</h3><p>在项目根目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page tags<br><br>hexo new page categories<br><br></code></pre></td></tr></table></figure><h3 id="修改对应的文件内容"><a href="#修改对应的文件内容" class="headerlink" title="修改对应的文件内容"></a>修改对应的文件内容</h3><p>文件  <em><strong>./source/categories/index.md</strong></em> 修改后的内容：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: categories<br>date: 2021-07-14 16:11:57<br>type: categories<br><span class="hljs-section">comments: false</span><br><span class="hljs-section">---</span><br><br></code></pre></td></tr></table></figure><p>文件 <em><strong>./source/tags/index.md</strong></em> 修改后的内容：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: tags<br>date: 2021-07-14 16:12:05<br>type: tags<br><span class="hljs-section">comments: false</span><br><span class="hljs-section">---</span><br><br></code></pre></td></tr></table></figure><blockquote><p>在写文章时需要在文章前标注相应的tag以及category。</p></blockquote><h3 id="添加相对应的前端链接"><a href="#添加相对应的前端链接" class="headerlink" title="添加相对应的前端链接"></a>添加相对应的前端链接</h3><p>一般情况下是在对应的主题的配置文件中，或者工程的配置文件中修改Menu值</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">menu:</span><br>    <span class="hljs-attr">Home:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">Archives:</span> <span class="hljs-string">/archives</span><br>    <span class="hljs-attr">Categories:</span> <span class="hljs-string">/categories</span><br>    <span class="hljs-attr">Tags:</span> <span class="hljs-string">/tags</span><br><br></code></pre></td></tr></table></figure><p>新增相应的分类和标签的地址，即可。</p><h3 id="重要内容"><a href="#重要内容" class="headerlink" title="重要内容"></a>重要内容</h3><p>一般情况，如果按照上述操作即可实现分类和标签的归档。但是假如你当前使用的主题没有实现相应的模板则不能使用相应的功能。此时需要修改主题的模板文件来增强其分页和归档的功能。</p><p>查看***./themes/XXX-theme/layout/category.pug<em><strong>和</strong></em>./themes/XXX-theme/layout/tag.pug***是否存在，这两个文件是选择某个分类或某个标签时，文章列表的渲染模板，其文件后缀可以为pug/ejs等。</p><p>如果这两个文件存在，但是访问<code>/categories</code>或 <code>/tags</code>页面返回404，则说明对应的<code>./themes/XXX-theme/layout/post.pug</code> 文件中没有处理当前页为分类或者标签页的情况。</p><p>以下是简单的处理方式：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">mixin</span> <span class="hljs-string">post(item)</span><br>    <span class="hljs-string">if(page.type</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;categories&#x27;</span><span class="hljs-string">)</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">var</span> <span class="hljs-string">categoriesList</span> <span class="hljs-string">=</span> <span class="hljs-string">list_categories(&#123;</span> <span class="hljs-attr">show_count:</span> <span class="hljs-literal">true</span><span class="hljs-string">&#125;)</span><br>        <span class="hljs-string">.archive</span><br>            <span class="hljs-string">.h2</span> <span class="hljs-string">类别</span><br>            <span class="hljs-string">if</span> <span class="hljs-string">categoriesList</span><br>                <span class="hljs-type">!=</span> <span class="hljs-string">categoriesList</span><br>            <span class="hljs-string">else</span><br>                <span class="hljs-string">p</span> <span class="hljs-string">None.</span><br>    <span class="hljs-string">else</span> <span class="hljs-string">if(page.type</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;tags&#x27;</span><span class="hljs-string">)</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">var</span> <span class="hljs-string">tagsList</span> <span class="hljs-string">=</span> <span class="hljs-string">list_tags(&#123;</span> <span class="hljs-attr">show_count:</span> <span class="hljs-literal">true</span><span class="hljs-string">&#125;)</span><br>        <span class="hljs-string">.archive</span><br>            <span class="hljs-string">.h2</span> <span class="hljs-string">标签</span><br>            <span class="hljs-string">if</span> <span class="hljs-string">tagsList</span><br>                <span class="hljs-type">!=</span> <span class="hljs-string">tagsList</span><br>            <span class="hljs-string">else</span><br>                <span class="hljs-string">p</span> <span class="hljs-string">None.</span><br>    <span class="hljs-string">else</span><br>        <span class="hljs-string">.post.article.post-block</span><br>            <span class="hljs-string">h1.post-title</span><br>                <span class="hljs-type">!=</span> <span class="hljs-string">item.title</span><br>            <span class="hljs-string">+postInfo(item)</span><br>            <span class="hljs-string">.post-content</span><br>                <span class="hljs-type">!=</span> <span class="hljs-string">item.content</span>      <br><br></code></pre></td></tr></table></figure><p>具体的代码以及辅助函数的使用可以查看<a href="https://hexo.io/zh-cn/docs/helpers">hexo.io</a>中的帮助文档，实现了对应的处理方式就可以实现分类和标签页功能。同时也支持自定义对其进行渲染展示。</p>]]></content>
    
    
    <summary type="html">这是一个简单的测试描述文字</summary>
    
    
    
    <category term="生活" scheme="https://mirsery.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="闲谈" scheme="https://mirsery.github.io/tags/%E9%97%B2%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>java 中面向切面的Aop 解析</title>
    <link href="https://mirsery.github.io/2021/06/12/java/2021/java%E4%B8%AD%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2aop%E8%A7%A3%E6%9E%90/"/>
    <id>https://mirsery.github.io/2021/06/12/java/2021/java%E4%B8%AD%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2aop%E8%A7%A3%E6%9E%90/</id>
    <published>2021-06-12T16:00:00.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Aop-解析"><a href="#Aop-解析" class="headerlink" title="Aop 解析"></a>Aop 解析</h1><blockquote><p> 了解aop协议</p></blockquote><!-- toc --><ul><li><a href="#-----aop">实现简易的Aop</a></li></ul><!-- tocstop --><p>AOP（面向切面编程）是Spring框架的特色功能之一。通过设置横切关注点（cross cutting concerns），AOP提供了极高的扩展性。</p><h2 id="实现简易的Aop"><a href="#实现简易的Aop" class="headerlink" title="实现简易的Aop"></a>实现简易的Aop</h2><ol><li>定义一个 需要被代理的接口，并实现接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Job</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doWork</span><span class="hljs-params">(String msg)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Work</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Job</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doWork</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;[do-work] &quot;</span> + msg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>实现InvocationHandler接口并创建代理方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Object o;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WorkHandler</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.o = o;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        method.invoke(o, args);<br>        System.out.println(<span class="hljs-string">&quot;[proxy-invoke]&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>场景测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkMain</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Job work = <span class="hljs-keyword">new</span> Work();<br>        WorkHandler workHandler = <span class="hljs-keyword">new</span> WorkHandler(work);<br>        Job job = (Job) Proxy.newProxyInstance(work.getClass().getClassLoader(),<br>                work.getClass().getInterfaces(),workHandler);<br>        System.out.println(job.doWork(<span class="hljs-string">&quot;hahahah&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Aop-解析&quot;&gt;&lt;a href=&quot;#Aop-解析&quot; class=&quot;headerlink&quot; title=&quot;Aop 解析&quot;&gt;&lt;/a&gt;Aop 解析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 了解aop协议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- toc --&gt;

</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="aop" scheme="https://mirsery.github.io/tags/aop/"/>
    
  </entry>
  
  <entry>
    <title>Swagger-ui 使用</title>
    <link href="https://mirsery.github.io/2021/06/08/java/2021/Swagger-ui%20%E4%BD%BF%E7%94%A8/"/>
    <id>https://mirsery.github.io/2021/06/08/java/2021/Swagger-ui%20%E4%BD%BF%E7%94%A8/</id>
    <published>2021-06-08T16:00:00.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swagger-ui-使用"><a href="#Swagger-ui-使用" class="headerlink" title="Swagger-ui 使用"></a>Swagger-ui 使用</h1><!-- toc --><ul><li><a href="#------jar-">引入相关依赖jar包</a></li><li><a href="#---swagger">启用 swagger</a></li><li><a href="#controller-------">Controller 添加描述信息</a></li><li><a href="#--------">接口添加描述信息</a></li><li><a href="#----------">给实体类添加描述信息</a></li></ul><!-- tocstop --><h2 id="引入相关依赖jar包"><a href="#引入相关依赖jar包" class="headerlink" title="引入相关依赖jar包"></a>引入相关依赖jar包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="启用-swagger"><a href="#启用-swagger" class="headerlink" title="启用 swagger"></a>启用 swagger</h2><p>下面是swagger-ui 配置样例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiKey;<br><span class="hljs-keyword">import</span> springfox.documentation.service.AuthorizationScope;<br><span class="hljs-keyword">import</span> springfox.documentation.service.SecurityReference;<br><span class="hljs-keyword">import</span> springfox.documentation.service.SecurityScheme;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: misery</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-04 16:26</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;swagger.enable:false&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> swagger2Enable;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">createRestApi</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())<br>                .enable(swagger2Enable)<br>                .groupName(<span class="hljs-string">&quot;所有&quot;</span>)<br>                .select()<br>                .apis(RequestHandlerSelectors.any())<br>                .paths(PathSelectors.any())<br>                .paths(PathSelectors.regex(<span class="hljs-string">&quot;(?!/error.*).*&quot;</span>))     <span class="hljs-comment">// 去除默认basicController</span><br>                .paths(PathSelectors.regex(<span class="hljs-string">&quot;(?!/actuator.*).*&quot;</span>))    <span class="hljs-comment">//去除actuator</span><br>                .build()<br>                .securityContexts(securityContext())<br>                .securitySchemes(security());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">appApi</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())<br>                .enable(swagger2Enable)<br>                .groupName(<span class="hljs-string">&quot;groupName&quot;</span>)<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.xxxx.xxx&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build()<br>                .securityContexts(securityContext())<br>                .securitySchemes(security());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<br>                .title(<span class="hljs-string">&quot;title&quot;</span>)<br>                .description(<span class="hljs-string">&quot;description&quot;</span>)<br>                .version(<span class="hljs-string">&quot;0.0.1&quot;</span>)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SecurityScheme&gt; <span class="hljs-title">security</span><span class="hljs-params">()</span> </span>&#123;<br>        SecurityScheme token = <span class="hljs-keyword">new</span> ApiKey(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;header&quot;</span>);<br>        List&lt;SecurityScheme&gt; securitySchemeList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        securitySchemeList.add(token);<br>        <span class="hljs-keyword">return</span> securitySchemeList;<br>    &#125;<br><br>    <span class="hljs-function">List&lt;SecurityReference&gt; <span class="hljs-title">defaultAuth</span><span class="hljs-params">()</span> </span>&#123;<br>        AuthorizationScope authorizationScope<br>                = <span class="hljs-keyword">new</span> AuthorizationScope(<span class="hljs-string">&quot;global&quot;</span>, <span class="hljs-string">&quot;accessEverything&quot;</span>);<br>        AuthorizationScope[] authorizationScopes = <span class="hljs-keyword">new</span> AuthorizationScope[<span class="hljs-number">1</span>];<br>        authorizationScopes[<span class="hljs-number">0</span>] = authorizationScope;<br>        List&lt;SecurityReference&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        lists.add(<span class="hljs-keyword">new</span> SecurityReference(<span class="hljs-string">&quot;token&quot;</span>, authorizationScopes));<br>        <span class="hljs-keyword">return</span> lists;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SecurityContext&gt; <span class="hljs-title">securityContext</span><span class="hljs-params">()</span> </span>&#123;<br>        SecurityContext securityContext = SecurityContext.builder()<br>                .securityReferences(defaultAuth())<br>                .build();<br>        List&lt;SecurityContext&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(securityContext);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Controller-添加描述信息"><a href="#Controller-添加描述信息" class="headerlink" title="Controller 添加描述信息"></a>Controller 添加描述信息</h2><p>@Api 可以对Controller进行描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;xxx相关接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口添加描述信息"><a href="#接口添加描述信息" class="headerlink" title="接口添加描述信息"></a>接口添加描述信息</h2><p>@ApiOperation 可以对接口进行描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GETMapping(&quot;/hi&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;xxxxx接口&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><em><strong>@ApiOperation 注解属性</strong></em></p><table><thead><tr><th>注解属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>接口说明</td></tr><tr><td>notes</td><td>String</td><td>接口发布说明</td></tr><tr><td>tags</td><td>Stirng[]</td><td>标签</td></tr><tr><td>response</td><td>Class&lt;?&gt;</td><td>接口返回类型</td></tr><tr><td>httpMethod</td><td>String</td><td>接口请求方式</td></tr></tbody></table></li><li><p><em><strong>@ApiIgnore</strong></em><br>  Swagger 文档不会显示拥有该注解的接口。</p></li><li><p><em><strong>@ApiImplicitParams</strong></em><br>  用于描述接口的非对象参数集。</p></li><li><p><em><strong>@ApiImplicitParam</strong></em><br>  用于描述接口的非对象参数，一般与 <em><strong>@ApiImplicitParams</strong></em> 组合使用</p></li></ul><table>    <tr>        <td rowspan="15">@ApiImplicitParam</td>    </tr>    <tr>        <td colspan="3">用在@ApiImplicitParams注解中，指定一个请求参数的各个方面</td>    </tr>    <tr>        <td>name</td>        <td colspan="2">参数名</td>    </tr>    <tr>       <td>value</td>        <td colspan="2">参数的汉字说明、解释</td>    </tr>    <tr>       <td>required</td>        <td colspan="2">参数是否必须传</td>    </tr>    <tr>       <td>dataType</td>       <td colspan="2">参数类型，默认String，其它值dataType="Integer"</td>    </tr>    <tr>       <td>defaultValue</td>        <td colspan="2">参数的默认值</td>    </tr>    <tr>       <td rowspan="8">paramType</td>   </tr>    <tr>       <td colspan="2">参数放在哪个地方</td>    </tr> <tr>       <td>header</td>        <td>请求参数的获取@RequestHeader</td> </tr> <tr>       <td>header</td>        <td>请求参数的获取@RequestHeader</td> </tr> <tr>       <td>query</td>        <td>请求参数的获取@RequestParam</td> </tr> <tr>       <td>path</td>        <td>请求参数的获取@PathVariable</td> </tr> <tr>       <td>body</td>        <td>请求参数的获取@RequestBody</td> </tr> <tr>       <td>form</td>        <td>普通表单提交</td> </tr></table><h2 id="给实体类添加描述信息"><a href="#给实体类添加描述信息" class="headerlink" title="给实体类添加描述信息"></a>给实体类添加描述信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(&quot;用户实体&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Entity</span> </span>&#123;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;用户 id&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>@ApiModelProperty 主要属性</li></ul><table><thead><tr><th>注解属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>字段说明</td></tr><tr><td>name</td><td>String</td><td>重写字段名称</td></tr><tr><td>dataType</td><td>Stirng</td><td>重写字段类型</td></tr><tr><td>required</td><td>boolean 是否必填</td><td></td></tr><tr><td>example</td><td>Stirng</td><td>举例说明</td></tr><tr><td>hidden</td><td>boolean</td><td>是否在文档中隐藏该字段</td></tr><tr><td>allowEmptyValue</td><td>boolean</td><td>是否允许为空</td></tr><tr><td>allowableValues</td><td>String</td><td>该字段允许的值，当我们 API 的某个参数为枚举类型时，使用这个属性就可以清楚地告诉 API 使用者该参数所能允许传入的值</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Swagger-ui-使用&quot;&gt;&lt;a href=&quot;#Swagger-ui-使用&quot; class=&quot;headerlink&quot; title=&quot;Swagger-ui 使用&quot;&gt;&lt;/a&gt;Swagger-ui 使用&lt;/h1&gt;&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a hre</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot自带的md5摘要算法使用</title>
    <link href="https://mirsery.github.io/2021/06/07/java/2021/Springboot%20%E6%A1%86%E6%9E%B6%E8%87%AA%E5%B8%A6%E7%9A%84md5%E6%91%98%E8%A6%81/"/>
    <id>https://mirsery.github.io/2021/06/07/java/2021/Springboot%20%E6%A1%86%E6%9E%B6%E8%87%AA%E5%B8%A6%E7%9A%84md5%E6%91%98%E8%A6%81/</id>
    <published>2021-06-07T16:00:00.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot自带的md5摘要算法使用"><a href="#springboot自带的md5摘要算法使用" class="headerlink" title="springboot自带的md5摘要算法使用"></a>springboot自带的md5摘要算法使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.util.DigestUtils;<br><br>DigestUtils.md5DigestAsHex(<span class="hljs-string">&quot;需要摘要的字符串xxxxx&quot;</span>.getBytes()); 默认是采用的<span class="hljs-number">32</span>位的md5信息摘要算法<br><br>md5(str,<span class="hljs-number">32</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springboot自带的md5摘要算法使用&quot;&gt;&lt;a href=&quot;#springboot自带的md5摘要算法使用&quot; class=&quot;headerlink&quot; title=&quot;springboot自带的md5摘要算法使用&quot;&gt;&lt;/a&gt;springboot自带的md5摘要算法</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
    <category term="md5" scheme="https://mirsery.github.io/tags/md5/"/>
    
  </entry>
  
  <entry>
    <title>RSA 算法加解密代码实现片段</title>
    <link href="https://mirsery.github.io/2021/05/22/java/2021/java%20RSA%20%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>https://mirsery.github.io/2021/05/22/java/2021/java%20RSA%20%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</id>
    <published>2021-05-22T16:00:00.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RSA-算法加解密代码实现片段"><a href="#RSA-算法加解密代码实现片段" class="headerlink" title="RSA 算法加解密代码实现片段"></a>RSA 算法加解密代码实现片段</h1><blockquote><p> 采用java</p></blockquote><!-- toc --><ul><li><a href="#----">秘钥生成</a></li><li><a href="#----">公钥加密</a></li><li><a href="#----">公钥解密</a></li><li><a href="#----">私钥加密</a></li><li><a href="#----">私钥解密</a></li></ul><!-- tocstop --><h2 id="秘钥生成"><a href="#秘钥生成" class="headerlink" title="秘钥生成"></a>秘钥生成</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initKey</span><span class="hljs-params">()</span> </span>&#123;<br>      KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>      keyPairGenerator.initialize(<span class="hljs-number">2048</span>);<span class="hljs-comment">//长度必须为64的倍数 512~65536 之间</span><br>      KeyPair keyPair = keyPairGenerator.generateKeyPair();<br>      RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic(); <span class="hljs-comment">//公钥</span><br>      RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();    <span class="hljs-comment">//私钥</span><br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="公钥加密"><a href="#公钥加密" class="headerlink" title="公钥加密"></a>公钥加密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] encryptByPublicKey(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key) <span class="hljs-keyword">throws</span> Exception &#123;<br>      KeyFactory keyFactory = KeyFactory.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>      X509EncodedKeySpec x509KeySpec = <span class="hljs-keyword">new</span> X509EncodedKeySpec(key);<br>      PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);<br>      Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());<br>      cipher.init(Cipher.ENCRYPT_MODE, pubKey);<br>      <span class="hljs-keyword">return</span> cipher.doFinal(data);<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="公钥解密"><a href="#公钥解密" class="headerlink" title="公钥解密"></a>公钥解密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] decryptByPublicKey(<span class="hljs-keyword">byte</span>[] data) <span class="hljs-keyword">throws</span> Exception &#123;<br>       ByteArrayOutputStream out = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>       KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);<br>       X509EncodedKeySpec x509KeySpec = <span class="hljs-keyword">new</span> X509EncodedKeySpec(Base64.getDecoder().decode(publicKey.trim()));<br>       PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);<br>       Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());<br>       cipher.init(Cipher.DECRYPT_MODE, pubKey);<br>       <span class="hljs-keyword">int</span> inputLen = data.length;<br>       <span class="hljs-keyword">int</span> offSet = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">byte</span>[] cache;<br>       <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span> (inputLen - offSet &gt; <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">if</span> (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) &#123;<br>               cache = cipher.doFinal(data, offSet, MAX_DECRYPT_BLOCK);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               cache = cipher.doFinal(data, offSet, inputLen - offSet);<br>           &#125;<br>           out.write(cache, <span class="hljs-number">0</span>, cache.length);<br>           i++;<br>           offSet = i * MAX_DECRYPT_BLOCK;<br>       &#125;<br>       out.close();<br>       <span class="hljs-keyword">return</span> out.toByteArray();<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="私钥加密"><a href="#私钥加密" class="headerlink" title="私钥加密"></a>私钥加密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] encryptByPrivateKey(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key) <span class="hljs-keyword">throws</span> Exception &#123;<br>        ByteArrayOutputStream out = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        PKCS8EncodedKeySpec pkcs8KeySpec = <span class="hljs-keyword">new</span> PKCS8EncodedKeySpec(key);<br>        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);<br>        PrivateKey privateKey = keyFactory.generatePrivate(pkcs8KeySpec);<br>        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());<br>        cipher.init(Cipher.ENCRYPT_MODE, privateKey);<br>        <span class="hljs-keyword">int</span> inputLen = data.length;<br>        <span class="hljs-keyword">int</span> offSet = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span>[] cache;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (inputLen - offSet &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) &#123;<br>                cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cache = cipher.doFinal(data, offSet, inputLen - offSet);<br>            &#125;<br>            out.write(cache, <span class="hljs-number">0</span>, cache.length);<br>            i++;<br>            offSet = i * MAX_ENCRYPT_BLOCK;<br>        &#125;<br>        out.close();<br>        <span class="hljs-keyword">return</span> out.toByteArray();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="私钥解密"><a href="#私钥解密" class="headerlink" title="私钥解密"></a>私钥解密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] decryptByPrivateKey(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key) <span class="hljs-keyword">throws</span> Exception &#123;<br>        PKCS8EncodedKeySpec pkcs8KeySpec = <span class="hljs-keyword">new</span> PKCS8EncodedKeySpec(key);<br>        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);<br>        PrivateKey privateKey = keyFactory.generatePrivate(pkcs8KeySpec);<br>        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());<br>        cipher.init(Cipher.DECRYPT_MODE, privateKey);<br>        <span class="hljs-keyword">return</span> cipher.doFinal(data);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RSA-算法加解密代码实现片段&quot;&gt;&lt;a href=&quot;#RSA-算法加解密代码实现片段&quot; class=&quot;headerlink&quot; title=&quot;RSA 算法加解密代码实现片段&quot;&gt;&lt;/a&gt;RSA 算法加解密代码实现片段&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 采用ja</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="rsa" scheme="https://mirsery.github.io/tags/rsa/"/>
    
    <category term="加密" scheme="https://mirsery.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>简易dokcer私服搭建脚本</title>
    <link href="https://mirsery.github.io/2021/05/12/docker/%E7%AE%80%E6%98%93docker%20registry%E6%90%AD%E5%BB%BA%E8%84%9A%E6%9C%AC/"/>
    <id>https://mirsery.github.io/2021/05/12/docker/%E7%AE%80%E6%98%93docker%20registry%E6%90%AD%E5%BB%BA%E8%84%9A%E6%9C%AC/</id>
    <published>2021-05-12T08:33:38.000Z</published>
    <updated>2021-07-27T07:43:10.712Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 项目链接地址<br>文件下载地址<a href="https://github.com/mirsery/easy-docker-registry">easy-registry</a></p></blockquote><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>├── certs<br>│   ├── auth.cert<br>│   └── auth.key<br>├── config<br>│   ├── registry<br>│   │   └── config.yml<br>│   └── web<br>│       └── config.yml<br>├── docker-compose.yml<br>└── easy-satrt.sh</p><h2 id="step-1-工具环境准备"><a href="#step-1-工具环境准备" class="headerlink" title="step 1 工具环境准备"></a>step 1 工具环境准备</h2><ul><li>安装docker、docker-compose工具。（略）</li><li>安装openssl</li></ul><p>##step 2 修改配置文件<br>修改config-&gt;registry-&gt;config.yml  中的<my-registry-web>为当前部署的docker-web-ui的外网访问地址</p><p>##step3 在文件目录下执行脚本easy-satrt.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./easy-satrt.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; 项目链接地址&lt;br&gt;文件下载地址&lt;a href=&quot;https://github.com/mirsery/easy-docker-registry&quot;&gt;easy-registry&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目录结构&quot;</summary>
      
    
    
    
    <category term="docker" scheme="https://mirsery.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://mirsery.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>springboot 中应用缓存（一）</title>
    <link href="https://mirsery.github.io/2021/05/07/java/2021/springboot%20%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98(%E4%B8%80)/"/>
    <id>https://mirsery.github.io/2021/05/07/java/2021/springboot%20%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98(%E4%B8%80)/</id>
    <published>2021-05-07T16:00:00.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot-中应用缓存（一）"><a href="#springboot-中应用缓存（一）" class="headerlink" title="springboot 中应用缓存（一）"></a>springboot 中应用缓存（一）</h1><!-- toc --><ul><li><a href="#springboot-----">springboot 缓存支持</a></li><li><a href="#cachemanager----">CacheManager 的使用</a></li></ul><!-- tocstop --><p>一般情况的程序的压力瓶颈在数据库。当需要重复的获取相同的数据或者获取的数据更新周期很慢时，我们会进行如果一次又一次直接进行数据库的请求或远程服务的调用会导致IO的阻塞，从而导致程序性能的恶化。</p><h2 id="springboot-缓存支持"><a href="#springboot-缓存支持" class="headerlink" title="springboot 缓存支持"></a>springboot 缓存支持</h2><p>springboot定义了org.springframework.cache.CacheManager和org.springframework.cache.Cache接口用来统一不通的缓存技术。其中CacheManager是Spring提供的各种缓存技术抽象接口，Cache接口包含缓存的各种操作（增加、删除、获得缓存）。</p><p>CacheManager 的实现</p><table><thead><tr><th>CacheManager</th><th>描述</th></tr></thead><tbody><tr><td>SimpleCacheManager</td><td>使用简单的Collection来存储缓存，主要用来测试用途</td></tr><tr><td>ConcurrentMapCacheManager</td><td>使用ConcurrentMap来存储缓存</td></tr><tr><td>NoOpCacheManager</td><td>仅做测试用途，不会实际存储缓存</td></tr><tr><td>EhCacheManager</td><td>使用EhCache作为缓存技术</td></tr><tr><td>GuavaCacheManager</td><td>使用Google Guava的GuavaCache做为缓存技术</td></tr><tr><td>HazelcastCacheManager</td><td>使用Hazelcast作为缓存技术</td></tr><tr><td>JCacheCacheManager</td><td>支持JCache（JSR-107)标准的实现作为缓存技术，如Apache Commons JCS</td></tr><tr><td>RedisCacheManager</td><td>使用redis作为缓存技术</td></tr></tbody></table><h2 id="CacheManager-的使用"><a href="#CacheManager-的使用" class="headerlink" title="CacheManager 的使用"></a>CacheManager 的使用</h2><blockquote><p>1、 <a href="#CacheManager_1">注册bean</a><br>2、<a href="#CacheManager_2">开启声明缓存支持</a><br>3、<a href="#CacheManager_3">声明缓存规则</a></p></blockquote><ol><li><span id="CacheManager_1">注册Bean</span><br> 在pom.xml中引入如下:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml:n">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;<br>    &lt;artifactId&gt;ehcache&lt;/artifactId&gt;<br>    &lt;version&gt;2.10.6&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>根据查看源码,可知<strong>spring-boot-starter-cache</strong> 引入<strong>spring-context-support-5.2.2.RELEASE.jar</strong> 包，查看源码<strong>org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java:n">/*<br> * Copyright 2012-2019 the original author or authors.<br> *<br> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br> * you may not use this file except in compliance with the License.<br> * You may obtain a copy of the License at<br> *<br> *      https://www.apache.org/licenses/LICENSE-2.0<br> *<br> * Unless required by applicable law or agreed to in writing, software<br> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br> * See the License for the specific language governing permissions and<br> * limitations under the License.<br> */<br><br>package org.springframework.boot.autoconfigure.cache;<br><br>import net.sf.ehcache.Cache;<br>import net.sf.ehcache.CacheManager;<br><br>import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;<br>import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;<br>import org.springframework.boot.autoconfigure.condition.ResourceCondition;<br>import org.springframework.cache.ehcache.EhCacheCacheManager;<br>import org.springframework.cache.ehcache.EhCacheManagerUtils;<br>import org.springframework.context.annotation.Bean;<br>import org.springframework.context.annotation.Conditional;<br>import org.springframework.context.annotation.Configuration;<br>import org.springframework.core.io.Resource;<br><br>/**<br> * EhCache cache configuration. Only kick in if a configuration file location is set or if<br> * a default configuration file exists.<br> *<br> * @author Eddú Meléndez<br> * @author Stephane Nicoll<br> * @author Madhura Bhave<br> */<br>@Configuration(proxyBeanMethods = false)<br>@ConditionalOnClass(&#123; Cache.class, EhCacheCacheManager.class &#125;)<br>@ConditionalOnMissingBean(org.springframework.cache.CacheManager.class)<br>@Conditional(&#123; CacheCondition.class, EhCacheCacheConfiguration.ConfigAvailableCondition.class &#125;)<br>class EhCacheCacheConfiguration &#123;<br><br>@Bean<br>EhCacheCacheManager cacheManager(CacheManagerCustomizers customizers, CacheManager ehCacheCacheManager) &#123;<br>return customizers.customize(new EhCacheCacheManager(ehCacheCacheManager));<br>&#125;<br><br>@Bean<br>@ConditionalOnMissingBean<br>CacheManager ehCacheCacheManager(CacheProperties cacheProperties) &#123;<br>Resource location = cacheProperties.resolveConfigLocation(cacheProperties.getEhcache().getConfig());<br>if (location != null) &#123;<br>return EhCacheManagerUtils.buildCacheManager(location);<br>&#125;<br>return EhCacheManagerUtils.buildCacheManager();<br>&#125;<br>/**<br> * Determine if the EhCache configuration is available. This either kick in if a<br> * default configuration has been found or if property referring to the file to use<br> * has been set.<br> */<br>static class ConfigAvailableCondition extends ResourceCondition &#123;<br>ConfigAvailableCondition() &#123;<br>super(&quot;EhCache&quot;, &quot;spring.cache.ehcache.config&quot;, &quot;classpath:/ehcache.xml&quot;);<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以自动注册bean。配置文件默认地址是<strong>classpath:/ehcache.xml</strong></p><ol><li><span id="CacheManager_2">开启声明缓存支持</span><br> 开启缓存支持只需要在配置类中增加**@EnableCaching**注解即可。</li><li><span id="#CacheManager_3">声明缓存规则</span></li></ol><table><thead><tr><th>注解</th><th>解释</th></tr></thead><tbody><tr><td>@Cacheable</td><td>在方法前spring 先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放进缓存</td></tr><tr><td>@CachePut</td><td>无论怎样，都会将方法的返回值放到缓存中。@CachePut的属性与@Cacheable保存一致。</td></tr><tr><td>@CacheEvict</td><td>将一条或多条数据从缓存中删除</td></tr><tr><td>@Caching</td><td>可以通过@Caching注解组合多个注解策略在一个方法上</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springboot-中应用缓存（一）&quot;&gt;&lt;a href=&quot;#springboot-中应用缓存（一）&quot; class=&quot;headerlink&quot; title=&quot;springboot 中应用缓存（一）&quot;&gt;&lt;/a&gt;springboot 中应用缓存（一）&lt;/h1&gt;&lt;!-- </summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
    <category term="cache" scheme="https://mirsery.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>springboot 中应用缓存（二）</title>
    <link href="https://mirsery.github.io/2021/05/07/java/2021/springboot%20%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98(%E4%BA%8C)/"/>
    <id>https://mirsery.github.io/2021/05/07/java/2021/springboot%20%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98(%E4%BA%8C)/</id>
    <published>2021-05-07T16:00:00.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<p>#springboot 中应用缓存（二）</p><blockquote><p> 项目中如果引用了shiro框架的话，缓存实例的引用需要增加@lazy标签或者采用手动注入Bean的方式</p></blockquote><!-- toc --><!-- tocstop --><p>##Spring Boot默认的ConcurrentMapCacheManager</p><ol><li>添加缓存</li><li>application中开启**@EnableCaching**标注</li><li>创建service层<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java:n">@Service<br>public class CacheDemoService &#123;<br><br>    @CachePut(value = &quot;test&quot;, key = &quot;#key&quot;)//将返回的数据写入缓存 <br>    public String getMessage(String msg, String key) &#123;<br>        System.out.println(&quot;CachePut the message, key : &quot; + key);<br>        return msg;<br>    &#125;<br><br>    @Cacheable(value = &quot;test&quot;, key = &quot;#key&quot;)    //第一次执行方法缓存，第二次若参数相同时则不会触发方法，而是从缓存中直接返回数据<br>    public String getDemo(String key) &#123;<br>        String msg = &quot;hello world cache&quot;;<br>        System.out.println(&quot;Cacheable the message, key : &quot; + key);<br>        return msg;<br>    &#125;<br><br>    @CacheEvict(value = &quot;test&quot;, key = &quot;#key&quot;)<br>    public void deleteCache(String key) &#123;<br>        System.out.println(&quot;delete the cache key : &quot; + key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>##SpringBoot中使用其他缓存技术<br>###EhCache</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>Springboot 会自动配置EhCacheManager的Bean<br>###Guava</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>18.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>###Redis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#springboot 中应用缓存（二）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 项目中如果引用了shiro框架的话，缓存实例的引用需要增加@lazy标签或者采用手动注入Bean的方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- toc --&gt;



&lt;!-- tocs</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
    <category term="cache" scheme="https://mirsery.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud eureka注册中心搭建</title>
    <link href="https://mirsery.github.io/2021/05/03/java/2021/Springcloud%20eureka%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://mirsery.github.io/2021/05/03/java/2021/Springcloud%20eureka%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-05-03T16:00:00.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud-eureka注册中心搭建"><a href="#SpringCloud-eureka注册中心搭建" class="headerlink" title="SpringCloud eureka注册中心搭建"></a>SpringCloud eureka注册中心搭建</h1><blockquote><p> 搭建eureka注册中心，并集成springboot-admin 监控<br>spring-boot-starter-parent 版本号为 <strong>2.3.10.RELEASE</strong><br>spring-cloud-dependencies 版本为 <strong>Hoxton.SR11</strong></p></blockquote><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><p>服务端直接采用idea新建一个springboot项目，选择对应的版本号以及对应的注册中心。<br>下面是<strong>pom.xml</strong>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.hytiot.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>eureka-hytiot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>eureka-hytiot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR11<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot-admin.version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot-admin.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">docker.image.prefix</span>&gt;</span>docker.hytiot.com<span class="hljs-tag">&lt;/<span class="hljs-name">docker.image.prefix</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">docker-maven-plugin.version</span>&gt;</span>1.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">docker-maven-plugin.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">base-image.name</span>&gt;</span>openjdk:8-jdk-alpine<span class="hljs-tag">&lt;/<span class="hljs-name">base-image.name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maintainer.email</span>&gt;</span>mirsery@hytiot.com<span class="hljs-tag">&lt;/<span class="hljs-name">maintainer.email</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot-admin.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docker-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;docker-maven-plugin.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">imageName</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">imageTags</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">imageTags</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">baseImage</span>&gt;</span>$&#123;base-image.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">baseImage</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">maintainer</span>&gt;</span>$&#123;maintainer.email&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maintainer</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">cmd</span>&gt;</span>[&quot;java&quot;, &quot;-version&quot;]<span class="hljs-tag">&lt;/<span class="hljs-name">cmd</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;, &quot;$&#123;project.build.finalName&#125;.jar&quot;]<span class="hljs-tag">&lt;/<span class="hljs-name">entryPoint</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件yml为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml">spring:<br>  application:<br>    name: eureka-server<br>  security:<br>    user:<br>      name: username<br>      password: password<br>  boot:<br>    admin:<br>        # springboot-admin的访问路径<br>      context-path: /admin<br>server:<br>  port: 8080<br>eureka:<br>  server:<br>    enable-self-preservation: false<br>  instance:<br>    hostname: localhost<br>    instance-id: $&#123;spring.application.name&#125;<br>  client:<br>    # admin need to be discovered<br>    register-with-eureka: true<br>    fetch-registry: true<br>    healthcheck:<br>      enabled: true<br>    service-url:<br>      defaultZone: http://$&#123;spring.security.user.name&#125;:$&#123;spring.security.user.password&#125;@$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/<br>management:<br>  endpoints:<br>    web:<br>      exposure:<br>        include: &quot;*&quot;<br>  endpoint:<br>    health:<br>      show-details: ALWAYS<br></code></pre></td></tr></table></figure><p>同时启动类需要增加**@EnableEurekaServer** 和**@EnableAdminServer**标注,同时需要配置WebSecurity，<br>下面是配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        http.httpBasic()<br>                .and().authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/actuator/**&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and().csrf().disable();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简易客户端的配置"><a href="#简易客户端的配置" class="headerlink" title="简易客户端的配置"></a>简易客户端的配置</h2><p>下面是<strong>pom.xml</strong>文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example.actuator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>actuator-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>actuator-client<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR11<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">server:<br>  port: 9101<br>spring:<br>  application:<br>    name: demo-client<br>eureka:<br>  client:<br>    service-url:<br>      defaultZone: http://username:password@serverIp:serverPort/eureka/<br>    healthcheck:<br>      enabled: true<br>  instance:<br>    prefer-ip-address: true<br>management:<br>  endpoints:<br>    web:<br>      exposure:<br>        include: &quot;*&quot;<br>  endpoint:<br>    health:<br>      show-details: ALWAYS<br></code></pre></td></tr></table></figure><p>启动类需要增加**@EnableDiscoveryClient**标注。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringCloud-eureka注册中心搭建&quot;&gt;&lt;a href=&quot;#SpringCloud-eureka注册中心搭建&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud eureka注册中心搭建&quot;&gt;&lt;/a&gt;SpringCloud eu</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Spring 框架中的@import注解</title>
    <link href="https://mirsery.github.io/2021/04/28/java/2021/Spring%20%E4%B8%AD@import%20%E6%B3%A8%E8%A7%A3/"/>
    <id>https://mirsery.github.io/2021/04/28/java/2021/Spring%20%E4%B8%AD@import%20%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-04-28T16:00:00.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-框架中的-import注解"><a href="#Spring-框架中的-import注解" class="headerlink" title="Spring 框架中的@import注解"></a>Spring 框架中的@import注解</h1><blockquote><p> @import注解是Spring基于java注解配置的主要组成部分，import注解提供了@Bean注解的功能，同时还有原来组织多个分散的@Configuration的功能。</p></blockquote><h2 id="import注解可以引入其他的configuration"><a href="#import注解可以引入其他的configuration" class="headerlink" title="import注解可以引入其他的configuration"></a>import注解可以引入其他的configuration</h2><p>example  code :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TestService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(&#123;ConfigB.class&#125;)</span>     <span class="hljs-comment">//@Import的优先于本身的的类定义加载</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigA</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TestService <span class="hljs-title">getTestService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TestServiceA();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigB</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TestService <span class="hljs-title">getTestServiceB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TestServiceB();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>场景类代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(ConfigA.class);<br>    TestService testService = applicationContext.getBean(TestService.class);<br>    testService.test();<br>    <span class="hljs-comment">//generate TestServiceB</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="import-注解也可以直接初始化其他类的Bean"><a href="#import-注解也可以直接初始化其他类的Bean" class="headerlink" title="import 注解也可以直接初始化其他类的Bean"></a>import 注解也可以直接初始化其他类的Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(&#123;TestServiceC.class&#125;)</span>     <span class="hljs-comment">//@Import的优先于本身的的类定义加载</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigA</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TestService <span class="hljs-title">getTestService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TestServiceA();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>场景类保持不变，此时TestService实例会变成TestServiceC 的实例。</p><h2 id="个性化加载，指定实现ImportSelector"><a href="#个性化加载，指定实现ImportSelector" class="headerlink" title="个性化加载，指定实现ImportSelector"></a>个性化加载，指定实现ImportSelector</h2><p>实现importSelector接口可实现个性化加载，下面是示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyimportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ImportSelector</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Select and return the names of which class(es) should be imported based on the &#123;<span class="hljs-doctag">@link</span> AnnotationMetadata&#125; of the</span><br><span class="hljs-comment">     * importing @&#123;<span class="hljs-doctag">@link</span> Configuration&#125; class.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> importingClassMetadata</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;com.mirsery.test.webtest.anno.TestServiceA&quot;</span>&#125;;<span class="hljs-comment">//    可以直接返回实体或者对应的config配置类</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基于AnnotationMetadata的参数实现动态加载类示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Import(My1importSelector.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableTestService &#123;<br>    <span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">My1importSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ImportSelector</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Select and return the names of which class(es) should be imported based on the &#123;<span class="hljs-doctag">@link</span> AnnotationMetadata&#125; of the</span><br><span class="hljs-comment">     * importing @&#123;<span class="hljs-doctag">@link</span> Configuration&#125; class.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> importingClassMetadata</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        Map&lt;String , Object&gt; map = importingClassMetadata.getAnnotationAttributes(EnableTestService.class.getName(), <span class="hljs-keyword">true</span>);<br>        String name = (String) map.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-keyword">if</span> (Objects.equals(name, <span class="hljs-string">&quot;B&quot;</span>)) &#123;<span class="hljs-comment">//</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;com.mirsery.test.webtest.anno.ConfigB&quot;</span>&#125;;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br><br>场景类直接使用标注<br><span class="hljs-meta">@EnableTestService(name=&quot;B&quot;)</span><br></code></pre></td></tr></table></figure><h2 id="实现ImportBeanDefinitionRegistrar-接口个性化加载"><a href="#实现ImportBeanDefinitionRegistrar-接口个性化加载" class="headerlink" title="实现ImportBeanDefinitionRegistrar 接口个性化加载"></a>实现ImportBeanDefinitionRegistrar 接口个性化加载</h2><p>和importSelector 类型，想要重新定义Bean，例如动态注入属性改变Bean的类型和Scope等等就需要通过实现ImportBeanDefinitionRegister的类实现,下面是示例代码:<br>//TODO</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-框架中的-import注解&quot;&gt;&lt;a href=&quot;#Spring-框架中的-import注解&quot; class=&quot;headerlink&quot; title=&quot;Spring 框架中的@import注解&quot;&gt;&lt;/a&gt;Spring 框架中的@import注解&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mirsery.github.io/tags/springboot/"/>
    
    <category term="annotation" scheme="https://mirsery.github.io/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>ByteBuf 引用计数问题</title>
    <link href="https://mirsery.github.io/2021/04/24/java/2021/Bytebuf%20%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>https://mirsery.github.io/2021/04/24/java/2021/Bytebuf%20%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/</id>
    <published>2021-04-24T16:00:00.000Z</published>
    <updated>2021-07-27T07:43:10.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> netty框架使用过程中关于ByteBuf 的处理<br>SImpleChannelInbound 会release ByteBuf，ChannelInboundHandlerAdapter 不会影响ByteBuf的引用计数</p></blockquote><!-- toc --><ul><li><a href="#---------">采用尾回收自动释放</a></li><li><a href="#----">手动释放</a></li></ul><!-- tocstop --><p>下面是使用<strong>EmbeddedChannel</strong>来演示ByteBuf引用计数回收的示例</p><h2 id="采用尾回收自动释放"><a href="#采用尾回收自动释放" class="headerlink" title="采用尾回收自动释放"></a>采用尾回收自动释放</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">EmbeddedChannel embeddedChannel = <span class="hljs-keyword">new</span> EmbeddedChannel();<br>embeddedChannel.pipeline().addLast(<span class="hljs-keyword">new</span> MyInBound());<br>ByteBuf buf = Unpooled.buffer();<br>buf.writeBytes(<span class="hljs-string">&quot;hello world!&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>embeddedChannel.writeInbound(buf);<br>System.out.println(<span class="hljs-string">&quot;The buf refCnt is &quot;</span> + buf.refCnt());<br><span class="hljs-keyword">try</span> &#123;<br>    Thread.sleep(<span class="hljs-number">10</span> * <span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInBound</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ChannelInboundHandlerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;my inbound===&quot;</span>);<br>        ByteBuf byteBuf = (ByteBuf) msg;<br>        System.out.println(byteBuf.slice().toString(CharsetUtil.UTF_8));<br>        ctx.fireChannelRead(byteBuf);<span class="hljs-comment">//must pass Bytebuf 才能出发尾引用计数回收</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="手动释放"><a href="#手动释放" class="headerlink" title="手动释放"></a>手动释放</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInBound</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ChannelInboundHandlerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;my inbound===&quot;</span>);<br>        ByteBuf byteBuf = (ByteBuf) msg;<br>        System.out.println(byteBuf.slice().toString(CharsetUtil.UTF_8));<br>        byteBuf.release();<br>...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p> netty自带的编码器处理了ByteBuf的引用释放问题 例如：StringDecoder.class</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; netty框架使用过程中关于ByteBuf 的处理&lt;br&gt;SImpleChannelInbound 会release ByteBuf，ChannelInboundHandlerAdapter 不会影响ByteBuf的引用计数&lt;/p&gt;
&lt;/bloc</summary>
      
    
    
    
    <category term="java" scheme="https://mirsery.github.io/categories/java/"/>
    
    
    <category term="netty" scheme="https://mirsery.github.io/tags/netty/"/>
    
    <category term="bytebuf" scheme="https://mirsery.github.io/tags/bytebuf/"/>
    
  </entry>
  
</feed>
